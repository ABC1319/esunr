{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/img/cuadros.png","path":"img/cuadros.png","modified":1,"renderable":1},{"_id":"themes/melody/source/img/shattered-island.gif","path":"img/shattered-island.gif","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c1a7202ad0fe8f63be3ce4a1c34c517f1a6c93a","modified":1573231127750},{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1573265124386},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1573265124387},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1573265124418},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1573265124418},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1573265124421},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1573265124422},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1573265124423},{"_id":"themes/melody/_config.yml","hash":"eb1665adc195efe40de156b78a23a660aba72064","modified":1573265124424},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1573265124464},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1573265124517},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124466},{"_id":"source/_data/melody.yml","hash":"7c6783677a0cccd6ed344ff2d428a1c761a94c46","modified":1573286862018},{"_id":"source/_posts/BeeGo快速使用指南.md","hash":"443ae6f9bcd9a29eb8307872e45813fccf9b1d46","modified":1573279882398},{"_id":"source/_posts/SVN快速使用指南.md","hash":"eb499a2130f237d289bfa9e975e498200b89eb38","modified":1573288549914},{"_id":"source/categories/index.md","hash":"c7d0ea94c45d90ff8f6f40c5f9a2838dd3741164","modified":1573280010550},{"_id":"source/tags/index.md","hash":"3ceffcad015cfd8d79dad409284168895c6d9408","modified":1573279999514},{"_id":"themes/melody/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573265124363},{"_id":"themes/melody/.git/config","hash":"d15ada34b8f38ff379372b129e946457ccfb5653","modified":1573265124372},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1573265120058},{"_id":"themes/melody/.git/index","hash":"747936f26d5bf25170216610d1a62adc6fc215ff","modified":1573287845998},{"_id":"themes/melody/.git/packed-refs","hash":"426361d43a9a593e6e12d5b3a5ee22ee3b2620c8","modified":1573265124353},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1573265124417},{"_id":"themes/melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1573265124420},{"_id":"themes/melody/.vscode/settings.json","hash":"46d72f2c9c27996464091654d1687babcd603d24","modified":1573265124421},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1573265124425},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1573265124425},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1573265124426},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1573265124427},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1573265124428},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1573265124429},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1573265124460},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1573265124461},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1573265124462},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1573265124462},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1573265124463},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1573265124465},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1573265124466},{"_id":"themes/melody/source/melody-favicon.ico","hash":"4559b67f8ee3699131e5ecf6f4945f53eab05774","modified":1573269250063},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124492},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1573265120060},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1573265120061},{"_id":"themes/melody/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1573265120080},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1573265120083},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1573265120084},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1573265120085},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1573265120085},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1573265120086},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1573265120087},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1573265120088},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1573265120089},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1573265120090},{"_id":"themes/melody/.git/logs/HEAD","hash":"4b448a9387f831713441ec6336b0ab9f2abcd5cf","modified":1573265124367},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1573265124430},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1573265124437},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1573265124439},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1573265124442},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1573265124443},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1573265124444},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1573265124446},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1573265124447},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1573265124448},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"0c95b391044c64504a459fcd1ca19d6e6d2f2a6c","modified":1573284876431},{"_id":"themes/melody/source/css/index.styl","hash":"b28d99c493bc61a777fb6245a87f589bc9a2a604","modified":1573281722703},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1573265124486},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1573265124487},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1573265124488},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1573265124489},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1573265124490},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1573265124491},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1573265124491},{"_id":"themes/melody/source/js/scroll.js","hash":"58dff7699bbf6f39bea793d23b061f732bd33af6","modified":1573287573199},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1573265124496},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1573265124515},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1573265124516},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124441},{"_id":"themes/melody/source/img/cuadros.png","hash":"d53a59657b0b09755aa27b069df8492ef748a36e","modified":1573285168780},{"_id":"themes/melody/source/img/shattered-island.gif","hash":"3721e8c797b1fa1d37df09fe213573048cfe90b8","modified":1573285309643},{"_id":"themes/melody/.git/objects/pack/pack-342306dcbb49a7c5ee3d2ca6cefbd8667bf96acb.idx","hash":"3c2e43ad068c9fc838385778bb8d0b3b51ae2b02","modified":1573265124104},{"_id":"themes/melody/.git/refs/heads/master","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1573265124366},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1573265124432},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1573265124433},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1573265124433},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1573265124434},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1573265124435},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1573265124436},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1573265124438},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1573265124441},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1573265124445},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1573265124446},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1573265124449},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1573265124450},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1573265124451},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1573265124452},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1573265124453},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1573265124454},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1573265124456},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1573265124458},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1573265124457},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1573265124459},{"_id":"themes/melody/source/css/_global/index.styl","hash":"5753cee9f2ad8f1bbfbb60fcaa710c687347a31d","modified":1573281761916},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1573265124470},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1573265124471},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1573265124472},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1573265124474},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1573265124475},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1573265124475},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1573265124476},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1573265124477},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1573265124478},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"92101a4a0b715a6d5285372e9667bc59442aea0e","modified":1573289033715},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1573265124480},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1573265124481},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1573265124482},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1573265124484},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1573265124484},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1573265124494},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1573265124495},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1573265124498},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1573265124499},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1573265124513},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1573265124514},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1573265124500},{"_id":"themes/melody/.git/logs/refs/heads/master","hash":"4b448a9387f831713441ec6336b0ab9f2abcd5cf","modified":1573265124369},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1573265124361},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1573265124502},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1573265124507},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1573265124509},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1573265124509},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1573265124510},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1573265124511},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1573265124512},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"e29d5a518257107c2af914e92c454e484dd3fedb","modified":1573265124361},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1573265124506},{"_id":"themes/melody/.git/objects/pack/pack-342306dcbb49a7c5ee3d2ca6cefbd8667bf96acb.pack","hash":"ab78b22d3b326082134b09801c0b5a32aa6a7008","modified":1573265124102},{"_id":"public/search.xml","hash":"0f583a35ea9cdfd1912943bb188e6984e6a06337","modified":1573289929244},{"_id":"public/tags/index.html","hash":"e60c0a685274e3ba7424f9b248f87a56ce32f89e","modified":1573289929244},{"_id":"public/categories/index.html","hash":"a4d2a478dc3c4c1df2f59aab83ba5cb1c9acd279","modified":1573289929244},{"_id":"public/categories/Git/index.html","hash":"d68789a382da9e3a61f27a9667d31d3346663ae0","modified":1573289929244},{"_id":"public/categories/GoLang/index.html","hash":"b0e3bff70b378204284869f8771bc395cc93ec5c","modified":1573289929244},{"_id":"public/tags/svn/index.html","hash":"c30e4aa780bfc1770590fbcb2a8b5b8b30e5e09c","modified":1573289929244},{"_id":"public/tags/运维/index.html","hash":"1eed83dc107e5b6f524f87f9920bdcc03061c428","modified":1573289929244},{"_id":"public/tags/版本控制/index.html","hash":"73b61b63e5a7b36c372a39a8a2278d885d46d391","modified":1573289929244},{"_id":"public/tags/Go/index.html","hash":"487a5e7fed57686184006e6d91cabde7653ae719","modified":1573289929244},{"_id":"public/tags/BeeGo/index.html","hash":"def6309518499985cc82a92daf054a8466bfa54d","modified":1573289929244},{"_id":"public/archives/index.html","hash":"572a5c93ba63e70276a85ac219edbe595ad8e47f","modified":1573289929244},{"_id":"public/archives/2019/index.html","hash":"4183fe1d5cda3844279e7bb06c00d300d0dabaa7","modified":1573289929244},{"_id":"public/archives/2019/11/index.html","hash":"00bd6cdc1d11ec3aed67de895636147285788b1b","modified":1573289929244},{"_id":"public/index.html","hash":"912e5ac7c1cd77c698bb559d1bb53123815be475","modified":1573289929244},{"_id":"public/2019/11/09/SVN快速使用指南/index.html","hash":"1949f39ed896cd1c801c913187956d57e11f65a0","modified":1573289929244},{"_id":"public/2019/11/09/BeeGo快速使用指南/index.html","hash":"cf8f385a2cd2947a503013814a52f062e5772873","modified":1573289929244},{"_id":"public/CNAME","hash":"3c1a7202ad0fe8f63be3ce4a1c34c517f1a6c93a","modified":1573289929244},{"_id":"public/melody-favicon.ico","hash":"4559b67f8ee3699131e5ecf6f4945f53eab05774","modified":1573289929244},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1573289929244},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1573289929244},{"_id":"public/img/cuadros.png","hash":"d53a59657b0b09755aa27b069df8492ef748a36e","modified":1573289929244},{"_id":"public/img/shattered-island.gif","hash":"3721e8c797b1fa1d37df09fe213573048cfe90b8","modified":1573289929244},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573289929244},{"_id":"public/js/copy.js","hash":"8d5080cd13ef6b50f5c0c22c140bba44cc5ee7fc","modified":1573289929244},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1573289929244},{"_id":"public/js/fancybox.js","hash":"cb63b81c05fcf1cee9f41befd84c41eeb55e5fce","modified":1573289929244},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573289929244},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1573289929244},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1573289929244},{"_id":"public/js/scroll.js","hash":"b2bb114ae03918b5d4473e922fc2a2ecf985ca27","modified":1573289929244},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1573289929244},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1573289929244},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1573289929244},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1573289929244},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1573289929244},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1573289929244},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1573289929244},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1573289929244},{"_id":"public/css/index.css","hash":"0ec5c42b527fec8d66980f342db348e852fa59ff","modified":1573289929244},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1573289929244},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1573289929244},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1573289929244},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1573289929244},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1573289929244},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1573289929244},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1573289929244},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1573289929244},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1573289929244}],"Category":[{"name":"Git","_id":"ck2rc7cpe0003to4u0mjtdpk2"},{"name":"GoLang","_id":"ck2rc7cpu000cto4ual4xavht"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}],"Page":[{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\ncomments: false\n---","updated":"2019-11-09T06:13:19.514Z","path":"tags/index.html","layout":"page","_id":"ck2rc7cpb0001to4uh7sgfcs5","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\ncomments: false\n---","updated":"2019-11-09T06:13:30.550Z","path":"categories/index.html","layout":"page","_id":"ck2rc7cpd0002to4u58c6aj2n","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""}],"Post":[{"title":"SVN快速使用指南","date":"2019-11-09T08:34:44.000Z","_content":"# 1.svn的安装\n\nsvn 需要安装 sliksvn 才能在命令行中使用 `svn` 指令\n\n```sh\nsvn --version\n```\n# 2.svn服务指令\n\n## 2.1 创建指令\n\n**​指令：**\n\n```sh\nsvnadmin create [Path]\n```\n**创建出的目录：**\n\n* conf/        设置权限时，需要设置conf目录\n* db/            存储svn自身的数据\n* hooks/    存放钩子，在每次提交时可以触发一定时间\n* locks/\n* format\n* README\\.txt\n\n## 2.2 启动服务器端程序\n\n### 2.2.1 将svn按指令方式启动​\n\n**指令：**\n\n```SH\nsvnserve -d -r [Path]\n```\n\\-d 表示后台执行，\\-r 标识版本根目录，服务器将会运行在 3690 端口\n\n### 2.2.2 将svn作为系统服务器启动（可后台运行）\n\n```sh\nsc create SVNService binpath= \"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\" start= auto depend= Tcpip\n```\nPS：这些指令的等号左边没空格，等号右边有一个空格\n\n# 3.svn操作指令\n\n## 3.1 取出版本（检出）\n\n创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目\n\n```sh\ncd ./DevWorkSpace/WorkSpaceSvn\nmkdir SpaceJerry\nmkdir SpaceTom\ncd SpaceJerry\nsvn checkout svn://localhost/OA\n\n>取出版本0\n```\n## 3.2 提交指令\n\n### 设置权限\n\n在服务器端存放的项目地址下，打开 `conf/svnserve.conf` 文件，并进行权限编辑，将匿名写入权限开启：\n\n```\nanon-access = write # 将匿名访问开启\n# auth-access = write\n```\n### 提交版本\n\n```sh\n# 新创建一个文件\nvi text.txt\n# 将文件加入版本控制系统\nsvn add text.txt\n# 填写日志信息并提交\nsvn commit -m \"My first commit\" text.txt\n```\n### 更新指令\n\n当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：\n\n```sh\nsvn update\n```\n# 4.解决冲突\n\n## 4.1 冲突产生的前置条件\n\nJerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；\n\n当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；\n\nTom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本**已过时。**\n\n\n\n​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。\n\n## 4.2 冲突产生的文件\n\n* \\*.main  是自己的文件\n* \\*.rx         x代表了在x版本时代码的状态\n\n# 4.权限\n\n## 4.1 开启授权访问\n\n打开 \\`conf/svnserve.conf\\` 文件，关闭匿名访问，开启授权访问\n\n```\nanon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见\nauth-access = write   # 开启授权访问\npassword-db = passwd  # 存放密码文件\nauthz-db = authz      # 存放授权信息的文件\n```\n## 4.2 设置用户\n\n打开 \\`conf/passwd\\` 文件，设置用户名与密码\n\n```\n[users]\ntom = 123456\njerry = 123456\nceshi = 123456\n```\n## 4.3 设置权限\n\n打开 \\`conf/authz\\` 文件，对用户进行分组：\n\n```\n[groups]\nkaifa = tom,jerry\n```\n分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：\n\n```\n# 设置权限目录\n[/]\n# 为用户组设置读写权限\n@kaifa = rw\n# 为单个用户设置读权限\nceshi = r\n# 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限\n* = \n```\n","source":"_posts/SVN快速使用指南.md","raw":"---\ntitle: SVN快速使用指南\ndate: 2019-11-09 16:34:44\ntags: [svn, 运维, 版本控制]\ncategories: Git\n---\n# 1.svn的安装\n\nsvn 需要安装 sliksvn 才能在命令行中使用 `svn` 指令\n\n```sh\nsvn --version\n```\n# 2.svn服务指令\n\n## 2.1 创建指令\n\n**​指令：**\n\n```sh\nsvnadmin create [Path]\n```\n**创建出的目录：**\n\n* conf/        设置权限时，需要设置conf目录\n* db/            存储svn自身的数据\n* hooks/    存放钩子，在每次提交时可以触发一定时间\n* locks/\n* format\n* README\\.txt\n\n## 2.2 启动服务器端程序\n\n### 2.2.1 将svn按指令方式启动​\n\n**指令：**\n\n```SH\nsvnserve -d -r [Path]\n```\n\\-d 表示后台执行，\\-r 标识版本根目录，服务器将会运行在 3690 端口\n\n### 2.2.2 将svn作为系统服务器启动（可后台运行）\n\n```sh\nsc create SVNService binpath= \"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\" start= auto depend= Tcpip\n```\nPS：这些指令的等号左边没空格，等号右边有一个空格\n\n# 3.svn操作指令\n\n## 3.1 取出版本（检出）\n\n创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目\n\n```sh\ncd ./DevWorkSpace/WorkSpaceSvn\nmkdir SpaceJerry\nmkdir SpaceTom\ncd SpaceJerry\nsvn checkout svn://localhost/OA\n\n>取出版本0\n```\n## 3.2 提交指令\n\n### 设置权限\n\n在服务器端存放的项目地址下，打开 `conf/svnserve.conf` 文件，并进行权限编辑，将匿名写入权限开启：\n\n```\nanon-access = write # 将匿名访问开启\n# auth-access = write\n```\n### 提交版本\n\n```sh\n# 新创建一个文件\nvi text.txt\n# 将文件加入版本控制系统\nsvn add text.txt\n# 填写日志信息并提交\nsvn commit -m \"My first commit\" text.txt\n```\n### 更新指令\n\n当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：\n\n```sh\nsvn update\n```\n# 4.解决冲突\n\n## 4.1 冲突产生的前置条件\n\nJerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；\n\n当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；\n\nTom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本**已过时。**\n\n\n\n​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。\n\n## 4.2 冲突产生的文件\n\n* \\*.main  是自己的文件\n* \\*.rx         x代表了在x版本时代码的状态\n\n# 4.权限\n\n## 4.1 开启授权访问\n\n打开 \\`conf/svnserve.conf\\` 文件，关闭匿名访问，开启授权访问\n\n```\nanon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见\nauth-access = write   # 开启授权访问\npassword-db = passwd  # 存放密码文件\nauthz-db = authz      # 存放授权信息的文件\n```\n## 4.2 设置用户\n\n打开 \\`conf/passwd\\` 文件，设置用户名与密码\n\n```\n[users]\ntom = 123456\njerry = 123456\nceshi = 123456\n```\n## 4.3 设置权限\n\n打开 \\`conf/authz\\` 文件，对用户进行分组：\n\n```\n[groups]\nkaifa = tom,jerry\n```\n分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：\n\n```\n# 设置权限目录\n[/]\n# 为用户组设置读写权限\n@kaifa = rw\n# 为单个用户设置读权限\nceshi = r\n# 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限\n* = \n```\n","slug":"SVN快速使用指南","published":1,"updated":"2019-11-09T08:35:49.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2rc7cp40000to4u1kpk8e24","content":"<h1 id=\"1-svn的安装\"><a href=\"#1-svn的安装\" class=\"headerlink\" title=\"1.svn的安装\"></a>1.svn的安装</h1><p>svn 需要安装 sliksvn 才能在命令行中使用 <code>svn</code> 指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn --version</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-svn服务指令\"><a href=\"#2-svn服务指令\" class=\"headerlink\" title=\"2.svn服务指令\"></a>2.svn服务指令</h1><h2 id=\"2-1-创建指令\"><a href=\"#2-1-创建指令\" class=\"headerlink\" title=\"2.1 创建指令\"></a>2.1 创建指令</h2><p><strong>​指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create [Path]</span><br></pre></td></tr></table></figure>\n<p><strong>创建出的目录：</strong></p>\n<ul>\n<li>conf/        设置权限时，需要设置conf目录</li>\n<li>db/            存储svn自身的数据</li>\n<li>hooks/    存放钩子，在每次提交时可以触发一定时间</li>\n<li>locks/</li>\n<li>format</li>\n<li>README.txt</li>\n</ul>\n<h2 id=\"2-2-启动服务器端程序\"><a href=\"#2-2-启动服务器端程序\" class=\"headerlink\" title=\"2.2 启动服务器端程序\"></a>2.2 启动服务器端程序</h2><h3 id=\"2-2-1-将svn按指令方式启动​\"><a href=\"#2-2-1-将svn按指令方式启动​\" class=\"headerlink\" title=\"2.2.1 将svn按指令方式启动​\"></a>2.2.1 将svn按指令方式启动​</h3><p><strong>指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r [Path]</span><br></pre></td></tr></table></figure>\n<p>-d 表示后台执行，-r 标识版本根目录，服务器将会运行在 3690 端口</p>\n<h3 id=\"2-2-2-将svn作为系统服务器启动（可后台运行）\"><a href=\"#2-2-2-将svn作为系统服务器启动（可后台运行）\" class=\"headerlink\" title=\"2.2.2 将svn作为系统服务器启动（可后台运行）\"></a>2.2.2 将svn作为系统服务器启动（可后台运行）</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc create SVNService binpath= <span class=\"string\">\"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\"</span> start= auto depend= Tcpip</span><br></pre></td></tr></table></figure>\n<p>PS：这些指令的等号左边没空格，等号右边有一个空格</p>\n<h1 id=\"3-svn操作指令\"><a href=\"#3-svn操作指令\" class=\"headerlink\" title=\"3.svn操作指令\"></a>3.svn操作指令</h1><h2 id=\"3-1-取出版本（检出）\"><a href=\"#3-1-取出版本（检出）\" class=\"headerlink\" title=\"3.1 取出版本（检出）\"></a>3.1 取出版本（检出）</h2><p>创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./DevWorkSpace/WorkSpaceSvn</span><br><span class=\"line\">mkdir SpaceJerry</span><br><span class=\"line\">mkdir SpaceTom</span><br><span class=\"line\"><span class=\"built_in\">cd</span> SpaceJerry</span><br><span class=\"line\">svn checkout svn://localhost/OA</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;取出版本0</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-提交指令\"><a href=\"#3-2-提交指令\" class=\"headerlink\" title=\"3.2 提交指令\"></a>3.2 提交指令</h2><h3 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h3><p>在服务器端存放的项目地址下，打开 <code>conf/svnserve.conf</code> 文件，并进行权限编辑，将匿名写入权限开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = write # 将匿名访问开启</span><br><span class=\"line\"># auth-access = write</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交版本\"><a href=\"#提交版本\" class=\"headerlink\" title=\"提交版本\"></a>提交版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新创建一个文件</span></span><br><span class=\"line\">vi text.txt</span><br><span class=\"line\"><span class=\"comment\"># 将文件加入版本控制系统</span></span><br><span class=\"line\">svn add text.txt</span><br><span class=\"line\"><span class=\"comment\"># 填写日志信息并提交</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"My first commit\"</span> text.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新指令\"><a href=\"#更新指令\" class=\"headerlink\" title=\"更新指令\"></a>更新指令</h3><p>当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn update</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-解决冲突\"><a href=\"#4-解决冲突\" class=\"headerlink\" title=\"4.解决冲突\"></a>4.解决冲突</h1><h2 id=\"4-1-冲突产生的前置条件\"><a href=\"#4-1-冲突产生的前置条件\" class=\"headerlink\" title=\"4.1 冲突产生的前置条件\"></a>4.1 冲突产生的前置条件</h2><p>Jerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；</p>\n<p>当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；</p>\n<p>Tom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本<strong>已过时。</strong></p>\n<p>​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。</p>\n<h2 id=\"4-2-冲突产生的文件\"><a href=\"#4-2-冲突产生的文件\" class=\"headerlink\" title=\"4.2 冲突产生的文件\"></a>4.2 冲突产生的文件</h2><ul>\n<li>*.main  是自己的文件</li>\n<li>*.rx         x代表了在x版本时代码的状态</li>\n</ul>\n<h1 id=\"4-权限\"><a href=\"#4-权限\" class=\"headerlink\" title=\"4.权限\"></a>4.权限</h1><h2 id=\"4-1-开启授权访问\"><a href=\"#4-1-开启授权访问\" class=\"headerlink\" title=\"4.1 开启授权访问\"></a>4.1 开启授权访问</h2><p>打开 `conf/svnserve.conf` 文件，关闭匿名访问，开启授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见</span><br><span class=\"line\">auth-access = write   # 开启授权访问</span><br><span class=\"line\">password-db = passwd  # 存放密码文件</span><br><span class=\"line\">authz-db = authz      # 存放授权信息的文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-设置用户\"><a href=\"#4-2-设置用户\" class=\"headerlink\" title=\"4.2 设置用户\"></a>4.2 设置用户</h2><p>打开 `conf/passwd` 文件，设置用户名与密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\">tom = 123456</span><br><span class=\"line\">jerry = 123456</span><br><span class=\"line\">ceshi = 123456</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-设置权限\"><a href=\"#4-3-设置权限\" class=\"headerlink\" title=\"4.3 设置权限\"></a>4.3 设置权限</h2><p>打开 `conf/authz` 文件，对用户进行分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">kaifa = tom,jerry</span><br></pre></td></tr></table></figure>\n<p>分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置权限目录</span><br><span class=\"line\">[/]</span><br><span class=\"line\"># 为用户组设置读写权限</span><br><span class=\"line\">@kaifa = rw</span><br><span class=\"line\"># 为单个用户设置读权限</span><br><span class=\"line\">ceshi = r</span><br><span class=\"line\"># 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限</span><br><span class=\"line\">* =</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-svn的安装\"><a href=\"#1-svn的安装\" class=\"headerlink\" title=\"1.svn的安装\"></a>1.svn的安装</h1><p>svn 需要安装 sliksvn 才能在命令行中使用 <code>svn</code> 指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn --version</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-svn服务指令\"><a href=\"#2-svn服务指令\" class=\"headerlink\" title=\"2.svn服务指令\"></a>2.svn服务指令</h1><h2 id=\"2-1-创建指令\"><a href=\"#2-1-创建指令\" class=\"headerlink\" title=\"2.1 创建指令\"></a>2.1 创建指令</h2><p><strong>​指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create [Path]</span><br></pre></td></tr></table></figure>\n<p><strong>创建出的目录：</strong></p>\n<ul>\n<li>conf/        设置权限时，需要设置conf目录</li>\n<li>db/            存储svn自身的数据</li>\n<li>hooks/    存放钩子，在每次提交时可以触发一定时间</li>\n<li>locks/</li>\n<li>format</li>\n<li>README.txt</li>\n</ul>\n<h2 id=\"2-2-启动服务器端程序\"><a href=\"#2-2-启动服务器端程序\" class=\"headerlink\" title=\"2.2 启动服务器端程序\"></a>2.2 启动服务器端程序</h2><h3 id=\"2-2-1-将svn按指令方式启动​\"><a href=\"#2-2-1-将svn按指令方式启动​\" class=\"headerlink\" title=\"2.2.1 将svn按指令方式启动​\"></a>2.2.1 将svn按指令方式启动​</h3><p><strong>指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r [Path]</span><br></pre></td></tr></table></figure>\n<p>-d 表示后台执行，-r 标识版本根目录，服务器将会运行在 3690 端口</p>\n<h3 id=\"2-2-2-将svn作为系统服务器启动（可后台运行）\"><a href=\"#2-2-2-将svn作为系统服务器启动（可后台运行）\" class=\"headerlink\" title=\"2.2.2 将svn作为系统服务器启动（可后台运行）\"></a>2.2.2 将svn作为系统服务器启动（可后台运行）</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc create SVNService binpath= <span class=\"string\">\"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\"</span> start= auto depend= Tcpip</span><br></pre></td></tr></table></figure>\n<p>PS：这些指令的等号左边没空格，等号右边有一个空格</p>\n<h1 id=\"3-svn操作指令\"><a href=\"#3-svn操作指令\" class=\"headerlink\" title=\"3.svn操作指令\"></a>3.svn操作指令</h1><h2 id=\"3-1-取出版本（检出）\"><a href=\"#3-1-取出版本（检出）\" class=\"headerlink\" title=\"3.1 取出版本（检出）\"></a>3.1 取出版本（检出）</h2><p>创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./DevWorkSpace/WorkSpaceSvn</span><br><span class=\"line\">mkdir SpaceJerry</span><br><span class=\"line\">mkdir SpaceTom</span><br><span class=\"line\"><span class=\"built_in\">cd</span> SpaceJerry</span><br><span class=\"line\">svn checkout svn://localhost/OA</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;取出版本0</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-提交指令\"><a href=\"#3-2-提交指令\" class=\"headerlink\" title=\"3.2 提交指令\"></a>3.2 提交指令</h2><h3 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h3><p>在服务器端存放的项目地址下，打开 <code>conf/svnserve.conf</code> 文件，并进行权限编辑，将匿名写入权限开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = write # 将匿名访问开启</span><br><span class=\"line\"># auth-access = write</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交版本\"><a href=\"#提交版本\" class=\"headerlink\" title=\"提交版本\"></a>提交版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新创建一个文件</span></span><br><span class=\"line\">vi text.txt</span><br><span class=\"line\"><span class=\"comment\"># 将文件加入版本控制系统</span></span><br><span class=\"line\">svn add text.txt</span><br><span class=\"line\"><span class=\"comment\"># 填写日志信息并提交</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"My first commit\"</span> text.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新指令\"><a href=\"#更新指令\" class=\"headerlink\" title=\"更新指令\"></a>更新指令</h3><p>当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn update</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-解决冲突\"><a href=\"#4-解决冲突\" class=\"headerlink\" title=\"4.解决冲突\"></a>4.解决冲突</h1><h2 id=\"4-1-冲突产生的前置条件\"><a href=\"#4-1-冲突产生的前置条件\" class=\"headerlink\" title=\"4.1 冲突产生的前置条件\"></a>4.1 冲突产生的前置条件</h2><p>Jerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；</p>\n<p>当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；</p>\n<p>Tom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本<strong>已过时。</strong></p>\n<p>​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。</p>\n<h2 id=\"4-2-冲突产生的文件\"><a href=\"#4-2-冲突产生的文件\" class=\"headerlink\" title=\"4.2 冲突产生的文件\"></a>4.2 冲突产生的文件</h2><ul>\n<li>*.main  是自己的文件</li>\n<li>*.rx         x代表了在x版本时代码的状态</li>\n</ul>\n<h1 id=\"4-权限\"><a href=\"#4-权限\" class=\"headerlink\" title=\"4.权限\"></a>4.权限</h1><h2 id=\"4-1-开启授权访问\"><a href=\"#4-1-开启授权访问\" class=\"headerlink\" title=\"4.1 开启授权访问\"></a>4.1 开启授权访问</h2><p>打开 `conf/svnserve.conf` 文件，关闭匿名访问，开启授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见</span><br><span class=\"line\">auth-access = write   # 开启授权访问</span><br><span class=\"line\">password-db = passwd  # 存放密码文件</span><br><span class=\"line\">authz-db = authz      # 存放授权信息的文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-设置用户\"><a href=\"#4-2-设置用户\" class=\"headerlink\" title=\"4.2 设置用户\"></a>4.2 设置用户</h2><p>打开 `conf/passwd` 文件，设置用户名与密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\">tom = 123456</span><br><span class=\"line\">jerry = 123456</span><br><span class=\"line\">ceshi = 123456</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-设置权限\"><a href=\"#4-3-设置权限\" class=\"headerlink\" title=\"4.3 设置权限\"></a>4.3 设置权限</h2><p>打开 `conf/authz` 文件，对用户进行分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">kaifa = tom,jerry</span><br></pre></td></tr></table></figure>\n<p>分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置权限目录</span><br><span class=\"line\">[/]</span><br><span class=\"line\"># 为用户组设置读写权限</span><br><span class=\"line\">@kaifa = rw</span><br><span class=\"line\"># 为单个用户设置读权限</span><br><span class=\"line\">ceshi = r</span><br><span class=\"line\"># 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限</span><br><span class=\"line\">* =</span><br></pre></td></tr></table></figure>\n"},{"title":"BeeGo快速使用指南","date":"2019-11-09T06:03:52.000Z","_content":"\n# 1. 安装与使用\n\n## 1.1 安装Bee\n\n```\ngo get github.com/astaxie/beego\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n```\n\n## 1.2 创建一个Bee项目\n\n创建一个标准的 Bee 项目：\n\n```sh\nbee new myproject\n```\n\n创建一个 api 应用：\n\n```\nbee api apiproject\n```\n\n创建一个标准的 Bee 项目的目录结构：\n\n```\n├─conf\n├─controllers\n├─models\n├─routers\n├─static\n│  ├─css\n│  ├─img\n│  └─js\n├─tests\n└─views\n```\n\n## 1.3 启动\n\n在本地以开发模式启动应用：\n\n```sh\n$ bee run\n```\n\n# 2. Router\n\n## 2.1 默认访问\n\n在 `mian.go` 中引入路由系统：\n\n```diff\n// main.go\npackage main\n\nimport (\n+   _ \"Bee-Study/quickstart/routers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc main() {\n\tbeego.Run()\n}\n```\n\n首先在 Controller 层创建对应的 Controller 逻辑：\n\n```go\n// controllers/default.go\npackage controllers\n\nimport (\n\t\"github.com/astaxie/beego\"\n)\n\ntype MainController struct {\n\tbeego.Controller\n}\n\nfunc (c *MainController) Get() {\n\tc.Ctx.WriteString(\"hello\")\n}\n```\n\n然后将路由文件创建于 routers 目录下：\n\n```go\n// routers/router.go\npackage routers\n\nimport (\n\t\"Bee-Study/quickstart/controllers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc init() {\n    beego.Router(\"/\", &controllers.MainController{})\n}\n```\n\n当我们访问 `localhost:prot/` 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 `MainController` 的 `Get()` 方法，输出 `hello`。\n\n## 2.2 不同路由匹配不同方法\n\n由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 `Get()` 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 `beego.Router` 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：\n\n```go\n// router.go\nbeego.Router(\"/test\", &controllers.MainController{}, \"get:handleTest\")\n```\n\n```go\n// controller.go\nfunc (c *MainController) handleTest(){\n    // do something\n}\n```\n\n# 3. Controller\n\n## 3.1 创建一个 Controller \n\nController 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 `main.go` 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。\n\n创建一个 Controller 我们要继承一个 `beego.Controller` 对象：\n\n```go\ntype MainController struct {\n\tbeego.Controller\n}\n```\n\n之后我们可以复写其 `Get()` 方法：\n\n```go\nfunc (c *MainController) Get() {\n\tc.Data[\"Website\"] = \"beego.me\"\n\tc.Data[\"Email\"] = \"astaxie@gmail.com\"\n\tc.TplName = \"index.tpl\"\n}\n```\n\n## 3.2 Controller 对象\n\n一个 `beeg.Controller` 类型的实例上挂载了如下的常用属性：\n\n- **Data：** 向 Template 中传入的数据\n\n- **TplName：**  vies 文件目录下的模板名称\n\n- **Ctx：** 上下文对象\n\n  - **Ctx.WriteString(content)：** 返回内容\n\n- **Redirect(url, code)：** 重定向 \n\n  > c.Redirect(“/register”, 302)\n\n- **GetString(key)：** 获取 post 数据\n\n  > name := c.GetString(“userName”)\n\n- **GetFile(key)：**获取文件\n\n  ```go\n  f, h, err := c.GetFile(“uploadname”)\n  defer f.Close()\n  if err !- nil{\n      return\n  }else{\n      c.SaveToFile(\"uploadname\", \"./static/img\" + h.Filename)\n  }\n  ```\n\n# 4. ORM\n\n## 4.1 创建一个Model\n\nBee 自带一个ORM框架，如果未下载需要手动安装：\n\n```sh\n$ go get github.com/astaxie/beego/orm\n```\n\n如果我们要连接 Mysql 数据库，则需要另外安装驱动：\n\n```sh\n$ go get github.com/go-sql-driver/mysql\n```\n\n之后我们在 `/models/model.go` 文件中需要引入 orm 与 mysql 驱动：\n\n```go\n// model.go\nimport (\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n之后定义一个数据库模型：\n\n```go\n// model.go\ntype User struct {\n\tId   int\n\tName string\n\tPwd  string\n}\n```\n\n创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：\n\n```go\n// model.go\nfunc init() {\n    // 连接数据库 参数：别名、数据库类型、连接uri\n\t_ = orm.RegisterDataBase(\"default\", \"mysql\", \"root:root@tcp(localhost:3306)/beego_study?charset=utf8\")\n    // 注册 Model\n\torm.RegisterModel(new(User))\n\t// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程\n\t_ = orm.RunSyncdb(\"default\", false, true)\n}\n```\n\n最后不要忘记在 `mian.go` 中加载 models：\n\n```go\n// mian.go\nimport (\n\t_ \"Bee-Study/quickstart/models\"\n    // ... ...\n)\n```\n\n## 4.2 ORM 的基本操作\n\n示例中的 `User` 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 `model.go` 文件中的 `User` 对象，其引入方式为 `models.User`。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。\n\n> 对数据库的操作都是在 Controller 层完成的。\n\n### 4.2.1 插入\n\n```go\no := orm.NewOrm()\nvar user User\nuser.Name = \"slene\"\nuser.Pwd= true\n\nid, err := o.Insert(&user)\nif err == nil {\n    // fmt.Println(id)\n    beego.Info(\"插入失败\",err)\n    return\n}\n```\n\n### 4.2.2 查询\n\n```go\no := orm.NewOrm()\nuser := User{}\nerr := o.Read(&user)\n```\n\n也可以指定字段查询：\n\n```go\nuser := User{Name: \"slene\"}\n// 或者：user.name = \"slene\"\nerr = o.Read(&user, \"Name\")\n```\n\n同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：\n\n```go\no := orm.NewOrm()\n// 获取 QuerySeter 对象，user 为表名\nqs := o.QueryTable(\"user\")\n\n// 也可以直接使用对象作为表名\nuser := new(User)\nqs = o.QueryTable(user) // 返回 QuerySeter\n```\n\n- qs.Filter：用来过滤查询结果，起到 **包含条件** 的作用\n\n- qs.Exclude：用来过滤查询结果，起到 **排除条件** 的作用\n\n- qs.All：返回对应的结果集对象\n\n  ```go\n  var users []*User\n  num, err := o.QueryTable(\"user\").Filter(\"name\", \"slene\").All(&users)\n  fmt.Printf(\"Returned Rows Num: %s, %s\", num, err)\n  ```\n\n- 更多用法查看 [官方文档](https://beego.me/docs/mvc/model/query.md)\n\n### 4.2.3 更新\n\n```go\no := orm.NewOrm()\nuser := User{Id: 1}\nif o.Read(&user) == nil {\n    user.Name = \"MyName\"\n    if num, err := o.Update(&user); err == nil {\n        fmt.Println(num)\n    }\n}\n```\n\n也可以指定更新的字段：\n\n```go\n// 只更新 Name\no.Update(&user, \"Name\")\n// 指定多个字段\n// o.Update(&user, \"Field1\", \"Field2\", ...)\n...\n```\n\n### 4.2.4 删除\n\n```go\no := orm.NewOrm()\nif num, err := o.Delete(&User{Id: 1}); err == nil {\n    fmt.Println(num)\n}\n```\n\n## 4.3 模型创建详解\n\n我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。\n\n### 4.3.1 字段的命名规范\n\n首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：\n\n- 创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。\n- `RunSyncdb()` 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。\n\n如结构：\n\n```go\ntype User struct{\n    Name String\n    Age int\n    BirthDay time.Time\n}\n```\n\n生成的表为：\n\n| 字段      | 类型   |\n| --------- | ------ |\n| name      | string |\n| age       | int32  |\n| birth_day | time   |\n\n### 4.3.2 字段的属性设置\n\n在设置了字段类型后，可以在后面通过 `orm:`  来追字段的属性。\n\n设置主键：`pk`\n\n设置自增：`auto`\n\n如设置一个自增的主键：\n\n```go\nId int `orm: \"pk;auto\"`\n```\n\n当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。\n\n设置默认值 `orm:\"default(11)\"`\n\n设置长度 `orm:\"size(100)\"`\n\n设置允许为空 `orm:\"null\"`，数据库默认是非空，设置 `null` 之后就可以变为`ALLOW NULL`\n\n设置唯一： `orm:”unique”`\n\n设置浮点数精度 `orm:\"digits(12);decimals(4)\"`  总共12位，四位是小数位\n\n设置时间： `orm:\"auto_now_add;type(datetime)\"`\n\n**auto_now 每次 model 保存时都会对时间自动更新**\n\n**auto_now_add 第一次保存时才设置时间**\n\n设置时间的格式：type\n\n### 4.3.3 一对多关系的创建\n\n如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：\n\n```go\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n}\n\ntype ArticleType struct{\n    Id int\n    TypeName string\n    Articles[] *Articles `orm:\"reverse(many)\"`\n}\n```\n\n当查询时，我们需要使用 `RelatedSel()` 指定连接的表，如：\n\n```go\no := orm.NewOrm()\nvar articles[]models.Article\no.QueryTable(\"Article\").RelatedSel(\"ArticleType\").Filter(\"Article__TypeName\", \"文章类型\").All(&articles)\n```\n\n当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：\n\n```go\ntypeName := ”文章类型“\nvar artiType model.ArticleType\nartiType.TypeName = typeName\nerr = o.Read(&artiType, \"TypeName\")\nif err != nil{\n    beego.Info(\"类型不存在\")\n    return\n}\narticle.ArticleType = &artiType\narticle.Content = \"... ...\"\n// 插入数据\n_,err = o.Insert(&article)\n// ... ...\n```\n\n### 4.3.3 多对多关系的创建\n\n同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：\n\n```go\ntype User struct{\n    Id int\n    Name String\n    Articles[]*Article `orm:\"rel(m2m)\"`\n}\n\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n    User[] *Users `orm:\"reverse(many)\"`\n}\n```\n\n这样创建完成后，会自动多出一张关系表 user_articles：\n\n| 字段       | 类型       |\n| ---------- | ---------- |\n| id         | bigint(20) |\n| user_id    | int(11)    |\n| article_id | int(11)    |\n\n","source":"_posts/BeeGo快速使用指南.md","raw":"---\ntitle: BeeGo快速使用指南\ndate: 2019-11-09 14:03:52\ntags: [Go, BeeGo]\ncategories: GoLang\n---\n\n# 1. 安装与使用\n\n## 1.1 安装Bee\n\n```\ngo get github.com/astaxie/beego\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n```\n\n## 1.2 创建一个Bee项目\n\n创建一个标准的 Bee 项目：\n\n```sh\nbee new myproject\n```\n\n创建一个 api 应用：\n\n```\nbee api apiproject\n```\n\n创建一个标准的 Bee 项目的目录结构：\n\n```\n├─conf\n├─controllers\n├─models\n├─routers\n├─static\n│  ├─css\n│  ├─img\n│  └─js\n├─tests\n└─views\n```\n\n## 1.3 启动\n\n在本地以开发模式启动应用：\n\n```sh\n$ bee run\n```\n\n# 2. Router\n\n## 2.1 默认访问\n\n在 `mian.go` 中引入路由系统：\n\n```diff\n// main.go\npackage main\n\nimport (\n+   _ \"Bee-Study/quickstart/routers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc main() {\n\tbeego.Run()\n}\n```\n\n首先在 Controller 层创建对应的 Controller 逻辑：\n\n```go\n// controllers/default.go\npackage controllers\n\nimport (\n\t\"github.com/astaxie/beego\"\n)\n\ntype MainController struct {\n\tbeego.Controller\n}\n\nfunc (c *MainController) Get() {\n\tc.Ctx.WriteString(\"hello\")\n}\n```\n\n然后将路由文件创建于 routers 目录下：\n\n```go\n// routers/router.go\npackage routers\n\nimport (\n\t\"Bee-Study/quickstart/controllers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc init() {\n    beego.Router(\"/\", &controllers.MainController{})\n}\n```\n\n当我们访问 `localhost:prot/` 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 `MainController` 的 `Get()` 方法，输出 `hello`。\n\n## 2.2 不同路由匹配不同方法\n\n由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 `Get()` 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 `beego.Router` 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：\n\n```go\n// router.go\nbeego.Router(\"/test\", &controllers.MainController{}, \"get:handleTest\")\n```\n\n```go\n// controller.go\nfunc (c *MainController) handleTest(){\n    // do something\n}\n```\n\n# 3. Controller\n\n## 3.1 创建一个 Controller \n\nController 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 `main.go` 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。\n\n创建一个 Controller 我们要继承一个 `beego.Controller` 对象：\n\n```go\ntype MainController struct {\n\tbeego.Controller\n}\n```\n\n之后我们可以复写其 `Get()` 方法：\n\n```go\nfunc (c *MainController) Get() {\n\tc.Data[\"Website\"] = \"beego.me\"\n\tc.Data[\"Email\"] = \"astaxie@gmail.com\"\n\tc.TplName = \"index.tpl\"\n}\n```\n\n## 3.2 Controller 对象\n\n一个 `beeg.Controller` 类型的实例上挂载了如下的常用属性：\n\n- **Data：** 向 Template 中传入的数据\n\n- **TplName：**  vies 文件目录下的模板名称\n\n- **Ctx：** 上下文对象\n\n  - **Ctx.WriteString(content)：** 返回内容\n\n- **Redirect(url, code)：** 重定向 \n\n  > c.Redirect(“/register”, 302)\n\n- **GetString(key)：** 获取 post 数据\n\n  > name := c.GetString(“userName”)\n\n- **GetFile(key)：**获取文件\n\n  ```go\n  f, h, err := c.GetFile(“uploadname”)\n  defer f.Close()\n  if err !- nil{\n      return\n  }else{\n      c.SaveToFile(\"uploadname\", \"./static/img\" + h.Filename)\n  }\n  ```\n\n# 4. ORM\n\n## 4.1 创建一个Model\n\nBee 自带一个ORM框架，如果未下载需要手动安装：\n\n```sh\n$ go get github.com/astaxie/beego/orm\n```\n\n如果我们要连接 Mysql 数据库，则需要另外安装驱动：\n\n```sh\n$ go get github.com/go-sql-driver/mysql\n```\n\n之后我们在 `/models/model.go` 文件中需要引入 orm 与 mysql 驱动：\n\n```go\n// model.go\nimport (\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n之后定义一个数据库模型：\n\n```go\n// model.go\ntype User struct {\n\tId   int\n\tName string\n\tPwd  string\n}\n```\n\n创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：\n\n```go\n// model.go\nfunc init() {\n    // 连接数据库 参数：别名、数据库类型、连接uri\n\t_ = orm.RegisterDataBase(\"default\", \"mysql\", \"root:root@tcp(localhost:3306)/beego_study?charset=utf8\")\n    // 注册 Model\n\torm.RegisterModel(new(User))\n\t// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程\n\t_ = orm.RunSyncdb(\"default\", false, true)\n}\n```\n\n最后不要忘记在 `mian.go` 中加载 models：\n\n```go\n// mian.go\nimport (\n\t_ \"Bee-Study/quickstart/models\"\n    // ... ...\n)\n```\n\n## 4.2 ORM 的基本操作\n\n示例中的 `User` 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 `model.go` 文件中的 `User` 对象，其引入方式为 `models.User`。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。\n\n> 对数据库的操作都是在 Controller 层完成的。\n\n### 4.2.1 插入\n\n```go\no := orm.NewOrm()\nvar user User\nuser.Name = \"slene\"\nuser.Pwd= true\n\nid, err := o.Insert(&user)\nif err == nil {\n    // fmt.Println(id)\n    beego.Info(\"插入失败\",err)\n    return\n}\n```\n\n### 4.2.2 查询\n\n```go\no := orm.NewOrm()\nuser := User{}\nerr := o.Read(&user)\n```\n\n也可以指定字段查询：\n\n```go\nuser := User{Name: \"slene\"}\n// 或者：user.name = \"slene\"\nerr = o.Read(&user, \"Name\")\n```\n\n同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：\n\n```go\no := orm.NewOrm()\n// 获取 QuerySeter 对象，user 为表名\nqs := o.QueryTable(\"user\")\n\n// 也可以直接使用对象作为表名\nuser := new(User)\nqs = o.QueryTable(user) // 返回 QuerySeter\n```\n\n- qs.Filter：用来过滤查询结果，起到 **包含条件** 的作用\n\n- qs.Exclude：用来过滤查询结果，起到 **排除条件** 的作用\n\n- qs.All：返回对应的结果集对象\n\n  ```go\n  var users []*User\n  num, err := o.QueryTable(\"user\").Filter(\"name\", \"slene\").All(&users)\n  fmt.Printf(\"Returned Rows Num: %s, %s\", num, err)\n  ```\n\n- 更多用法查看 [官方文档](https://beego.me/docs/mvc/model/query.md)\n\n### 4.2.3 更新\n\n```go\no := orm.NewOrm()\nuser := User{Id: 1}\nif o.Read(&user) == nil {\n    user.Name = \"MyName\"\n    if num, err := o.Update(&user); err == nil {\n        fmt.Println(num)\n    }\n}\n```\n\n也可以指定更新的字段：\n\n```go\n// 只更新 Name\no.Update(&user, \"Name\")\n// 指定多个字段\n// o.Update(&user, \"Field1\", \"Field2\", ...)\n...\n```\n\n### 4.2.4 删除\n\n```go\no := orm.NewOrm()\nif num, err := o.Delete(&User{Id: 1}); err == nil {\n    fmt.Println(num)\n}\n```\n\n## 4.3 模型创建详解\n\n我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。\n\n### 4.3.1 字段的命名规范\n\n首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：\n\n- 创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。\n- `RunSyncdb()` 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。\n\n如结构：\n\n```go\ntype User struct{\n    Name String\n    Age int\n    BirthDay time.Time\n}\n```\n\n生成的表为：\n\n| 字段      | 类型   |\n| --------- | ------ |\n| name      | string |\n| age       | int32  |\n| birth_day | time   |\n\n### 4.3.2 字段的属性设置\n\n在设置了字段类型后，可以在后面通过 `orm:`  来追字段的属性。\n\n设置主键：`pk`\n\n设置自增：`auto`\n\n如设置一个自增的主键：\n\n```go\nId int `orm: \"pk;auto\"`\n```\n\n当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。\n\n设置默认值 `orm:\"default(11)\"`\n\n设置长度 `orm:\"size(100)\"`\n\n设置允许为空 `orm:\"null\"`，数据库默认是非空，设置 `null` 之后就可以变为`ALLOW NULL`\n\n设置唯一： `orm:”unique”`\n\n设置浮点数精度 `orm:\"digits(12);decimals(4)\"`  总共12位，四位是小数位\n\n设置时间： `orm:\"auto_now_add;type(datetime)\"`\n\n**auto_now 每次 model 保存时都会对时间自动更新**\n\n**auto_now_add 第一次保存时才设置时间**\n\n设置时间的格式：type\n\n### 4.3.3 一对多关系的创建\n\n如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：\n\n```go\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n}\n\ntype ArticleType struct{\n    Id int\n    TypeName string\n    Articles[] *Articles `orm:\"reverse(many)\"`\n}\n```\n\n当查询时，我们需要使用 `RelatedSel()` 指定连接的表，如：\n\n```go\no := orm.NewOrm()\nvar articles[]models.Article\no.QueryTable(\"Article\").RelatedSel(\"ArticleType\").Filter(\"Article__TypeName\", \"文章类型\").All(&articles)\n```\n\n当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：\n\n```go\ntypeName := ”文章类型“\nvar artiType model.ArticleType\nartiType.TypeName = typeName\nerr = o.Read(&artiType, \"TypeName\")\nif err != nil{\n    beego.Info(\"类型不存在\")\n    return\n}\narticle.ArticleType = &artiType\narticle.Content = \"... ...\"\n// 插入数据\n_,err = o.Insert(&article)\n// ... ...\n```\n\n### 4.3.3 多对多关系的创建\n\n同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：\n\n```go\ntype User struct{\n    Id int\n    Name String\n    Articles[]*Article `orm:\"rel(m2m)\"`\n}\n\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n    User[] *Users `orm:\"reverse(many)\"`\n}\n```\n\n这样创建完成后，会自动多出一张关系表 user_articles：\n\n| 字段       | 类型       |\n| ---------- | ---------- |\n| id         | bigint(20) |\n| user_id    | int(11)    |\n| article_id | int(11)    |\n\n","slug":"BeeGo快速使用指南","published":1,"updated":"2019-11-09T06:11:22.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2rc7cps000bto4u9z4874jy","content":"<h1 id=\"1-安装与使用\"><a href=\"#1-安装与使用\" class=\"headerlink\" title=\"1. 安装与使用\"></a>1. 安装与使用</h1><h2 id=\"1-1-安装Bee\"><a href=\"#1-1-安装Bee\" class=\"headerlink\" title=\"1.1 安装Bee\"></a>1.1 安装Bee</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-创建一个Bee项目\"><a href=\"#1-2-创建一个Bee项目\" class=\"headerlink\" title=\"1.2 创建一个Bee项目\"></a>1.2 创建一个Bee项目</h2><p>创建一个标准的 Bee 项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee new myproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 api 应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee api apiproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个标准的 Bee 项目的目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─conf</span><br><span class=\"line\">├─controllers</span><br><span class=\"line\">├─models</span><br><span class=\"line\">├─routers</span><br><span class=\"line\">├─static</span><br><span class=\"line\">│  ├─css</span><br><span class=\"line\">│  ├─img</span><br><span class=\"line\">│  └─js</span><br><span class=\"line\">├─tests</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-启动\"><a href=\"#1-3-启动\" class=\"headerlink\" title=\"1.3 启动\"></a>1.3 启动</h2><p>在本地以开发模式启动应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bee run</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Router\"><a href=\"#2-Router\" class=\"headerlink\" title=\"2. Router\"></a>2. Router</h1><h2 id=\"2-1-默认访问\"><a href=\"#2-1-默认访问\" class=\"headerlink\" title=\"2.1 默认访问\"></a>2.1 默认访问</h2><p>在 <code>mian.go</code> 中引入路由系统：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\"><span class=\"addition\">+   _ \"Bee-Study/quickstart/routers\"</span></span><br><span class=\"line\">\t\"github.com/astaxie/beego\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 Controller 层创建对应的 Controller 逻辑：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controllers/default.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Ctx.WriteString(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将路由文件创建于 routers 目录下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routers/router.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"Bee-Study/quickstart/controllers\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们访问 <code>localhost:prot/</code> 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 <code>MainController</code> 的 <code>Get()</code> 方法，输出 <code>hello</code>。</p>\n<h2 id=\"2-2-不同路由匹配不同方法\"><a href=\"#2-2-不同路由匹配不同方法\" class=\"headerlink\" title=\"2.2 不同路由匹配不同方法\"></a>2.2 不同路由匹配不同方法</h2><p>由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 <code>Get()</code> 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 <code>beego.Router</code> 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.go</span></span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/test\"</span>, &amp;controllers.MainController&#123;&#125;, <span class=\"string\">\"get:handleTest\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">handleTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Controller\"><a href=\"#3-Controller\" class=\"headerlink\" title=\"3. Controller\"></a>3. Controller</h1><h2 id=\"3-1-创建一个-Controller\"><a href=\"#3-1-创建一个-Controller\" class=\"headerlink\" title=\"3.1 创建一个 Controller\"></a>3.1 创建一个 Controller</h2><p>Controller 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 <code>main.go</code> 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。</p>\n<p>创建一个 Controller 我们要继承一个 <code>beego.Controller</code> 对象：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以复写其 <code>Get()</code> 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Website\"</span>] = <span class=\"string\">\"beego.me\"</span></span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Email\"</span>] = <span class=\"string\">\"astaxie@gmail.com\"</span></span><br><span class=\"line\">\tc.TplName = <span class=\"string\">\"index.tpl\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Controller-对象\"><a href=\"#3-2-Controller-对象\" class=\"headerlink\" title=\"3.2 Controller 对象\"></a>3.2 Controller 对象</h2><p>一个 <code>beeg.Controller</code> 类型的实例上挂载了如下的常用属性：</p>\n<ul>\n<li><p><strong>Data：</strong> 向 Template 中传入的数据</p>\n</li>\n<li><p><strong>TplName：</strong>  vies 文件目录下的模板名称</p>\n</li>\n<li><p><strong>Ctx：</strong> 上下文对象</p>\n<ul>\n<li><strong>Ctx.WriteString(content)：</strong> 返回内容</li>\n</ul>\n</li>\n<li><p><strong>Redirect(url, code)：</strong> 重定向 </p>\n<blockquote>\n<p>c.Redirect(“/register”, 302)</p>\n</blockquote>\n</li>\n<li><p><strong>GetString(key)：</strong> 获取 post 数据</p>\n<blockquote>\n<p>name := c.GetString(“userName”)</p>\n</blockquote>\n</li>\n<li><p><strong>GetFile(key)：</strong>获取文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, h, err := c.GetFile(“uploadname”)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err !- <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    c.SaveToFile(<span class=\"string\">\"uploadname\"</span>, <span class=\"string\">\"./static/img\"</span> + h.Filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"4-ORM\"><a href=\"#4-ORM\" class=\"headerlink\" title=\"4. ORM\"></a>4. ORM</h1><h2 id=\"4-1-创建一个Model\"><a href=\"#4-1-创建一个Model\" class=\"headerlink\" title=\"4.1 创建一个Model\"></a>4.1 创建一个Model</h2><p>Bee 自带一个ORM框架，如果未下载需要手动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要连接 Mysql 数据库，则需要另外安装驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>之后我们在 <code>/models/model.go</code> 文件中需要引入 orm 与 mysql 驱动：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego/orm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>之后定义一个数据库模型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPwd  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接数据库 参数：别名、数据库类型、连接uri</span></span><br><span class=\"line\">\t_ = orm.RegisterDataBase(<span class=\"string\">\"default\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"root:root@tcp(localhost:3306)/beego_study?charset=utf8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 注册 Model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(User))</span><br><span class=\"line\">\t<span class=\"comment\">// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程</span></span><br><span class=\"line\">\t_ = orm.RunSyncdb(<span class=\"string\">\"default\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后不要忘记在 <code>mian.go</code> 中加载 models：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mian.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">\"Bee-Study/quickstart/models\"</span></span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ORM-的基本操作\"><a href=\"#4-2-ORM-的基本操作\" class=\"headerlink\" title=\"4.2 ORM 的基本操作\"></a>4.2 ORM 的基本操作</h2><p>示例中的 <code>User</code> 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 <code>model.go</code> 文件中的 <code>User</code> 对象，其引入方式为 <code>models.User</code>。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。</p>\n<blockquote>\n<p>对数据库的操作都是在 Controller 层完成的。</p>\n</blockquote>\n<h3 id=\"4-2-1-插入\"><a href=\"#4-2-1-插入\" class=\"headerlink\" title=\"4.2.1 插入\"></a>4.2.1 插入</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">user.Name = <span class=\"string\">\"slene\"</span></span><br><span class=\"line\">user.Pwd= <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">id, err := o.Insert(&amp;user)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fmt.Println(id)</span></span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"插入失败\"</span>,err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2-查询\"><a href=\"#4-2-2-查询\" class=\"headerlink\" title=\"4.2.2 查询\"></a>4.2.2 查询</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;&#125;</span><br><span class=\"line\">err := o.Read(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定字段查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user := User&#123;Name: <span class=\"string\">\"slene\"</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者：user.name = \"slene\"</span></span><br><span class=\"line\">err = o.Read(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"comment\">// 获取 QuerySeter 对象，user 为表名</span></span><br><span class=\"line\">qs := o.QueryTable(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接使用对象作为表名</span></span><br><span class=\"line\">user := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">qs = o.QueryTable(user) <span class=\"comment\">// 返回 QuerySeter</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>qs.Filter：用来过滤查询结果，起到 <strong>包含条件</strong> 的作用</p>\n</li>\n<li><p>qs.Exclude：用来过滤查询结果，起到 <strong>排除条件</strong> 的作用</p>\n</li>\n<li><p>qs.All：返回对应的结果集对象</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users []*User</span><br><span class=\"line\">num, err := o.QueryTable(<span class=\"string\">\"user\"</span>).Filter(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"slene\"</span>).All(&amp;users)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"Returned Rows Num: %s, %s\"</span>, num, err)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多用法查看 <a href=\"https://beego.me/docs/mvc/model/query.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"4-2-3-更新\"><a href=\"#4-2-3-更新\" class=\"headerlink\" title=\"4.2.3 更新\"></a>4.2.3 更新</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> o.Read(&amp;user) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    user.Name = <span class=\"string\">\"MyName\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num, err := o.Update(&amp;user); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定更新的字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只更新 Name</span></span><br><span class=\"line\">o.Update(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 指定多个字段</span></span><br><span class=\"line\"><span class=\"comment\">// o.Update(&amp;user, \"Field1\", \"Field2\", ...)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-4-删除\"><a href=\"#4-2-4-删除\" class=\"headerlink\" title=\"4.2.4 删除\"></a>4.2.4 删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">if</span> num, err := o.Delete(&amp;User&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-模型创建详解\"><a href=\"#4-3-模型创建详解\" class=\"headerlink\" title=\"4.3 模型创建详解\"></a>4.3 模型创建详解</h2><p>我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。</p>\n<h3 id=\"4-3-1-字段的命名规范\"><a href=\"#4-3-1-字段的命名规范\" class=\"headerlink\" title=\"4.3.1 字段的命名规范\"></a>4.3.1 字段的命名规范</h3><p>首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：</p>\n<ul>\n<li>创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。</li>\n<li><code>RunSyncdb()</code> 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。</li>\n</ul>\n<p>如结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">    BirthDay time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的表为：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>age</td>\n<td>int32</td>\n</tr>\n<tr>\n<td>birth_day</td>\n<td>time</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-2-字段的属性设置\"><a href=\"#4-3-2-字段的属性设置\" class=\"headerlink\" title=\"4.3.2 字段的属性设置\"></a>4.3.2 字段的属性设置</h3><p>在设置了字段类型后，可以在后面通过 <code>orm:</code>  来追字段的属性。</p>\n<p>设置主键：<code>pk</code></p>\n<p>设置自增：<code>auto</code></p>\n<p>如设置一个自增的主键：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id <span class=\"keyword\">int</span> <span class=\"string\">`orm: \"pk;auto\"`</span></span><br></pre></td></tr></table></figure>\n\n<p>当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。</p>\n<p>设置默认值 <code>orm:&quot;default(11)&quot;</code></p>\n<p>设置长度 <code>orm:&quot;size(100)&quot;</code></p>\n<p>设置允许为空 <code>orm:&quot;null&quot;</code>，数据库默认是非空，设置 <code>null</code> 之后就可以变为<code>ALLOW NULL</code></p>\n<p>设置唯一： <code>orm:”unique”</code></p>\n<p>设置浮点数精度 <code>orm:&quot;digits(12);decimals(4)&quot;</code>  总共12位，四位是小数位</p>\n<p>设置时间： <code>orm:&quot;auto_now_add;type(datetime)&quot;</code></p>\n<p><strong>auto_now 每次 model 保存时都会对时间自动更新</strong></p>\n<p><strong>auto_now_add 第一次保存时才设置时间</strong></p>\n<p>设置时间的格式：type</p>\n<h3 id=\"4-3-3-一对多关系的创建\"><a href=\"#4-3-3-一对多关系的创建\" class=\"headerlink\" title=\"4.3.3 一对多关系的创建\"></a>4.3.3 一对多关系的创建</h3><p>如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ArticleType <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    TypeName <span class=\"keyword\">string</span></span><br><span class=\"line\">    Articles[] *Articles <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当查询时，我们需要使用 <code>RelatedSel()</code> 指定连接的表，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> articles[]models.Article</span><br><span class=\"line\">o.QueryTable(<span class=\"string\">\"Article\"</span>).RelatedSel(<span class=\"string\">\"ArticleType\"</span>).Filter(<span class=\"string\">\"Article__TypeName\"</span>, <span class=\"string\">\"文章类型\"</span>).All(&amp;articles)</span><br></pre></td></tr></table></figure>\n\n<p>当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName := ”文章类型“</span><br><span class=\"line\"><span class=\"keyword\">var</span> artiType model.ArticleType</span><br><span class=\"line\">artiType.TypeName = typeName</span><br><span class=\"line\">err = o.Read(&amp;artiType, <span class=\"string\">\"TypeName\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"类型不存在\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.ArticleType = &amp;artiType</span><br><span class=\"line\">article.Content = <span class=\"string\">\"... ...\"</span></span><br><span class=\"line\"><span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">_,err = o.Insert(&amp;article)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-3-多对多关系的创建\"><a href=\"#4-3-3-多对多关系的创建\" class=\"headerlink\" title=\"4.3.3 多对多关系的创建\"></a>4.3.3 多对多关系的创建</h3><p>同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Articles[]*Article <span class=\"string\">`orm:\"rel(m2m)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">    User[] *Users <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样创建完成后，会自动多出一张关系表 user_articles：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>bigint(20)</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>article_id</td>\n<td>int(11)</td>\n</tr>\n</tbody></table>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-安装与使用\"><a href=\"#1-安装与使用\" class=\"headerlink\" title=\"1. 安装与使用\"></a>1. 安装与使用</h1><h2 id=\"1-1-安装Bee\"><a href=\"#1-1-安装Bee\" class=\"headerlink\" title=\"1.1 安装Bee\"></a>1.1 安装Bee</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-创建一个Bee项目\"><a href=\"#1-2-创建一个Bee项目\" class=\"headerlink\" title=\"1.2 创建一个Bee项目\"></a>1.2 创建一个Bee项目</h2><p>创建一个标准的 Bee 项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee new myproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 api 应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee api apiproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个标准的 Bee 项目的目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─conf</span><br><span class=\"line\">├─controllers</span><br><span class=\"line\">├─models</span><br><span class=\"line\">├─routers</span><br><span class=\"line\">├─static</span><br><span class=\"line\">│  ├─css</span><br><span class=\"line\">│  ├─img</span><br><span class=\"line\">│  └─js</span><br><span class=\"line\">├─tests</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-启动\"><a href=\"#1-3-启动\" class=\"headerlink\" title=\"1.3 启动\"></a>1.3 启动</h2><p>在本地以开发模式启动应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bee run</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Router\"><a href=\"#2-Router\" class=\"headerlink\" title=\"2. Router\"></a>2. Router</h1><h2 id=\"2-1-默认访问\"><a href=\"#2-1-默认访问\" class=\"headerlink\" title=\"2.1 默认访问\"></a>2.1 默认访问</h2><p>在 <code>mian.go</code> 中引入路由系统：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\"><span class=\"addition\">+   _ \"Bee-Study/quickstart/routers\"</span></span><br><span class=\"line\">\t\"github.com/astaxie/beego\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 Controller 层创建对应的 Controller 逻辑：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controllers/default.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Ctx.WriteString(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将路由文件创建于 routers 目录下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routers/router.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"Bee-Study/quickstart/controllers\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们访问 <code>localhost:prot/</code> 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 <code>MainController</code> 的 <code>Get()</code> 方法，输出 <code>hello</code>。</p>\n<h2 id=\"2-2-不同路由匹配不同方法\"><a href=\"#2-2-不同路由匹配不同方法\" class=\"headerlink\" title=\"2.2 不同路由匹配不同方法\"></a>2.2 不同路由匹配不同方法</h2><p>由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 <code>Get()</code> 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 <code>beego.Router</code> 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.go</span></span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/test\"</span>, &amp;controllers.MainController&#123;&#125;, <span class=\"string\">\"get:handleTest\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">handleTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Controller\"><a href=\"#3-Controller\" class=\"headerlink\" title=\"3. Controller\"></a>3. Controller</h1><h2 id=\"3-1-创建一个-Controller\"><a href=\"#3-1-创建一个-Controller\" class=\"headerlink\" title=\"3.1 创建一个 Controller\"></a>3.1 创建一个 Controller</h2><p>Controller 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 <code>main.go</code> 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。</p>\n<p>创建一个 Controller 我们要继承一个 <code>beego.Controller</code> 对象：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以复写其 <code>Get()</code> 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Website\"</span>] = <span class=\"string\">\"beego.me\"</span></span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Email\"</span>] = <span class=\"string\">\"astaxie@gmail.com\"</span></span><br><span class=\"line\">\tc.TplName = <span class=\"string\">\"index.tpl\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Controller-对象\"><a href=\"#3-2-Controller-对象\" class=\"headerlink\" title=\"3.2 Controller 对象\"></a>3.2 Controller 对象</h2><p>一个 <code>beeg.Controller</code> 类型的实例上挂载了如下的常用属性：</p>\n<ul>\n<li><p><strong>Data：</strong> 向 Template 中传入的数据</p>\n</li>\n<li><p><strong>TplName：</strong>  vies 文件目录下的模板名称</p>\n</li>\n<li><p><strong>Ctx：</strong> 上下文对象</p>\n<ul>\n<li><strong>Ctx.WriteString(content)：</strong> 返回内容</li>\n</ul>\n</li>\n<li><p><strong>Redirect(url, code)：</strong> 重定向 </p>\n<blockquote>\n<p>c.Redirect(“/register”, 302)</p>\n</blockquote>\n</li>\n<li><p><strong>GetString(key)：</strong> 获取 post 数据</p>\n<blockquote>\n<p>name := c.GetString(“userName”)</p>\n</blockquote>\n</li>\n<li><p><strong>GetFile(key)：</strong>获取文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, h, err := c.GetFile(“uploadname”)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err !- <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    c.SaveToFile(<span class=\"string\">\"uploadname\"</span>, <span class=\"string\">\"./static/img\"</span> + h.Filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"4-ORM\"><a href=\"#4-ORM\" class=\"headerlink\" title=\"4. ORM\"></a>4. ORM</h1><h2 id=\"4-1-创建一个Model\"><a href=\"#4-1-创建一个Model\" class=\"headerlink\" title=\"4.1 创建一个Model\"></a>4.1 创建一个Model</h2><p>Bee 自带一个ORM框架，如果未下载需要手动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要连接 Mysql 数据库，则需要另外安装驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>之后我们在 <code>/models/model.go</code> 文件中需要引入 orm 与 mysql 驱动：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego/orm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>之后定义一个数据库模型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPwd  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接数据库 参数：别名、数据库类型、连接uri</span></span><br><span class=\"line\">\t_ = orm.RegisterDataBase(<span class=\"string\">\"default\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"root:root@tcp(localhost:3306)/beego_study?charset=utf8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 注册 Model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(User))</span><br><span class=\"line\">\t<span class=\"comment\">// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程</span></span><br><span class=\"line\">\t_ = orm.RunSyncdb(<span class=\"string\">\"default\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后不要忘记在 <code>mian.go</code> 中加载 models：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mian.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">\"Bee-Study/quickstart/models\"</span></span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ORM-的基本操作\"><a href=\"#4-2-ORM-的基本操作\" class=\"headerlink\" title=\"4.2 ORM 的基本操作\"></a>4.2 ORM 的基本操作</h2><p>示例中的 <code>User</code> 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 <code>model.go</code> 文件中的 <code>User</code> 对象，其引入方式为 <code>models.User</code>。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。</p>\n<blockquote>\n<p>对数据库的操作都是在 Controller 层完成的。</p>\n</blockquote>\n<h3 id=\"4-2-1-插入\"><a href=\"#4-2-1-插入\" class=\"headerlink\" title=\"4.2.1 插入\"></a>4.2.1 插入</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">user.Name = <span class=\"string\">\"slene\"</span></span><br><span class=\"line\">user.Pwd= <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">id, err := o.Insert(&amp;user)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fmt.Println(id)</span></span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"插入失败\"</span>,err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2-查询\"><a href=\"#4-2-2-查询\" class=\"headerlink\" title=\"4.2.2 查询\"></a>4.2.2 查询</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;&#125;</span><br><span class=\"line\">err := o.Read(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定字段查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user := User&#123;Name: <span class=\"string\">\"slene\"</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者：user.name = \"slene\"</span></span><br><span class=\"line\">err = o.Read(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"comment\">// 获取 QuerySeter 对象，user 为表名</span></span><br><span class=\"line\">qs := o.QueryTable(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接使用对象作为表名</span></span><br><span class=\"line\">user := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">qs = o.QueryTable(user) <span class=\"comment\">// 返回 QuerySeter</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>qs.Filter：用来过滤查询结果，起到 <strong>包含条件</strong> 的作用</p>\n</li>\n<li><p>qs.Exclude：用来过滤查询结果，起到 <strong>排除条件</strong> 的作用</p>\n</li>\n<li><p>qs.All：返回对应的结果集对象</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users []*User</span><br><span class=\"line\">num, err := o.QueryTable(<span class=\"string\">\"user\"</span>).Filter(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"slene\"</span>).All(&amp;users)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"Returned Rows Num: %s, %s\"</span>, num, err)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多用法查看 <a href=\"https://beego.me/docs/mvc/model/query.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"4-2-3-更新\"><a href=\"#4-2-3-更新\" class=\"headerlink\" title=\"4.2.3 更新\"></a>4.2.3 更新</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> o.Read(&amp;user) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    user.Name = <span class=\"string\">\"MyName\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num, err := o.Update(&amp;user); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定更新的字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只更新 Name</span></span><br><span class=\"line\">o.Update(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 指定多个字段</span></span><br><span class=\"line\"><span class=\"comment\">// o.Update(&amp;user, \"Field1\", \"Field2\", ...)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-4-删除\"><a href=\"#4-2-4-删除\" class=\"headerlink\" title=\"4.2.4 删除\"></a>4.2.4 删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">if</span> num, err := o.Delete(&amp;User&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-模型创建详解\"><a href=\"#4-3-模型创建详解\" class=\"headerlink\" title=\"4.3 模型创建详解\"></a>4.3 模型创建详解</h2><p>我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。</p>\n<h3 id=\"4-3-1-字段的命名规范\"><a href=\"#4-3-1-字段的命名规范\" class=\"headerlink\" title=\"4.3.1 字段的命名规范\"></a>4.3.1 字段的命名规范</h3><p>首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：</p>\n<ul>\n<li>创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。</li>\n<li><code>RunSyncdb()</code> 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。</li>\n</ul>\n<p>如结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">    BirthDay time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的表为：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>age</td>\n<td>int32</td>\n</tr>\n<tr>\n<td>birth_day</td>\n<td>time</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-2-字段的属性设置\"><a href=\"#4-3-2-字段的属性设置\" class=\"headerlink\" title=\"4.3.2 字段的属性设置\"></a>4.3.2 字段的属性设置</h3><p>在设置了字段类型后，可以在后面通过 <code>orm:</code>  来追字段的属性。</p>\n<p>设置主键：<code>pk</code></p>\n<p>设置自增：<code>auto</code></p>\n<p>如设置一个自增的主键：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id <span class=\"keyword\">int</span> <span class=\"string\">`orm: \"pk;auto\"`</span></span><br></pre></td></tr></table></figure>\n\n<p>当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。</p>\n<p>设置默认值 <code>orm:&quot;default(11)&quot;</code></p>\n<p>设置长度 <code>orm:&quot;size(100)&quot;</code></p>\n<p>设置允许为空 <code>orm:&quot;null&quot;</code>，数据库默认是非空，设置 <code>null</code> 之后就可以变为<code>ALLOW NULL</code></p>\n<p>设置唯一： <code>orm:”unique”</code></p>\n<p>设置浮点数精度 <code>orm:&quot;digits(12);decimals(4)&quot;</code>  总共12位，四位是小数位</p>\n<p>设置时间： <code>orm:&quot;auto_now_add;type(datetime)&quot;</code></p>\n<p><strong>auto_now 每次 model 保存时都会对时间自动更新</strong></p>\n<p><strong>auto_now_add 第一次保存时才设置时间</strong></p>\n<p>设置时间的格式：type</p>\n<h3 id=\"4-3-3-一对多关系的创建\"><a href=\"#4-3-3-一对多关系的创建\" class=\"headerlink\" title=\"4.3.3 一对多关系的创建\"></a>4.3.3 一对多关系的创建</h3><p>如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ArticleType <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    TypeName <span class=\"keyword\">string</span></span><br><span class=\"line\">    Articles[] *Articles <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当查询时，我们需要使用 <code>RelatedSel()</code> 指定连接的表，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> articles[]models.Article</span><br><span class=\"line\">o.QueryTable(<span class=\"string\">\"Article\"</span>).RelatedSel(<span class=\"string\">\"ArticleType\"</span>).Filter(<span class=\"string\">\"Article__TypeName\"</span>, <span class=\"string\">\"文章类型\"</span>).All(&amp;articles)</span><br></pre></td></tr></table></figure>\n\n<p>当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName := ”文章类型“</span><br><span class=\"line\"><span class=\"keyword\">var</span> artiType model.ArticleType</span><br><span class=\"line\">artiType.TypeName = typeName</span><br><span class=\"line\">err = o.Read(&amp;artiType, <span class=\"string\">\"TypeName\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"类型不存在\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.ArticleType = &amp;artiType</span><br><span class=\"line\">article.Content = <span class=\"string\">\"... ...\"</span></span><br><span class=\"line\"><span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">_,err = o.Insert(&amp;article)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-3-多对多关系的创建\"><a href=\"#4-3-3-多对多关系的创建\" class=\"headerlink\" title=\"4.3.3 多对多关系的创建\"></a>4.3.3 多对多关系的创建</h3><p>同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Articles[]*Article <span class=\"string\">`orm:\"rel(m2m)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">    User[] *Users <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样创建完成后，会自动多出一张关系表 user_articles：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>bigint(20)</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>article_id</td>\n<td>int(11)</td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2rc7cp40000to4u1kpk8e24","category_id":"ck2rc7cpe0003to4u0mjtdpk2","_id":"ck2rc7cpi0006to4uf4q49h2h"},{"post_id":"ck2rc7cps000bto4u9z4874jy","category_id":"ck2rc7cpu000cto4ual4xavht","_id":"ck2rc7cpv000fto4u8aogfv2m"}],"PostTag":[{"post_id":"ck2rc7cp40000to4u1kpk8e24","tag_id":"ck2rc7cpg0004to4u5oaad3ok","_id":"ck2rc7cpj0008to4u2zd03a2w"},{"post_id":"ck2rc7cp40000to4u1kpk8e24","tag_id":"ck2rc7cph0005to4uhg0f92g5","_id":"ck2rc7cpj0009to4ufyye9cbr"},{"post_id":"ck2rc7cp40000to4u1kpk8e24","tag_id":"ck2rc7cpi0007to4ue66fhnoe","_id":"ck2rc7cpj000ato4u1ique7py"},{"post_id":"ck2rc7cps000bto4u9z4874jy","tag_id":"ck2rc7cpu000dto4uhsure7nh","_id":"ck2rc7cpv000gto4u8szcfrc7"},{"post_id":"ck2rc7cps000bto4u9z4874jy","tag_id":"ck2rc7cpv000eto4u4e3d1bzw","_id":"ck2rc7cpw000hto4u957ugv57"}],"Tag":[{"name":"svn","_id":"ck2rc7cpg0004to4u5oaad3ok"},{"name":"运维","_id":"ck2rc7cph0005to4uhg0f92g5"},{"name":"版本控制","_id":"ck2rc7cpi0007to4ue66fhnoe"},{"name":"Go","_id":"ck2rc7cpu000dto4uhsure7nh"},{"name":"BeeGo","_id":"ck2rc7cpv000eto4u4e3d1bzw"}]}}