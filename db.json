{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/img/cuadros.png","path":"img/cuadros.png","modified":1,"renderable":1},{"_id":"themes/melody/source/img/shattered-island.gif","path":"img/shattered-island.gif","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3c1a7202ad0fe8f63be3ce4a1c34c517f1a6c93a","modified":1573231127750},{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1573265124386},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1573265124418},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1573265124387},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1573265124421},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1573265124422},{"_id":"themes/melody/_config.yml","hash":"eb1665adc195efe40de156b78a23a660aba72064","modified":1573265124424},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1573265124464},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1573265124517},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124466},{"_id":"source/_data/melody.yml","hash":"7c6783677a0cccd6ed344ff2d428a1c761a94c46","modified":1573291773320},{"_id":"source/categories/index.md","hash":"c7d0ea94c45d90ff8f6f40c5f9a2838dd3741164","modified":1573280010550},{"_id":"source/tags/index.md","hash":"3ceffcad015cfd8d79dad409284168895c6d9408","modified":1573279999514},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1573265124425},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1573265124425},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1573265124426},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1573265124427},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1573265124428},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1573265124429},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1573265124460},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1573265124461},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1573265124462},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1573265124462},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1573265124463},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1573265124465},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1573265124466},{"_id":"themes/melody/source/melody-favicon.ico","hash":"4559b67f8ee3699131e5ecf6f4945f53eab05774","modified":1573269250063},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124492},{"_id":"source/_posts/2019/2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比.md","hash":"691efb683311f0847dc981c32d484e23d51aef49","modified":1573311303429},{"_id":"source/_posts/2019/360面试总结.md","hash":"a47c7b4d16d169efc73c0475eb0265953563bcf2","modified":1573308872136},{"_id":"source/_posts/2019/BeeGo快速使用指南.md","hash":"81c4b2e74dc547cc454e061e744e38e043ebc3fc","modified":1573307919026},{"_id":"source/_posts/2019/Canvas快速入门教程.md","hash":"fcd15992ea8522b4d2b28e8717a9428a94672361","modified":1573307839535},{"_id":"source/_posts/2019/Chrome配置SwitchyOmega指南.md","hash":"c32145482e1fb58df75f202e211e3226330e0a31","modified":1573308565508},{"_id":"source/_posts/2019/Gulp快速使用指南.md","hash":"4c35eb8d5521f6df572bc9008a7b7d85971f5294","modified":1573307956530},{"_id":"source/_posts/2019/Javascript中的函数节流与函数防抖.md","hash":"da8a977ac094c5119e1f65740685776b1f35c820","modified":1573308027996},{"_id":"source/_posts/2019/MongoDB快速入门指南.md","hash":"2a84d622522c96dbbb3ed8336dcae9daa562a7e3","modified":1573308822759},{"_id":"source/_posts/2019/React中修改父组件传入的props.md","hash":"6211bf4e2c8fb62a46b82c9b6c29df9707099c4c","modified":1573307976153},{"_id":"source/_posts/2019/React学习笔记01：React基础.md","hash":"e87e6ba0ff232b1bfa3d935558135d018c85762b","modified":1573307616444},{"_id":"source/_posts/2019/React学习笔记02：React高级内容.md","hash":"955e107f956514e205a6d329771a63324a0266c2","modified":1573307620551},{"_id":"source/_posts/2019/React学习笔记03：Redux入门.md","hash":"e5a76bd9853e5a5b01d0fc310c393e608852e87b","modified":1573307675260},{"_id":"source/_posts/2019/React学习笔记04：Redux实战.md","hash":"d1b15df84be9fe839a300bb02a31efea17c5b5f3","modified":1573307720232},{"_id":"source/_posts/2019/React学习笔记05：项目实战（一）.md","hash":"552c94ca0001da09ee096e8c2b76907c9ac213f3","modified":1573308613577},{"_id":"source/_posts/2019/React学习笔记06：项目实战（二）.md","hash":"a6fe1f1d3a58c82633abaea38ea83e0c56564cb6","modified":1573308680049},{"_id":"source/_posts/2019/SVN快速使用指南.md","hash":"24da51942b012bc9f8a886a1721fa777b9a5d6de","modified":1573306855096},{"_id":"source/_posts/2019/Vue中的MVVM实现原理简析.md","hash":"2cfad801b90d03e799c22579e5967bd4cf9c5ec8","modified":1573311255396},{"_id":"source/_posts/2019/Vue中销毁keep-alive缓存组件及缓存组件的管理.md","hash":"ded214a7ba6d8c377c90013eec3fbbb454b4800d","modified":1573309470545},{"_id":"source/_posts/2019/Vue使用中的各种小技巧.md","hash":"6d6900572a416581b607dba742d07909ca14e3c6","modified":1573309520415},{"_id":"source/_posts/2019/Webpack快速配置参考.md","hash":"4e139a2294244e59bd5db3a4e85ed82431ca348c","modified":1573308287652},{"_id":"source/_posts/2019/一段代码两张图，帮你理解JS中的原型链继承.md","hash":"ea3471bac51f4f5581cc7fde9e47dbc29ff076e7","modified":1573309739203},{"_id":"source/_posts/2019/使用ElementUISelect组件的value-key属性，让绑定值可以为一个对象.md","hash":"ff23c9b5dcc49024f83c82d99de628918476e3e5","modified":1573309849582},{"_id":"source/_posts/2019/使用Flask-Sqlachemy操作数据库对象.md","hash":"36af76824b5a1fbcb6545af2702134e46109b5e7","modified":1573306683737},{"_id":"source/_posts/2019/关于BFC的特性以及如何利用BFC解决margin相关的问题.md","hash":"c5038b11702982cfc32ccd41ff47977c1971ded5","modified":1573308472318},{"_id":"source/_posts/2019/使用alipay-sdk-nodejs让node应用接入支付宝付款.md","hash":"3c27e3933dcf76dced441c73ef6bfa5d1984902b","modified":1573309298462},{"_id":"source/_posts/2019/关于import、export语句的种种引入方式、导出方式的区别.md","hash":"6e58b71cd28d622e12faedb51b04cb08f99cb1cb","modified":1573307998328},{"_id":"source/_posts/2019/关于构造函数和原型链运行机制的试题与知识点.md","hash":"c960fe9ca8696f2f346631116542bf840191f5d8","modified":1573308018028},{"_id":"source/_posts/2019/基于Canvas的FlappyBird小游戏开发总结.md","hash":"81b41295219285feba14af6d82a0a1335113416b","modified":1573308633556},{"_id":"source/_posts/2019/实现vuex与组件data之间的数据同步更新.md","hash":"4772470e8526b3bcf2ced1027c5eed4b7ae64f80","modified":1573308418176},{"_id":"source/_posts/2019/对Vue2-2中监听子组件事件的理解.md","hash":"225bc2960324ccdae89ac46ef04b47107dae014d","modified":1573307201767},{"_id":"source/_posts/2019/腾讯面试总结.md","hash":"835dc6e5cae25d2a72b0628ac1737cc28c2ef394","modified":1573308973447},{"_id":"source/_posts/2019/观察者模式与发布订阅模式的对比.md","hash":"4826cfb23c82a909d4ac92171ab0f61aea538929","modified":1573308203084},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1573265124430},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1573265124437},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1573265124439},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1573265124442},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1573265124443},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1573265124444},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1573265124446},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1573265124447},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1573265124448},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"0c95b391044c64504a459fcd1ca19d6e6d2f2a6c","modified":1573284876431},{"_id":"themes/melody/source/css/index.styl","hash":"b28d99c493bc61a777fb6245a87f589bc9a2a604","modified":1573281722703},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1573265124486},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1573265124487},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1573265124488},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1573265124489},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1573265124490},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1573265124491},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1573265124491},{"_id":"themes/melody/source/js/scroll.js","hash":"58dff7699bbf6f39bea793d23b061f732bd33af6","modified":1573287573199},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1573265124496},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1573265124515},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1573265124516},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573265124441},{"_id":"themes/melody/source/img/cuadros.png","hash":"d53a59657b0b09755aa27b069df8492ef748a36e","modified":1573285168780},{"_id":"themes/melody/source/img/shattered-island.gif","hash":"3721e8c797b1fa1d37df09fe213573048cfe90b8","modified":1573285309643},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1573265124432},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1573265124433},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1573265124433},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1573265124434},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1573265124435},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1573265124436},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1573265124438},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1573265124441},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1573265124445},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1573265124446},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1573265124449},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1573265124450},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1573265124451},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1573265124452},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1573265124453},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1573265124454},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1573265124456},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1573265124457},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1573265124458},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1573265124459},{"_id":"themes/melody/source/css/_global/index.styl","hash":"5753cee9f2ad8f1bbfbb60fcaa710c687347a31d","modified":1573281761916},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1573265124470},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1573265124471},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1573265124474},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1573265124472},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1573265124475},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1573265124475},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1573265124476},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1573265124477},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1573265124478},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"92101a4a0b715a6d5285372e9667bc59442aea0e","modified":1573289033715},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1573265124480},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1573265124481},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1573265124482},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1573265124484},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1573265124484},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1573265124494},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1573265124495},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1573265124498},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1573265124499},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1573265124513},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1573265124514},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1573265124500},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1573265124502},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1573265124507},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1573265124509},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1573265124509},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1573265124510},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1573265124511},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1573265124512},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1573265124506},{"_id":"public/search.xml","hash":"9b71b99dfd156547cf77d7bf11d24d028bfc406d","modified":1573311316372},{"_id":"public/categories/index.html","hash":"8faf32e5931c6468bc75c50a12df6f41728e3b1f","modified":1573311316372},{"_id":"public/tags/index.html","hash":"ebb8270b675ecf656d763c33adb75d4b19201a43","modified":1573311316372},{"_id":"public/2019/11/使用ElementUISelect组件的value-key属性，让绑定值可以为一个对象/index.html","hash":"e987bc84811546838dcd6ba77a2369683e570b13","modified":1573311316372},{"_id":"public/2019/10/一段代码两张图，帮你理解JS中的原型链继承/index.html","hash":"5b141f88f9a43684c025fd8219ebfaab1f1cfd12","modified":1573311316372},{"_id":"public/2019/10/Vue中销毁keep-alive缓存组件及缓存组件的管理/index.html","hash":"7fc12452ffec18fb6c80f9e64e82ecf8873cfc39","modified":1573311316372},{"_id":"public/2019/07/React中修改父组件传入的props/index.html","hash":"f93657a75c9d837af449174a137640a2d451dc05","modified":1573311316372},{"_id":"public/2019/06/腾讯面试总结/index.html","hash":"0056635c8106709bb90f5173e34637134610351a","modified":1573311316372},{"_id":"public/2019/06/360面试总结/index.html","hash":"1ae35f8e63dea4340063b3a16f9e5184201f2052","modified":1573311316372},{"_id":"public/2019/04/Chrome配置SwitchyOmega指南/index.html","hash":"9ded03724d1d50bc9ea21d7688e2cfcc8dcc923c","modified":1573311316372},{"_id":"public/2019/02/对Vue2-2中监听子组件事件的理解/index.html","hash":"b1fd79cf46610c07f712eef647e4e8d048ff2d0d","modified":1573311316372},{"_id":"public/archives/index.html","hash":"c2df51301b15c9f5a1a368345adc78df6b727443","modified":1573311316372},{"_id":"public/archives/page/2/index.html","hash":"62b65f2f85abbe895daaf19793f8e303530c2bf8","modified":1573311316372},{"_id":"public/archives/page/4/index.html","hash":"74fd0df3dd73743ee008362e9c9fa97fe66cf933","modified":1573311316372},{"_id":"public/archives/page/3/index.html","hash":"61fb3d9da36a851d7a2ab746d8d1746ac09a4026","modified":1573311316372},{"_id":"public/archives/2019/index.html","hash":"48e976b9f1d26a7d1a6c4f3a2aea0493dae20173","modified":1573311316372},{"_id":"public/archives/2019/page/2/index.html","hash":"deb19d20aaa7207fa05849b627197ca195a6dd95","modified":1573311316372},{"_id":"public/archives/2019/page/3/index.html","hash":"cf72d6f7c82c32a63306b806809bafac9aba39db","modified":1573311316372},{"_id":"public/archives/2019/page/4/index.html","hash":"15ac3858708b8a459232ad189dfee773877da650","modified":1573311316372},{"_id":"public/archives/2019/01/index.html","hash":"b197d4bfc3f47df24f667fcf6f948807368aac7e","modified":1573311316372},{"_id":"public/archives/2019/02/index.html","hash":"cb2f920075cf83f256e47c5fdf67735064be63c9","modified":1573311316372},{"_id":"public/archives/2019/04/index.html","hash":"04c3ca320574125bfb69e1f5518e5797d226efc1","modified":1573311316372},{"_id":"public/archives/2019/05/index.html","hash":"1c1f978eb6c8f20f7e612257d9b1952899898805","modified":1573311316372},{"_id":"public/archives/2019/05/page/2/index.html","hash":"3b71834a79c24197c380d8820ce06dea89988002","modified":1573311316372},{"_id":"public/archives/2019/06/index.html","hash":"5c79c5f208cad68006af9394aa16922dbb298c67","modified":1573311316372},{"_id":"public/archives/2019/07/index.html","hash":"8f87073f9420bbbd4ab3749b9a8f339a36417699","modified":1573311316372},{"_id":"public/archives/2019/08/index.html","hash":"f3da22c2613b16770702e9497371fbba8393ee62","modified":1573311316372},{"_id":"public/archives/2019/09/index.html","hash":"2b90aad154816bd443e89b3c2133e80faeb07720","modified":1573311316372},{"_id":"public/archives/2019/10/index.html","hash":"101c30358cd03c330872016abcd00a7104a779e3","modified":1573311316372},{"_id":"public/archives/2019/11/index.html","hash":"fc7606e73ac95d80de9f0fe57e23ca52a8202b47","modified":1573311316372},{"_id":"public/categories/Life/index.html","hash":"3f27a71ac3702133f8993fd2698cfd742f8d7b66","modified":1573311316372},{"_id":"public/categories/Other/index.html","hash":"e3890c913a361e1c65aad090cee245c4c4b24b72","modified":1573311316372},{"_id":"public/categories/Front/index.html","hash":"93087115ed90372043023dfc1514e0e77a15776c","modified":1573311316372},{"_id":"public/categories/Front/page/2/index.html","hash":"f4ab85e0199bdff7b00e97d2f41dd25ff920eb6d","modified":1573311316372},{"_id":"public/categories/Front/page/3/index.html","hash":"1769cf05964bd858bdf90482dfb557feae0070b7","modified":1573311316372},{"_id":"public/categories/Git/index.html","hash":"18ec62dbef0891b0bfe143516cc589dd0c051fa6","modified":1573311316372},{"_id":"public/categories/Front/JS/index.html","hash":"7365b850c78accec63583de1d4fa5aff53045339","modified":1573311316372},{"_id":"public/categories/Front/构建工具/index.html","hash":"0e108711a6025334ca1fc584949fccba57f5e41f","modified":1573311316372},{"_id":"public/categories/Front/React/index.html","hash":"bb21ffa7228f18b600f0ae33335dd7ae04e21870","modified":1573311316372},{"_id":"public/categories/Front/Vue/index.html","hash":"d0cd13305f1c5439aa2f2aae4dacf1a632b74eb5","modified":1573311316372},{"_id":"public/categories/Back/index.html","hash":"2026085880fc1da2920db392737a42f057b48c39","modified":1573311316372},{"_id":"public/categories/Front/CSS/index.html","hash":"474ef896202ee631a699d7739fb09d8a4a2f508c","modified":1573311316372},{"_id":"public/categories/Front/ES6/index.html","hash":"f4cafd64fae9c66eea3ff9dd48bebd657a7f8689","modified":1573311316372},{"_id":"public/categories/Back/Python/index.html","hash":"eeef734c25223c24d09caef65176c8ecc2f666a2","modified":1573311316372},{"_id":"public/categories/Back/GoLang/index.html","hash":"9bdce36cab960e2045b7b98a7ffe2f59b6fd6f46","modified":1573311316372},{"_id":"public/categories/Front/HTML/index.html","hash":"471bc989944751845b593f7fea6e8203db5d923c","modified":1573311316372},{"_id":"public/categories/Front/Mongodb/index.html","hash":"66e1ee6fe7a466977e3aeabe9ef36037718917d5","modified":1573311316372},{"_id":"public/categories/Back/Node/index.html","hash":"e7789d57f139fcd4b7d2eb496076da94eae0c135","modified":1573311316372},{"_id":"public/tags/面试题/index.html","hash":"3849025225b0b0bdfe3acfaa4e0a52c8a94562fd","modified":1573311316372},{"_id":"public/tags/Chrome/index.html","hash":"df495cf810f9e108c2331f4d65e065413b946368","modified":1573311316372},{"_id":"public/tags/JS/index.html","hash":"4f102fbc1be892d26c92e73a9f4cd60b2867cd18","modified":1573311316372},{"_id":"public/tags/React/index.html","hash":"3a44b3cf404621de4d4dd19c7e67165038f605d9","modified":1573311316372},{"_id":"public/tags/React基础教程/index.html","hash":"d45d2848a8cfcc78b352a8c59127952339dd4530","modified":1573311316372},{"_id":"public/tags/Redux/index.html","hash":"25362a4c398be466d3e4489e116a53c2ea6740e3","modified":1573311316372},{"_id":"public/tags/Vue/index.html","hash":"270762634202f30802ef414eddf81689f8af1937","modified":1573311316372},{"_id":"public/tags/SVN/index.html","hash":"83aff15bd28bdfef0b31693e02d976858dee4cf1","modified":1573311316372},{"_id":"public/tags/快速使用/index.html","hash":"70a8397a2e3703935cb0d7670ae0e21888ecf22a","modified":1573311316372},{"_id":"public/tags/Webpack/index.html","hash":"59a1119fb0ecd70bfaf9f47228affdd9cf73c234","modified":1573311316372},{"_id":"public/tags/ElementUI/index.html","hash":"a971078a06621927538be8fb781bd900214927fa","modified":1573311316372},{"_id":"public/tags/Python/index.html","hash":"269a5943feadaef16ee11465934787f2bc20550d","modified":1573311316372},{"_id":"public/tags/ORM/index.html","hash":"df548c206429c55352ea8698027c5689bcf111bb","modified":1573311316372},{"_id":"public/tags/CSS/index.html","hash":"d9692502cd4fac324ba97aa9306c3697c7c81f74","modified":1573311316372},{"_id":"public/tags/BFC/index.html","hash":"812cb258b6a2e1ca5d7d732bc5d36d4de7af7770","modified":1573311316372},{"_id":"public/tags/ES6/index.html","hash":"53029543b9442a0fa8b200dd30aa1b0d0be5f738","modified":1573311316372},{"_id":"public/tags/设计模式/index.html","hash":"671b060a5fdb351938d367157931c2f1ad70af49","modified":1573311316372},{"_id":"public/tags/HTML5/index.html","hash":"2b99316cbe71c9c41b9230d4398aaa4fb01f68a7","modified":1573311316372},{"_id":"public/tags/BeeGo/index.html","hash":"2685bc2a38ce5d26a55d6d18aa4ebf3b4d2a80af","modified":1573311316372},{"_id":"public/tags/Gulp/index.html","hash":"20fc2460150dee332a6c6677f356e7c2238836eb","modified":1573311316372},{"_id":"public/tags/Mongodb/index.html","hash":"3e1b9300cc44410d5e31d72665866db9fe7a4068","modified":1573311316372},{"_id":"public/tags/项目实战/index.html","hash":"010249f105eb10044173449ffa19a956ab1dcb9c","modified":1573311316372},{"_id":"public/tags/Node/index.html","hash":"d2560e4c96d93f427224629852ba56901e02adda","modified":1573311316372},{"_id":"public/tags/支付宝/index.html","hash":"4b6d521c38e9bc18c649fb8c6e3714c99223e5b8","modified":1573311316372},{"_id":"public/tags/Canvas/index.html","hash":"2a80f0b55b697268aad5f796f845a50409bdb124","modified":1573311316372},{"_id":"public/tags/Gin/index.html","hash":"2acd85294e419151dffdf43cb456c82111e1b41c","modified":1573311316372},{"_id":"public/tags/Beego/index.html","hash":"bff198ea34248a4e6d4671f8b2799fd14c3da485","modified":1573311316372},{"_id":"public/tags/Iris/index.html","hash":"0c5c89cb09b7846ffa81f1b0e6a7abdff7e9ea46","modified":1573311316372},{"_id":"public/tags/研究报告/index.html","hash":"b875f3dbe783b2e7d3ac3e7cab3e746c9e8dc088","modified":1573311316372},{"_id":"public/tags/源码解析/index.html","hash":"561dbff7448247c6077f8547b0c06cc807b14e8e","modified":1573311316372},{"_id":"public/page/4/index.html","hash":"4405de33cf827d929beb84e438d621b6130f9f60","modified":1573311316372},{"_id":"public/2019/10/Vue使用中的各种小技巧/index.html","hash":"144d6ef9ea1cc37f0ec17905c20e9fae45e7cfe6","modified":1573311316372},{"_id":"public/2019/10/使用alipay-sdk-nodejs让node应用接入支付宝付款/index.html","hash":"ea2c4a9bb7d00f9c09d5f833bb66ea462563e55a","modified":1573311316372},{"_id":"public/2019/10/2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比/index.html","hash":"c4a38e4519b5192673a9aa42dc82067d32a0779e","modified":1573311316372},{"_id":"public/2019/09/BeeGo快速使用指南/index.html","hash":"3421c011db38779cbbb2bd84296da187fa1bcdce","modified":1573311316372},{"_id":"public/2019/08/SVN快速使用指南/index.html","hash":"2ffc2c8387cf69b446ad29949acad651b48403ae","modified":1573311316372},{"_id":"public/2019/07/Gulp快速使用指南/index.html","hash":"391e679a03008d45caea81acd9be461e162f6764","modified":1573311316372},{"_id":"public/2019/07/使用Flask-Sqlachemy操作数据库对象/index.html","hash":"99df510b177d9d6d9f89f582760fda0da115941a","modified":1573311316372},{"_id":"public/2019/07/关于import、export语句的种种引入方式、导出方式的区别/index.html","hash":"6ae6c006a115cbae4aa32fc3d0636eb1656a749a","modified":1573311316372},{"_id":"public/2019/06/MongoDB快速入门指南/index.html","hash":"cbc3184fd4be5238d3c327d8182e54e6bc6a93df","modified":1573311316372},{"_id":"public/2019/05/Vue中的MVVM实现原理简析/index.html","hash":"0673fdc3f4a28a65cc44754aa56a4aaf54833fed","modified":1573311316372},{"_id":"public/2019/05/React学习笔记06：项目实战（二）/index.html","hash":"e5cbbb4aa802d5d1b4484bcf04444e59306283f3","modified":1573311316372},{"_id":"public/2019/05/React学习笔记05：项目实战（一）/index.html","hash":"4aaffa0c9410da2739abee0681a4ac14158e99cc","modified":1573311316372},{"_id":"public/2019/05/关于BFC的特性以及如何利用BFC解决margin相关的问题/index.html","hash":"ed673ef39a90f7f8705c69e343213df5ed73c4c2","modified":1573311316372},{"_id":"public/2019/05/实现vuex与组件data之间的数据同步更新/index.html","hash":"268422cc58e9367fccf4e3d65310078f703c2622","modified":1573311316372},{"_id":"public/2019/05/基于Canvas的FlappyBird小游戏开发总结/index.html","hash":"531a9a6cfb8bfd5da748aa3e114e68cd05eabc16","modified":1573311316372},{"_id":"public/2019/05/Webpack快速配置参考/index.html","hash":"0e06aed8cd67794f37a98aea134fab44a7c0825e","modified":1573311316372},{"_id":"public/2019/05/关于构造函数和原型链运行机制的试题与知识点/index.html","hash":"3a35bf972a2f9d5cad44cda088fe91fcde74e440","modified":1573311316372},{"_id":"public/2019/05/Canvas快速入门教程/index.html","hash":"c34a4e947da042add2f8b33513f7ec2ae53bce90","modified":1573311316372},{"_id":"public/2019/05/React学习笔记04：Redux实战/index.html","hash":"59abeff194e60eaf271b9b16da37c128a0669175","modified":1573311316372},{"_id":"public/2019/05/React学习笔记03：Redux入门/index.html","hash":"f5624503b40008fe46750b6ffcbe8df1e6723cc8","modified":1573311316372},{"_id":"public/2019/04/React学习笔记02：React高级内容/index.html","hash":"846f778ef23c9bf14164b4c445f3744accc00115","modified":1573311316372},{"_id":"public/2019/04/React学习笔记01：React基础/index.html","hash":"9d002141592c289bb5b7ed6997003feb0c9cc47a","modified":1573311316372},{"_id":"public/2019/04/Javascript中的函数节流与函数防抖/index.html","hash":"8ef8b79dc77ff71719f50f86d3f8e6bff97c683b","modified":1573311316372},{"_id":"public/2019/01/观察者模式与发布订阅模式的对比/index.html","hash":"1f34f5ba75a77586c2dc47e3865a5488ea759680","modified":1573311316372},{"_id":"public/index.html","hash":"e982a4f6512c13a09676c216cb5a0bacca4ce87b","modified":1573311316372},{"_id":"public/page/2/index.html","hash":"6bcae0a733b8f4df12c0935a31351de3caba7109","modified":1573311316372},{"_id":"public/page/3/index.html","hash":"1208816843cbce5617b30f331897d8bd6f3cf82e","modified":1573311316372},{"_id":"public/CNAME","hash":"3c1a7202ad0fe8f63be3ce4a1c34c517f1a6c93a","modified":1573311316372},{"_id":"public/melody-favicon.ico","hash":"4559b67f8ee3699131e5ecf6f4945f53eab05774","modified":1573311316372},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1573311316372},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1573311316372},{"_id":"public/img/cuadros.png","hash":"d53a59657b0b09755aa27b069df8492ef748a36e","modified":1573311316372},{"_id":"public/img/shattered-island.gif","hash":"3721e8c797b1fa1d37df09fe213573048cfe90b8","modified":1573311316372},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573311316372},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573311316372},{"_id":"public/js/copy.js","hash":"8d5080cd13ef6b50f5c0c22c140bba44cc5ee7fc","modified":1573311316372},{"_id":"public/js/fancybox.js","hash":"cb63b81c05fcf1cee9f41befd84c41eeb55e5fce","modified":1573311316372},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1573311316372},{"_id":"public/js/scroll.js","hash":"b2bb114ae03918b5d4473e922fc2a2ecf985ca27","modified":1573311316372},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1573311316372},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1573311316372},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1573311316372},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1573311316372},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1573311316372},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1573311316372},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1573311316372},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1573311316372},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1573311316372},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1573311316372},{"_id":"public/css/index.css","hash":"0ec5c42b527fec8d66980f342db348e852fa59ff","modified":1573311316372},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1573311316372},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1573311316372},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1573311316372},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1573311316372},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1573311316372},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1573311316372},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1573311316372},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1573311316372},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1573311316372}],"Category":[{"name":"Life","_id":"ck2roxrdq00043w4u79lw2ymk"},{"name":"Other","_id":"ck2roxrdw00093w4u942ecnge"},{"name":"Front","_id":"ck2roxrdz000f3w4u34vx2ty3"},{"name":"Git","_id":"ck2roxrei00173w4u1x1y898b"},{"name":"JS","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrel001e3w4u7rk6395p"},{"name":"构建工具","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxren001j3w4ufwl230ms"},{"name":"React","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxreo001r3w4ubiq53ep2"},{"name":"Vue","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrep001x3w4u28h0e8cx"},{"name":"Back","_id":"ck2roxreq00233w4u0i1n2kgv"},{"name":"CSS","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxret002b3w4u87kx21pk"},{"name":"ES6","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrew002n3w4ubreya2jo"},{"name":"Python","parent":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrf2003c3w4ualf66rku"},{"name":"GoLang","parent":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrfc003o3w4ugzqa14d6"},{"name":"HTML","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrff003u3w4ubygj8fnx"},{"name":"Mongodb","parent":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfj00423w4u6ozyh2jo"},{"name":"Node","parent":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrfo004b3w4u0khv4h1u"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}],"Page":[{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\ncomments: false\n---","updated":"2019-11-09T06:13:30.550Z","path":"categories/index.html","layout":"page","_id":"ck2roxr5100003w4u1isz8180","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\ncomments: false\n---","updated":"2019-11-09T06:13:19.514Z","path":"tags/index.html","layout":"page","_id":"ck2roxr5600013w4u5pzpcmrh","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""}],"Post":[{"title":"360面试总结","date":"2019-06-19T14:13:59.000Z","_content":"## 面试题目\n\nVue相关的问题：\n\n1. 你为什么选择Vue？\n2. 你认为Vue与普通的原生JS相比有什么优点？\n3. Vue的动画原理\n4. 常用的Vue生命周期钩子函数有哪些？ [-]\n5. Computed属性与Watch属性 [-]\n6. 你用过Vue插件吗？[x]\n\nJavascript基础问题：\n\n1. ES6箭头函数与普通function函数的区别\n2. 简单描述一下原型链\n3. 描述一下你理解的闭包\n4. 描述一下MVVM [x]\n5. Vue中的MVVM是基于什么实现的？\n6. 你了解HTTP协议吗？[x]\n\n## 总结\n\n面试题目难度一般，但是有些东西还是不了解，很多东西有些健忘，看来大公司提问Vue其共性就是会让你说出Vue的优缺点，还有其实现原理。\n\nVue插件听都没听说过，但是看官方文档 `Vue-router` 就属于一个Vue插件，HTTP协议需要继续深入了解。","source":"_posts/2019/360面试总结.md","raw":"---\ntitle: 360面试总结\ntags: [面试题]\ncategories:\n  - Life\ndate: 2019-06-19 22:13:59\n---\n## 面试题目\n\nVue相关的问题：\n\n1. 你为什么选择Vue？\n2. 你认为Vue与普通的原生JS相比有什么优点？\n3. Vue的动画原理\n4. 常用的Vue生命周期钩子函数有哪些？ [-]\n5. Computed属性与Watch属性 [-]\n6. 你用过Vue插件吗？[x]\n\nJavascript基础问题：\n\n1. ES6箭头函数与普通function函数的区别\n2. 简单描述一下原型链\n3. 描述一下你理解的闭包\n4. 描述一下MVVM [x]\n5. Vue中的MVVM是基于什么实现的？\n6. 你了解HTTP协议吗？[x]\n\n## 总结\n\n面试题目难度一般，但是有些东西还是不了解，很多东西有些健忘，看来大公司提问Vue其共性就是会让你说出Vue的优缺点，还有其实现原理。\n\nVue插件听都没听说过，但是看官方文档 `Vue-router` 就属于一个Vue插件，HTTP协议需要继续深入了解。","slug":"360面试总结","published":1,"updated":"2019-11-09T14:14:32.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdl00023w4udji60myh","content":"<h2 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h2><p>Vue相关的问题：</p>\n<ol>\n<li>你为什么选择Vue？</li>\n<li>你认为Vue与普通的原生JS相比有什么优点？</li>\n<li>Vue的动画原理</li>\n<li>常用的Vue生命周期钩子函数有哪些？ [-]</li>\n<li>Computed属性与Watch属性 [-]</li>\n<li>你用过Vue插件吗？[x]</li>\n</ol>\n<p>Javascript基础问题：</p>\n<ol>\n<li>ES6箭头函数与普通function函数的区别</li>\n<li>简单描述一下原型链</li>\n<li>描述一下你理解的闭包</li>\n<li>描述一下MVVM [x]</li>\n<li>Vue中的MVVM是基于什么实现的？</li>\n<li>你了解HTTP协议吗？[x]</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面试题目难度一般，但是有些东西还是不了解，很多东西有些健忘，看来大公司提问Vue其共性就是会让你说出Vue的优缺点，还有其实现原理。</p>\n<p>Vue插件听都没听说过，但是看官方文档 <code>Vue-router</code> 就属于一个Vue插件，HTTP协议需要继续深入了解。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h2><p>Vue相关的问题：</p>\n<ol>\n<li>你为什么选择Vue？</li>\n<li>你认为Vue与普通的原生JS相比有什么优点？</li>\n<li>Vue的动画原理</li>\n<li>常用的Vue生命周期钩子函数有哪些？ [-]</li>\n<li>Computed属性与Watch属性 [-]</li>\n<li>你用过Vue插件吗？[x]</li>\n</ol>\n<p>Javascript基础问题：</p>\n<ol>\n<li>ES6箭头函数与普通function函数的区别</li>\n<li>简单描述一下原型链</li>\n<li>描述一下你理解的闭包</li>\n<li>描述一下MVVM [x]</li>\n<li>Vue中的MVVM是基于什么实现的？</li>\n<li>你了解HTTP协议吗？[x]</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面试题目难度一般，但是有些东西还是不了解，很多东西有些健忘，看来大公司提问Vue其共性就是会让你说出Vue的优缺点，还有其实现原理。</p>\n<p>Vue插件听都没听说过，但是看官方文档 <code>Vue-router</code> 就属于一个Vue插件，HTTP协议需要继续深入了解。</p>\n"},{"title":"Chrome配置SwitchyOmega指南","date":"2019-04-03T13:51:27.000Z","_content":"## 代理服务器模式设置\n\n在该模式下，相当于ShadowSocks的全局模式，浏览的所有网页都会直接走代理；\n\n点击左侧的proxy选项（没有的话就新建），代理协议选择COCKS5，代理服务器填写为127.0.0.1（默认情况下），代理端口右键自己的ShadowSocks，选择“选项设置”，查看“本地代理”项中的自己本地的端口号。\n\n![](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n\n![watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n## 自动切换模式设置\n\n新加自动切换模式可以实现自动切换，大陆无法访问的网站可以自动切换代理访问，可以正常访问的网站就直接访问。\n\n![](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n这里进行如下设置，直接引用GFWList的规则，规则列表网址：[https://pagure.io/gfwlist/raw/master/f/gfwlist.txt](https://pagure.io/gfwlist/raw/master/f/gfwlist.txt)\n\n![watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n## 服务器推荐\n\n[戳我访问](http://cp.dawangidc.com/aff.php?aff=753)（← 请先找个梯子，稳定快速）\n\n日本、香港、俄罗斯等10+个节点，超低延迟，速度保障\n\n**年付普通1080P套餐仅60元/年，低至5元/月。**\n\n**年付尊享4K套餐仅80/年，低至6.6元/月。**","source":"_posts/2019/Chrome配置SwitchyOmega指南.md","raw":"---\ntitle: Chrome配置SwitchyOmega指南\ntags: [Chrome]\ncategories:\n  - Other\ndate: 2019-04-03 21:51:27\n---\n## 代理服务器模式设置\n\n在该模式下，相当于ShadowSocks的全局模式，浏览的所有网页都会直接走代理；\n\n点击左侧的proxy选项（没有的话就新建），代理协议选择COCKS5，代理服务器填写为127.0.0.1（默认情况下），代理端口右键自己的ShadowSocks，选择“选项设置”，查看“本地代理”项中的自己本地的端口号。\n\n![](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n\n![watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n## 自动切换模式设置\n\n新加自动切换模式可以实现自动切换，大陆无法访问的网站可以自动切换代理访问，可以正常访问的网站就直接访问。\n\n![](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n这里进行如下设置，直接引用GFWList的规则，规则列表网址：[https://pagure.io/gfwlist/raw/master/f/gfwlist.txt](https://pagure.io/gfwlist/raw/master/f/gfwlist.txt)\n\n![watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70](http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70)\n\n## 服务器推荐\n\n[戳我访问](http://cp.dawangidc.com/aff.php?aff=753)（← 请先找个梯子，稳定快速）\n\n日本、香港、俄罗斯等10+个节点，超低延迟，速度保障\n\n**年付普通1080P套餐仅60元/年，低至5元/月。**\n\n**年付尊享4K套餐仅80/年，低至6.6元/月。**","slug":"Chrome配置SwitchyOmega指南","published":1,"updated":"2019-11-09T14:09:25.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdp00033w4u1jd00t59","content":"<h2 id=\"代理服务器模式设置\"><a href=\"#代理服务器模式设置\" class=\"headerlink\" title=\"代理服务器模式设置\"></a>代理服务器模式设置</h2><p>在该模式下，相当于ShadowSocks的全局模式，浏览的所有网页都会直接走代理；</p>\n<p>点击左侧的proxy选项（没有的话就新建），代理协议选择COCKS5，代理服务器填写为127.0.0.1（默认情况下），代理端口右键自己的ShadowSocks，选择“选项设置”，查看“本地代理”项中的自己本地的端口号。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"自动切换模式设置\"><a href=\"#自动切换模式设置\" class=\"headerlink\" title=\"自动切换模式设置\"></a>自动切换模式设置</h2><p>新加自动切换模式可以实现自动切换，大陆无法访问的网站可以自动切换代理访问，可以正常访问的网站就直接访问。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>这里进行如下设置，直接引用GFWList的规则，规则列表网址：<a href=\"https://pagure.io/gfwlist/raw/master/f/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://pagure.io/gfwlist/raw/master/f/gfwlist.txt</a></p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"服务器推荐\"><a href=\"#服务器推荐\" class=\"headerlink\" title=\"服务器推荐\"></a>服务器推荐</h2><p><a href=\"http://cp.dawangidc.com/aff.php?aff=753\" target=\"_blank\" rel=\"noopener\">戳我访问</a>（← 请先找个梯子，稳定快速）</p>\n<p>日本、香港、俄罗斯等10+个节点，超低延迟，速度保障</p>\n<p><strong>年付普通1080P套餐仅60元/年，低至5元/月。</strong></p>\n<p><strong>年付尊享4K套餐仅80/年，低至6.6元/月。</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"代理服务器模式设置\"><a href=\"#代理服务器模式设置\" class=\"headerlink\" title=\"代理服务器模式设置\"></a>代理服务器模式设置</h2><p>在该模式下，相当于ShadowSocks的全局模式，浏览的所有网页都会直接走代理；</p>\n<p>点击左侧的proxy选项（没有的话就新建），代理协议选择COCKS5，代理服务器填写为127.0.0.1（默认情况下），代理端口右键自己的ShadowSocks，选择“选项设置”，查看“本地代理”项中的自己本地的端口号。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"自动切换模式设置\"><a href=\"#自动切换模式设置\" class=\"headerlink\" title=\"自动切换模式设置\"></a>自动切换模式设置</h2><p>新加自动切换模式可以实现自动切换，大陆无法访问的网站可以自动切换代理访问，可以正常访问的网站就直接访问。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>这里进行如下设置，直接引用GFWList的规则，规则列表网址：<a href=\"https://pagure.io/gfwlist/raw/master/f/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://pagure.io/gfwlist/raw/master/f/gfwlist.txt</a></p>\n<p><img src=\"http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\" alt=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"服务器推荐\"><a href=\"#服务器推荐\" class=\"headerlink\" title=\"服务器推荐\"></a>服务器推荐</h2><p><a href=\"http://cp.dawangidc.com/aff.php?aff=753\" target=\"_blank\" rel=\"noopener\">戳我访问</a>（← 请先找个梯子，稳定快速）</p>\n<p>日本、香港、俄罗斯等10+个节点，超低延迟，速度保障</p>\n<p><strong>年付普通1080P套餐仅60元/年，低至5元/月。</strong></p>\n<p><strong>年付尊享4K套餐仅80/年，低至6.6元/月。</strong></p>\n"},{"title":"Javascript中的函数节流与函数防抖","date":"2019-04-20T13:45:58.000Z","_content":"> 函数节流和函数防抖都是用来优化性能，以及避免短时间内连续调用某个函数的方案。我们通过以下两个例子，来理解两种方案，以及它们的应用场景。\n\n# 函数节流\n\n函数节流即为，一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次。\n\n这里我们可以理解为当一个函数立即执行后，它需要一个冷却时间才能被执行第二次，也就是我们需要去节制函数的调用次数，即为节流。\n\n我们可以通过检测两次函数调用的时间差，如果在设定的函数冷却时间之内，则不能执行，如果在冷却时间之外则可以执行。通过函数节流可以优化Javascript的性能，防止一个函数被无差别的多次反复执行。\n\n```javascript\n// JS核心/01.js\n/**\n * 函数节流\n * @param fn 要被节流的函数\n * @param delay 规定的时间（函数执行的冷却时间）\n */\nfunction throttle(fn, delay) {\n  var lastTime = 0;\n  // 需要通过闭包来保存lastTime的状态，否则每次调用lastTime都会被初始化为0\n  return function () {\n    var nowTime = Date.now();\n    if (nowTime - lastTime > delay) {\n      fn.call(this); // 解决fn函数内this指向问题，如果不绑定this，函数的调用者为window（因为在这里执行函数函数前没有执行者），如果绑定了this，函数的this就指向了调用者本身\n      lastTime = Date.now();\n    }\n  };\n}\n\nvar fun = throttle(function () {\n  console.log(\"触发了！\");\n}, 500);\n\nfun();\n\nsetTimeout(function () {\n  fun();\n}, 400)\n\nsetTimeout(function () {\n  fun();\n}, 600)\n```\n\n输出结果:\n```\n触发了！\n触发了！\n```\n\n# 函数防抖\n\n函数防抖即为，一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。\n\n也就是说说一个方法将执行时，它会在一段时间内等待有没有事件第二次触发这个方法，如果有它就不执行了，如果没有才执行。\n\n我们可以通过定时器，在方法第一次调用时，设置一个定时器，然后触发方法，假如在方法被触发前，该方法又被调用了，那在第二次调用前，会清除第一次调用方法而生成的定时器，重新再生成一个定时器去执行方法。\n\n当我们页面上有一个按钮，希望用户在多次快速点击按钮时，仅触发一次按钮效果，我们就可以使用函数防抖机制，来避免用户在快速点击按钮时，连续触发多次方法。\n\n```javascript\n/**\n * 函数防抖\n * @param fn 添加防抖的函数\n * @param delay 防抖间隔时间\n */\nfunction debounce(fn, delay) {\n  // 记录上一次的延时器\n  var timer = null;\n  return function () {\n    // 清除上一次的延时器\n    clearTimeout(timer);\n    // 获取传入方法内部的参数\n    var args = Array.prototype.slice.apply(arguments);\n    // 重新设定新的延时器\n    timer = setTimeout(function () {\n      fn.apply(this, args);\n    }, delay);\n  }\n}\n\nvar fun = debounce(function (a, b) {\n  console.log(a);\n  console.log(b);\n  console.log('触发了！');\n}, 1000)\n\nsetTimeout(function () {\n  fun()\n}, 200)\n\nsetTimeout(function () {\n  fun()\n}, 300)\n\nsetTimeout(function () {\n  fun()\n}, 400)\n\nsetTimeout(function () {\n  fun(111, 222)\n}, 1402)\n```\n\n输出结果:\n```\nundefined\nundefined\n触发了！\n111\n222\n触发了！\n```\n\n# 二者区别\n\n函数节流是给函数执行设定一个冷却时间，函数被触发后在某固定一时间段内无法被触发第二次，它响应第一个触发者而忽略后面的触发者。\n\n函数防抖是推迟了函数的执行，只响应后面的触发者，而抛弃前面的触发者，它的执行时间可以被无限推迟。\n","source":"_posts/2019/Javascript中的函数节流与函数防抖.md","raw":"---\ntitle: Javascript中的函数节流与函数防抖\ntags: [JS, 面试题]\ncategories:\n  - Front\n  - JS\ndate: 2019-04-20 21:45:58\n---\n> 函数节流和函数防抖都是用来优化性能，以及避免短时间内连续调用某个函数的方案。我们通过以下两个例子，来理解两种方案，以及它们的应用场景。\n\n# 函数节流\n\n函数节流即为，一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次。\n\n这里我们可以理解为当一个函数立即执行后，它需要一个冷却时间才能被执行第二次，也就是我们需要去节制函数的调用次数，即为节流。\n\n我们可以通过检测两次函数调用的时间差，如果在设定的函数冷却时间之内，则不能执行，如果在冷却时间之外则可以执行。通过函数节流可以优化Javascript的性能，防止一个函数被无差别的多次反复执行。\n\n```javascript\n// JS核心/01.js\n/**\n * 函数节流\n * @param fn 要被节流的函数\n * @param delay 规定的时间（函数执行的冷却时间）\n */\nfunction throttle(fn, delay) {\n  var lastTime = 0;\n  // 需要通过闭包来保存lastTime的状态，否则每次调用lastTime都会被初始化为0\n  return function () {\n    var nowTime = Date.now();\n    if (nowTime - lastTime > delay) {\n      fn.call(this); // 解决fn函数内this指向问题，如果不绑定this，函数的调用者为window（因为在这里执行函数函数前没有执行者），如果绑定了this，函数的this就指向了调用者本身\n      lastTime = Date.now();\n    }\n  };\n}\n\nvar fun = throttle(function () {\n  console.log(\"触发了！\");\n}, 500);\n\nfun();\n\nsetTimeout(function () {\n  fun();\n}, 400)\n\nsetTimeout(function () {\n  fun();\n}, 600)\n```\n\n输出结果:\n```\n触发了！\n触发了！\n```\n\n# 函数防抖\n\n函数防抖即为，一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。\n\n也就是说说一个方法将执行时，它会在一段时间内等待有没有事件第二次触发这个方法，如果有它就不执行了，如果没有才执行。\n\n我们可以通过定时器，在方法第一次调用时，设置一个定时器，然后触发方法，假如在方法被触发前，该方法又被调用了，那在第二次调用前，会清除第一次调用方法而生成的定时器，重新再生成一个定时器去执行方法。\n\n当我们页面上有一个按钮，希望用户在多次快速点击按钮时，仅触发一次按钮效果，我们就可以使用函数防抖机制，来避免用户在快速点击按钮时，连续触发多次方法。\n\n```javascript\n/**\n * 函数防抖\n * @param fn 添加防抖的函数\n * @param delay 防抖间隔时间\n */\nfunction debounce(fn, delay) {\n  // 记录上一次的延时器\n  var timer = null;\n  return function () {\n    // 清除上一次的延时器\n    clearTimeout(timer);\n    // 获取传入方法内部的参数\n    var args = Array.prototype.slice.apply(arguments);\n    // 重新设定新的延时器\n    timer = setTimeout(function () {\n      fn.apply(this, args);\n    }, delay);\n  }\n}\n\nvar fun = debounce(function (a, b) {\n  console.log(a);\n  console.log(b);\n  console.log('触发了！');\n}, 1000)\n\nsetTimeout(function () {\n  fun()\n}, 200)\n\nsetTimeout(function () {\n  fun()\n}, 300)\n\nsetTimeout(function () {\n  fun()\n}, 400)\n\nsetTimeout(function () {\n  fun(111, 222)\n}, 1402)\n```\n\n输出结果:\n```\nundefined\nundefined\n触发了！\n111\n222\n触发了！\n```\n\n# 二者区别\n\n函数节流是给函数执行设定一个冷却时间，函数被触发后在某固定一时间段内无法被触发第二次，它响应第一个触发者而忽略后面的触发者。\n\n函数防抖是推迟了函数的执行，只响应后面的触发者，而抛弃前面的触发者，它的执行时间可以被无限推迟。\n","slug":"Javascript中的函数节流与函数防抖","published":1,"updated":"2019-11-09T14:00:27.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrds00063w4u0ct82zs2","content":"<blockquote>\n<p>函数节流和函数防抖都是用来优化性能，以及避免短时间内连续调用某个函数的方案。我们通过以下两个例子，来理解两种方案，以及它们的应用场景。</p>\n</blockquote>\n<h1 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h1><p>函数节流即为，一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次。</p>\n<p>这里我们可以理解为当一个函数立即执行后，它需要一个冷却时间才能被执行第二次，也就是我们需要去节制函数的调用次数，即为节流。</p>\n<p>我们可以通过检测两次函数调用的时间差，如果在设定的函数冷却时间之内，则不能执行，如果在冷却时间之外则可以执行。通过函数节流可以优化Javascript的性能，防止一个函数被无差别的多次反复执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JS核心/01.js</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fn 要被节流的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delay 规定的时间（函数执行的冷却时间）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lastTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要通过闭包来保存lastTime的状态，否则每次调用lastTime都会被初始化为0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - lastTime &gt; delay) &#123;</span><br><span class=\"line\">      fn.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 解决fn函数内this指向问题，如果不绑定this，函数的调用者为window（因为在这里执行函数函数前没有执行者），如果绑定了this，函数的this就指向了调用者本身</span></span><br><span class=\"line\">      lastTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = throttle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"触发了！\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fun();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun();</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun();</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">触发了！</span><br><span class=\"line\">触发了！</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h1><p>函数防抖即为，一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p>\n<p>也就是说说一个方法将执行时，它会在一段时间内等待有没有事件第二次触发这个方法，如果有它就不执行了，如果没有才执行。</p>\n<p>我们可以通过定时器，在方法第一次调用时，设置一个定时器，然后触发方法，假如在方法被触发前，该方法又被调用了，那在第二次调用前，会清除第一次调用方法而生成的定时器，重新再生成一个定时器去执行方法。</p>\n<p>当我们页面上有一个按钮，希望用户在多次快速点击按钮时，仅触发一次按钮效果，我们就可以使用函数防抖机制，来避免用户在快速点击按钮时，连续触发多次方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fn 添加防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delay 防抖间隔时间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录上一次的延时器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除上一次的延时器</span></span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    <span class=\"comment\">// 获取传入方法内部的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.apply(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 重新设定新的延时器</span></span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了！'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun(<span class=\"number\">111</span>, <span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1402</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">触发了！</span><br><span class=\"line\">111</span><br><span class=\"line\">222</span><br><span class=\"line\">触发了！</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h1><p>函数节流是给函数执行设定一个冷却时间，函数被触发后在某固定一时间段内无法被触发第二次，它响应第一个触发者而忽略后面的触发者。</p>\n<p>函数防抖是推迟了函数的执行，只响应后面的触发者，而抛弃前面的触发者，它的执行时间可以被无限推迟。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<blockquote>\n<p>函数节流和函数防抖都是用来优化性能，以及避免短时间内连续调用某个函数的方案。我们通过以下两个例子，来理解两种方案，以及它们的应用场景。</p>\n</blockquote>\n<h1 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h1><p>函数节流即为，一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次。</p>\n<p>这里我们可以理解为当一个函数立即执行后，它需要一个冷却时间才能被执行第二次，也就是我们需要去节制函数的调用次数，即为节流。</p>\n<p>我们可以通过检测两次函数调用的时间差，如果在设定的函数冷却时间之内，则不能执行，如果在冷却时间之外则可以执行。通过函数节流可以优化Javascript的性能，防止一个函数被无差别的多次反复执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JS核心/01.js</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数节流</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fn 要被节流的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delay 规定的时间（函数执行的冷却时间）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lastTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要通过闭包来保存lastTime的状态，否则每次调用lastTime都会被初始化为0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - lastTime &gt; delay) &#123;</span><br><span class=\"line\">      fn.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 解决fn函数内this指向问题，如果不绑定this，函数的调用者为window（因为在这里执行函数函数前没有执行者），如果绑定了this，函数的this就指向了调用者本身</span></span><br><span class=\"line\">      lastTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = throttle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"触发了！\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fun();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun();</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun();</span><br><span class=\"line\">&#125;, <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">触发了！</span><br><span class=\"line\">触发了！</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h1><p>函数防抖即为，一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p>\n<p>也就是说说一个方法将执行时，它会在一段时间内等待有没有事件第二次触发这个方法，如果有它就不执行了，如果没有才执行。</p>\n<p>我们可以通过定时器，在方法第一次调用时，设置一个定时器，然后触发方法，假如在方法被触发前，该方法又被调用了，那在第二次调用前，会清除第一次调用方法而生成的定时器，重新再生成一个定时器去执行方法。</p>\n<p>当我们页面上有一个按钮，希望用户在多次快速点击按钮时，仅触发一次按钮效果，我们就可以使用函数防抖机制，来避免用户在快速点击按钮时，连续触发多次方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数防抖</span></span><br><span class=\"line\"><span class=\"comment\"> * @param fn 添加防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param delay 防抖间隔时间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录上一次的延时器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除上一次的延时器</span></span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    <span class=\"comment\">// 获取传入方法内部的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.apply(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 重新设定新的延时器</span></span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了！'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun()</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fun(<span class=\"number\">111</span>, <span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1402</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">触发了！</span><br><span class=\"line\">111</span><br><span class=\"line\">222</span><br><span class=\"line\">触发了！</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h1><p>函数节流是给函数执行设定一个冷却时间，函数被触发后在某固定一时间段内无法被触发第二次，它响应第一个触发者而忽略后面的触发者。</p>\n<p>函数防抖是推迟了函数的执行，只响应后面的触发者，而抛弃前面的触发者，它的执行时间可以被无限推迟。</p>\n"},{"title":"React中修改父组件传入的props","date":"2019-07-29T12:51:52.000Z","_content":"# 需求场景\n\n当我们在父组件中调用子组件时，通常会将**父组件的 state 数据**，传递给**子组件的 props 属性**中，但是我们通常无法在子组件内改变外部传入的 props 属性，进而改变父组件的 state 属性。\n\n这时 `react-link-state` 组件可以帮助我们。\n\n# 使用方法\n\n引入：\n\n```javascript\nimport linkState from 'react-link-state';\n\n```\n\n在父组件中设置子组件时，指定要关联的 state\n\n```javascript\nclass Fater extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: 'value'\n        }\n    }\n    render(){\n        return (\n            <div>\n             ...\n             <Son\n                sonData={linkState(this, 'data')}\n             />\n             ...\n             </div>\n        )\n    }\n}\n\n```\n\n\n在子组件中改变父组件传入的props:\n\n```javascript\nclass Fater extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    handelChange(){\n        this.props.sondata.requestChange('newData')\n    }\n\n    render(){\n        return (\n            <div onClikc={handelChange}>\n             {this.props.sonData.value}\n            </div>\n        )\n    }\n}\n\n```\n\n\n# 原理\n\n`linkState()` 方法可以将父组件的 state 中的数据转化为一个 object，其含内部包含两个结构\n\n*   `value` 用来存放源数据\n*   `requestChange()` 方法则是用于请求改变父组件的 state 数据\n\n这样我们就可以访问这个 object 来进行对应的数据获取和数据更改操作。","source":"_posts/2019/React中修改父组件传入的props.md","raw":"---\ntitle: React中修改父组件传入的props\ndate: 2019-07-29 20:51:52\ntags: [React]\ncategories: [Front, React]\n---\n# 需求场景\n\n当我们在父组件中调用子组件时，通常会将**父组件的 state 数据**，传递给**子组件的 props 属性**中，但是我们通常无法在子组件内改变外部传入的 props 属性，进而改变父组件的 state 属性。\n\n这时 `react-link-state` 组件可以帮助我们。\n\n# 使用方法\n\n引入：\n\n```javascript\nimport linkState from 'react-link-state';\n\n```\n\n在父组件中设置子组件时，指定要关联的 state\n\n```javascript\nclass Fater extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: 'value'\n        }\n    }\n    render(){\n        return (\n            <div>\n             ...\n             <Son\n                sonData={linkState(this, 'data')}\n             />\n             ...\n             </div>\n        )\n    }\n}\n\n```\n\n\n在子组件中改变父组件传入的props:\n\n```javascript\nclass Fater extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    handelChange(){\n        this.props.sondata.requestChange('newData')\n    }\n\n    render(){\n        return (\n            <div onClikc={handelChange}>\n             {this.props.sonData.value}\n            </div>\n        )\n    }\n}\n\n```\n\n\n# 原理\n\n`linkState()` 方法可以将父组件的 state 中的数据转化为一个 object，其含内部包含两个结构\n\n*   `value` 用来存放源数据\n*   `requestChange()` 方法则是用于请求改变父组件的 state 数据\n\n这样我们就可以访问这个 object 来进行对应的数据获取和数据更改操作。","slug":"React中修改父组件传入的props","published":1,"updated":"2019-11-09T13:59:36.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdu00073w4ufuft0a3c","content":"<h1 id=\"需求场景\"><a href=\"#需求场景\" class=\"headerlink\" title=\"需求场景\"></a>需求场景</h1><p>当我们在父组件中调用子组件时，通常会将<strong>父组件的 state 数据</strong>，传递给<strong>子组件的 props 属性</strong>中，但是我们通常无法在子组件内改变外部传入的 props 属性，进而改变父组件的 state 属性。</p>\n<p>这时 <code>react-link-state</code> 组件可以帮助我们。</p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> linkState <span class=\"keyword\">from</span> <span class=\"string\">'react-link-state'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在父组件中设置子组件时，指定要关联的 state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fater</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"string\">'value'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">             &lt;Son</span><br><span class=\"line\">                sonData=&#123;linkState(<span class=\"keyword\">this</span>, <span class=\"string\">'data'</span>)&#125;</span><br><span class=\"line\">             /&gt;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">             &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在子组件中改变父组件传入的props:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fater</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handelChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.sondata.requestChange(<span class=\"string\">'newData'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div onClikc=&#123;handelChange&#125;&gt;</span><br><span class=\"line\">             &#123;<span class=\"keyword\">this</span>.props.sonData.value&#125;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p><code>linkState()</code> 方法可以将父组件的 state 中的数据转化为一个 object，其含内部包含两个结构</p>\n<ul>\n<li><code>value</code> 用来存放源数据</li>\n<li><code>requestChange()</code> 方法则是用于请求改变父组件的 state 数据</li>\n</ul>\n<p>这样我们就可以访问这个 object 来进行对应的数据获取和数据更改操作。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"需求场景\"><a href=\"#需求场景\" class=\"headerlink\" title=\"需求场景\"></a>需求场景</h1><p>当我们在父组件中调用子组件时，通常会将<strong>父组件的 state 数据</strong>，传递给<strong>子组件的 props 属性</strong>中，但是我们通常无法在子组件内改变外部传入的 props 属性，进而改变父组件的 state 属性。</p>\n<p>这时 <code>react-link-state</code> 组件可以帮助我们。</p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> linkState <span class=\"keyword\">from</span> <span class=\"string\">'react-link-state'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在父组件中设置子组件时，指定要关联的 state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fater</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"string\">'value'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">             &lt;Son</span><br><span class=\"line\">                sonData=&#123;linkState(<span class=\"keyword\">this</span>, <span class=\"string\">'data'</span>)&#125;</span><br><span class=\"line\">             /&gt;</span><br><span class=\"line\">             ...</span><br><span class=\"line\">             &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>在子组件中改变父组件传入的props:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fater</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handelChange()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.sondata.requestChange(<span class=\"string\">'newData'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div onClikc=&#123;handelChange&#125;&gt;</span><br><span class=\"line\">             &#123;<span class=\"keyword\">this</span>.props.sonData.value&#125;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p><code>linkState()</code> 方法可以将父组件的 state 中的数据转化为一个 object，其含内部包含两个结构</p>\n<ul>\n<li><code>value</code> 用来存放源数据</li>\n<li><code>requestChange()</code> 方法则是用于请求改变父组件的 state 数据</li>\n</ul>\n<p>这样我们就可以访问这个 object 来进行对应的数据获取和数据更改操作。</p>\n"},{"title":"React学习笔记02：React高级内容","date":"2019-04-22T13:53:05.000Z","_content":"## 1.propTypes属性强校验\n为避免在父组件向子组件传值的过程中传入意外值，如将`propTyopes`设置为止接收字符串，则父级不能向子级传递方法。\n\n```javascript\nimport PropTypes from 'prop-types'; // 引入\n... ...\nclass TodoItem extends Component{...}\n... ...\nTodoItem.protoTypes = {\n  content: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), // 可以设置两种类型\n  deleteItem: PropTypes.func,\n  index: PropTypes.number,\n  test: PropTypes.string.isRequired, // 必须要求传递test参数\n}\n```\n\n## 2.defatltProps设置属性默认值\n如果父组件没有向子组件传递某个值，但是在子组件中调用了这个值，可以用`defaultProps`来设置默认值。\n\n```javascript\nTodoItem.defaultProps={\n  test: 'Hello world'\n}\n```\n\n## 3.ref获取元素DOM节点(不推荐)\n使用`ref`将当前的`input`节点绑定到`this.input`对象上\n```javascript\n<input\n  ref={(input) => {this.input = input}}\n></input>\n```\n在函数方法中可调用`this.input`来获取这个节点的相关属性、方法\n```javascript\nvar value = this.input.props.value;\n```\n> ref方式去操作DOM可能会因为`setState`方法的异步导致数据错误。`setState`方法提供第二个参数，这个参数是一个函数，在执行完异步之后执行，可以将ref操作放到这里执行\n\n## 4.React声明周期函数\n生命周期函数指在某一个时刻被自动调用执行的函数\n![a71efaafly1g177dll2lzj21830ncqbt.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g177dll2lzj21830ncqbt.jpg)\n\n### 4.1 Mounting\n`componentWillMount` 在组件即将被挂载之前执行，只会执行一次\n\n`componentDidMount` 在组件被加载后执行，只会执行一次，在此可以调用AJAX请求\n\n### 4.2 Updation\n`componentWillReceiveProps` 当一个组件从父组件接收了参数，只要父组件的render函数被执行了，该函数就会被执行（第一次出现在父组件中不会被执行，如果这个组件之前已经存在于父组件中，才会执行）\n\n`shouldComponentUpdate` 在组件即将被更新前执行，如果返回false，就会阻止数据更新\n\n`componentWillUpdate` 组件被更新之前会被执行，但是在shouldComponentUpdate之后执行，如果shouldComponeUpdate返回true才会被执行   \n\n`componentDidUpdate` 组件更新后会被执行\n\n### 4.3 Unmounting\n`componentWillUnmount` 当组件即将被移出前自动执行\n\n### 4.4 应用\n> shouldComponentUpdate\n\n`shouldComponentUpdate`可以传入两个参数，一个`nextProps`一个`nextState`，表示父组件改变时，即将顺应改变的子组件的props值和state值。当父组件发生执行render函数时，子组件也会重新render，此时只要使用该生命周期函数，通过判断即将更新的props和state的值，就可以选择子组件重新渲染与否，如：\n```javascript\nshouldComponentUpdate(nextProps, nextState) {\n  if(nextProps.content !== this.props.content) {\n    return true;\n  }else {\n    return false;\n  }\n}\n```\n\n## 5. 在React中使用axios\n```javascript\nimport axios from 'axios'\n// ... ...\naxios.get().then().catch()\n```\n\n## 6. React中的过度动画\n安装 `react-transtion-group` 一个React动画专用的动画库\n```\nyarn add react-transtion-group\n```\n\n### 6.1 CSSTranstion的使用\n```javascript\nimport { CSSTranstion } from 'react-transition-group'\n... ...\n<CSSTransition\n  in={this.state.show} // 动画进入时的判断\n  timeout={1000}  // 动画执行的时间\n  classNames='fade' // 过长动画的css的前缀，如下面的'.fade-enter' 的前缀 'fade-'\n  unmountOnExit // 动画执行结束后移除\n  onEntered={(el)=>{el.style.color = 'blue'}} // 动画进入后执行的钩子函数\n>\n  <div>Hello</div>\n</CSSTransition>\n```\n\n1. 入场动画的挂载的class: \n\n    `.fade-enter` 入场动画第一个时刻，但是还未入场，此时挂载该CSS\n    ```css\n    .fade-enter{\n      opacity: 0;\n    }\n    ```\n\n    `.fade-enter-active` 入场动画的第二个时刻，到入场动画执行完成之前的一个时刻，此时挂载该CSS\n    ```css\n    .fade-enter-active{\n      opacity: 1;\n      transition: opacity 1s ease-in\n    }\n    ```\n\n    `.fade-enter-done` 当整个过场动画执行完成之后执行，此时挂载该CSS\n    ```css\n    .fade-enter-done{\n      opacity: 1\n    }\n    ```\n\n2. 出场动画的挂载的class: \n    `.fade-exit`、`fade-exit-active`、`fade-exit-done` 跟入场动画的作用相似\n\n### 6.2 apear参数\n在 `<CSSTransition>` 标签中传入一个 `appear={true}` 就会在元素上添加额外的 `appear` class，这个apper可以让元素在加载入页面的实行就执行相关的进入页面的动画，假如我们设定了一个元素进入的动画，元素在加载进页面的时候是出于显示状态，则进入动画不会被执行，只有让动画消失再出现的时候才会被执行。如果我们想要元素在被加载进页面的时候就执行进入动画，就可以开启 `appear` 参数，同时在css中这么设置：\n```css\n.fade-enter, .fade-appear{\n  opacity: 0;\n}\n.fade-enter-active .fade-appear-active{\n  opacity: 1;\n  transition: opacity 1s ease-in\n}\n```\n\n### 6.3 TransitionGroup\n假如我们要循环生成一些列表DOM，就可以用 `TransitionGroup` 来实现多个元素的切换动画效果，只需要在列表外层加一个 `<TransitionGroup>` 标签\n```javascript\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\n... ...\n\n<TransitionGroup>\n  {\n    this.state.list.map((item, index) => {\n      return (\n        <CSSTransition\n          timeout={1000}\n          classNames='fade'\n          key={index}\n        >\n          <div>{item}</div>\n        </CSSTransition>\n      )\n    })\n  }\n</TransitionGroup>\n```","source":"_posts/2019/React学习笔记02：React高级内容.md","raw":"---\ntitle: React学习笔记02：React高级内容\ntags: [React基础教程]\ncategories:\n  - Front\n  - React\ndate: 2019-04-22 21:53:05\n---\n## 1.propTypes属性强校验\n为避免在父组件向子组件传值的过程中传入意外值，如将`propTyopes`设置为止接收字符串，则父级不能向子级传递方法。\n\n```javascript\nimport PropTypes from 'prop-types'; // 引入\n... ...\nclass TodoItem extends Component{...}\n... ...\nTodoItem.protoTypes = {\n  content: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), // 可以设置两种类型\n  deleteItem: PropTypes.func,\n  index: PropTypes.number,\n  test: PropTypes.string.isRequired, // 必须要求传递test参数\n}\n```\n\n## 2.defatltProps设置属性默认值\n如果父组件没有向子组件传递某个值，但是在子组件中调用了这个值，可以用`defaultProps`来设置默认值。\n\n```javascript\nTodoItem.defaultProps={\n  test: 'Hello world'\n}\n```\n\n## 3.ref获取元素DOM节点(不推荐)\n使用`ref`将当前的`input`节点绑定到`this.input`对象上\n```javascript\n<input\n  ref={(input) => {this.input = input}}\n></input>\n```\n在函数方法中可调用`this.input`来获取这个节点的相关属性、方法\n```javascript\nvar value = this.input.props.value;\n```\n> ref方式去操作DOM可能会因为`setState`方法的异步导致数据错误。`setState`方法提供第二个参数，这个参数是一个函数，在执行完异步之后执行，可以将ref操作放到这里执行\n\n## 4.React声明周期函数\n生命周期函数指在某一个时刻被自动调用执行的函数\n![a71efaafly1g177dll2lzj21830ncqbt.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g177dll2lzj21830ncqbt.jpg)\n\n### 4.1 Mounting\n`componentWillMount` 在组件即将被挂载之前执行，只会执行一次\n\n`componentDidMount` 在组件被加载后执行，只会执行一次，在此可以调用AJAX请求\n\n### 4.2 Updation\n`componentWillReceiveProps` 当一个组件从父组件接收了参数，只要父组件的render函数被执行了，该函数就会被执行（第一次出现在父组件中不会被执行，如果这个组件之前已经存在于父组件中，才会执行）\n\n`shouldComponentUpdate` 在组件即将被更新前执行，如果返回false，就会阻止数据更新\n\n`componentWillUpdate` 组件被更新之前会被执行，但是在shouldComponentUpdate之后执行，如果shouldComponeUpdate返回true才会被执行   \n\n`componentDidUpdate` 组件更新后会被执行\n\n### 4.3 Unmounting\n`componentWillUnmount` 当组件即将被移出前自动执行\n\n### 4.4 应用\n> shouldComponentUpdate\n\n`shouldComponentUpdate`可以传入两个参数，一个`nextProps`一个`nextState`，表示父组件改变时，即将顺应改变的子组件的props值和state值。当父组件发生执行render函数时，子组件也会重新render，此时只要使用该生命周期函数，通过判断即将更新的props和state的值，就可以选择子组件重新渲染与否，如：\n```javascript\nshouldComponentUpdate(nextProps, nextState) {\n  if(nextProps.content !== this.props.content) {\n    return true;\n  }else {\n    return false;\n  }\n}\n```\n\n## 5. 在React中使用axios\n```javascript\nimport axios from 'axios'\n// ... ...\naxios.get().then().catch()\n```\n\n## 6. React中的过度动画\n安装 `react-transtion-group` 一个React动画专用的动画库\n```\nyarn add react-transtion-group\n```\n\n### 6.1 CSSTranstion的使用\n```javascript\nimport { CSSTranstion } from 'react-transition-group'\n... ...\n<CSSTransition\n  in={this.state.show} // 动画进入时的判断\n  timeout={1000}  // 动画执行的时间\n  classNames='fade' // 过长动画的css的前缀，如下面的'.fade-enter' 的前缀 'fade-'\n  unmountOnExit // 动画执行结束后移除\n  onEntered={(el)=>{el.style.color = 'blue'}} // 动画进入后执行的钩子函数\n>\n  <div>Hello</div>\n</CSSTransition>\n```\n\n1. 入场动画的挂载的class: \n\n    `.fade-enter` 入场动画第一个时刻，但是还未入场，此时挂载该CSS\n    ```css\n    .fade-enter{\n      opacity: 0;\n    }\n    ```\n\n    `.fade-enter-active` 入场动画的第二个时刻，到入场动画执行完成之前的一个时刻，此时挂载该CSS\n    ```css\n    .fade-enter-active{\n      opacity: 1;\n      transition: opacity 1s ease-in\n    }\n    ```\n\n    `.fade-enter-done` 当整个过场动画执行完成之后执行，此时挂载该CSS\n    ```css\n    .fade-enter-done{\n      opacity: 1\n    }\n    ```\n\n2. 出场动画的挂载的class: \n    `.fade-exit`、`fade-exit-active`、`fade-exit-done` 跟入场动画的作用相似\n\n### 6.2 apear参数\n在 `<CSSTransition>` 标签中传入一个 `appear={true}` 就会在元素上添加额外的 `appear` class，这个apper可以让元素在加载入页面的实行就执行相关的进入页面的动画，假如我们设定了一个元素进入的动画，元素在加载进页面的时候是出于显示状态，则进入动画不会被执行，只有让动画消失再出现的时候才会被执行。如果我们想要元素在被加载进页面的时候就执行进入动画，就可以开启 `appear` 参数，同时在css中这么设置：\n```css\n.fade-enter, .fade-appear{\n  opacity: 0;\n}\n.fade-enter-active .fade-appear-active{\n  opacity: 1;\n  transition: opacity 1s ease-in\n}\n```\n\n### 6.3 TransitionGroup\n假如我们要循环生成一些列表DOM，就可以用 `TransitionGroup` 来实现多个元素的切换动画效果，只需要在列表外层加一个 `<TransitionGroup>` 标签\n```javascript\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\n... ...\n\n<TransitionGroup>\n  {\n    this.state.list.map((item, index) => {\n      return (\n        <CSSTransition\n          timeout={1000}\n          classNames='fade'\n          key={index}\n        >\n          <div>{item}</div>\n        </CSSTransition>\n      )\n    })\n  }\n</TransitionGroup>\n```","slug":"React学习笔记02：React高级内容","published":1,"updated":"2019-11-09T13:53:40.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdv00083w4ugv70e1nb","content":"<h2 id=\"1-propTypes属性强校验\"><a href=\"#1-propTypes属性强校验\" class=\"headerlink\" title=\"1.propTypes属性强校验\"></a>1.propTypes属性强校验</h2><p>为避免在父组件向子组件传值的过程中传入意外值，如将<code>propTyopes</code>设置为止接收字符串，则父级不能向子级传递方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>; <span class=\"comment\">// 引入</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;...&#125;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">TodoItem.protoTypes = &#123;</span><br><span class=\"line\">  content: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), <span class=\"comment\">// 可以设置两种类型</span></span><br><span class=\"line\">  deleteItem: PropTypes.func,</span><br><span class=\"line\">  index: PropTypes.number,</span><br><span class=\"line\">  test: PropTypes.string.isRequired, <span class=\"comment\">// 必须要求传递test参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-defatltProps设置属性默认值\"><a href=\"#2-defatltProps设置属性默认值\" class=\"headerlink\" title=\"2.defatltProps设置属性默认值\"></a>2.defatltProps设置属性默认值</h2><p>如果父组件没有向子组件传递某个值，但是在子组件中调用了这个值，可以用<code>defaultProps</code>来设置默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TodoItem.defaultProps=&#123;</span><br><span class=\"line\">  test: <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-ref获取元素DOM节点-不推荐\"><a href=\"#3-ref获取元素DOM节点-不推荐\" class=\"headerlink\" title=\"3.ref获取元素DOM节点(不推荐)\"></a>3.ref获取元素DOM节点(不推荐)</h2><p>使用<code>ref</code>将当前的<code>input</code>节点绑定到<code>this.input</code>对象上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  ref=&#123;(input) =&gt; &#123;<span class=\"keyword\">this</span>.input = input&#125;&#125;</span><br><span class=\"line\">&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在函数方法中可调用<code>this.input</code>来获取这个节点的相关属性、方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.input.props.value;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ref方式去操作DOM可能会因为<code>setState</code>方法的异步导致数据错误。<code>setState</code>方法提供第二个参数，这个参数是一个函数，在执行完异步之后执行，可以将ref操作放到这里执行</p>\n</blockquote>\n<h2 id=\"4-React声明周期函数\"><a href=\"#4-React声明周期函数\" class=\"headerlink\" title=\"4.React声明周期函数\"></a>4.React声明周期函数</h2><p>生命周期函数指在某一个时刻被自动调用执行的函数<br><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g177dll2lzj21830ncqbt.jpg\" alt=\"a71efaafly1g177dll2lzj21830ncqbt.jpg\"></p>\n<h3 id=\"4-1-Mounting\"><a href=\"#4-1-Mounting\" class=\"headerlink\" title=\"4.1 Mounting\"></a>4.1 Mounting</h3><p><code>componentWillMount</code> 在组件即将被挂载之前执行，只会执行一次</p>\n<p><code>componentDidMount</code> 在组件被加载后执行，只会执行一次，在此可以调用AJAX请求</p>\n<h3 id=\"4-2-Updation\"><a href=\"#4-2-Updation\" class=\"headerlink\" title=\"4.2 Updation\"></a>4.2 Updation</h3><p><code>componentWillReceiveProps</code> 当一个组件从父组件接收了参数，只要父组件的render函数被执行了，该函数就会被执行（第一次出现在父组件中不会被执行，如果这个组件之前已经存在于父组件中，才会执行）</p>\n<p><code>shouldComponentUpdate</code> 在组件即将被更新前执行，如果返回false，就会阻止数据更新</p>\n<p><code>componentWillUpdate</code> 组件被更新之前会被执行，但是在shouldComponentUpdate之后执行，如果shouldComponeUpdate返回true才会被执行   </p>\n<p><code>componentDidUpdate</code> 组件更新后会被执行</p>\n<h3 id=\"4-3-Unmounting\"><a href=\"#4-3-Unmounting\" class=\"headerlink\" title=\"4.3 Unmounting\"></a>4.3 Unmounting</h3><p><code>componentWillUnmount</code> 当组件即将被移出前自动执行</p>\n<h3 id=\"4-4-应用\"><a href=\"#4-4-应用\" class=\"headerlink\" title=\"4.4 应用\"></a>4.4 应用</h3><blockquote>\n<p>shouldComponentUpdate</p>\n</blockquote>\n<p><code>shouldComponentUpdate</code>可以传入两个参数，一个<code>nextProps</code>一个<code>nextState</code>，表示父组件改变时，即将顺应改变的子组件的props值和state值。当父组件发生执行render函数时，子组件也会重新render，此时只要使用该生命周期函数，通过判断即将更新的props和state的值，就可以选择子组件重新渲染与否，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(nextProps.content !== <span class=\"keyword\">this</span>.props.content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-在React中使用axios\"><a href=\"#5-在React中使用axios\" class=\"headerlink\" title=\"5. 在React中使用axios\"></a>5. 在React中使用axios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\">axios.get().then().catch()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-React中的过度动画\"><a href=\"#6-React中的过度动画\" class=\"headerlink\" title=\"6. React中的过度动画\"></a>6. React中的过度动画</h2><p>安装 <code>react-transtion-group</code> 一个React动画专用的动画库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-transtion-group</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-CSSTranstion的使用\"><a href=\"#6-1-CSSTranstion的使用\" class=\"headerlink\" title=\"6.1 CSSTranstion的使用\"></a>6.1 CSSTranstion的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CSSTranstion &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">&lt;CSSTransition</span><br><span class=\"line\">  <span class=\"keyword\">in</span>=&#123;<span class=\"keyword\">this</span>.state.show&#125; <span class=\"comment\">// 动画进入时的判断</span></span><br><span class=\"line\">  timeout=&#123;<span class=\"number\">1000</span>&#125;  <span class=\"comment\">// 动画执行的时间</span></span><br><span class=\"line\">  classNames=<span class=\"string\">'fade'</span> <span class=\"comment\">// 过长动画的css的前缀，如下面的'.fade-enter' 的前缀 'fade-'</span></span><br><span class=\"line\">  unmountOnExit <span class=\"comment\">// 动画执行结束后移除</span></span><br><span class=\"line\">  onEntered=&#123;(el)=&gt;&#123;el.style.color = <span class=\"string\">'blue'</span>&#125;&#125; <span class=\"comment\">// 动画进入后执行的钩子函数</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;div&gt;Hello&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>CSSTransition&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>入场动画的挂载的class: </p>\n<p> <code>.fade-enter</code> 入场动画第一个时刻，但是还未入场，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>.fade-enter-active</code> 入场动画的第二个时刻，到入场动画执行完成之前的一个时刻，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease-in</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>.fade-enter-done</code> 当整个过场动画执行完成之后执行，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter-done</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出场动画的挂载的class:<br> <code>.fade-exit</code>、<code>fade-exit-active</code>、<code>fade-exit-done</code> 跟入场动画的作用相似</p>\n</li>\n</ol>\n<h3 id=\"6-2-apear参数\"><a href=\"#6-2-apear参数\" class=\"headerlink\" title=\"6.2 apear参数\"></a>6.2 apear参数</h3><p>在 <code>&lt;CSSTransition&gt;</code> 标签中传入一个 <code>appear={true}</code> 就会在元素上添加额外的 <code>appear</code> class，这个apper可以让元素在加载入页面的实行就执行相关的进入页面的动画，假如我们设定了一个元素进入的动画，元素在加载进页面的时候是出于显示状态，则进入动画不会被执行，只有让动画消失再出现的时候才会被执行。如果我们想要元素在被加载进页面的时候就执行进入动画，就可以开启 <code>appear</code> 参数，同时在css中这么设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>, <span class=\"selector-class\">.fade-appear</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span> <span class=\"selector-class\">.fade-appear-active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease-in</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-TransitionGroup\"><a href=\"#6-3-TransitionGroup\" class=\"headerlink\" title=\"6.3 TransitionGroup\"></a>6.3 TransitionGroup</h3><p>假如我们要循环生成一些列表DOM，就可以用 <code>TransitionGroup</code> 来实现多个元素的切换动画效果，只需要在列表外层加一个 <code>&lt;TransitionGroup&gt;</code> 标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CSSTransition, TransitionGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TransitionGroup&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;CSSTransition</span><br><span class=\"line\">          timeout=&#123;<span class=\"number\">1000</span>&#125;</span><br><span class=\"line\">          classNames=<span class=\"string\">'fade'</span></span><br><span class=\"line\">          key=&#123;index&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;div&gt;&#123;item&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>CSSTransition&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/TransitionGroup&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"1-propTypes属性强校验\"><a href=\"#1-propTypes属性强校验\" class=\"headerlink\" title=\"1.propTypes属性强校验\"></a>1.propTypes属性强校验</h2><p>为避免在父组件向子组件传值的过程中传入意外值，如将<code>propTyopes</code>设置为止接收字符串，则父级不能向子级传递方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>; <span class=\"comment\">// 引入</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;...&#125;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">TodoItem.protoTypes = &#123;</span><br><span class=\"line\">  content: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), <span class=\"comment\">// 可以设置两种类型</span></span><br><span class=\"line\">  deleteItem: PropTypes.func,</span><br><span class=\"line\">  index: PropTypes.number,</span><br><span class=\"line\">  test: PropTypes.string.isRequired, <span class=\"comment\">// 必须要求传递test参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-defatltProps设置属性默认值\"><a href=\"#2-defatltProps设置属性默认值\" class=\"headerlink\" title=\"2.defatltProps设置属性默认值\"></a>2.defatltProps设置属性默认值</h2><p>如果父组件没有向子组件传递某个值，但是在子组件中调用了这个值，可以用<code>defaultProps</code>来设置默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TodoItem.defaultProps=&#123;</span><br><span class=\"line\">  test: <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-ref获取元素DOM节点-不推荐\"><a href=\"#3-ref获取元素DOM节点-不推荐\" class=\"headerlink\" title=\"3.ref获取元素DOM节点(不推荐)\"></a>3.ref获取元素DOM节点(不推荐)</h2><p>使用<code>ref</code>将当前的<code>input</code>节点绑定到<code>this.input</code>对象上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  ref=&#123;(input) =&gt; &#123;<span class=\"keyword\">this</span>.input = input&#125;&#125;</span><br><span class=\"line\">&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在函数方法中可调用<code>this.input</code>来获取这个节点的相关属性、方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.input.props.value;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ref方式去操作DOM可能会因为<code>setState</code>方法的异步导致数据错误。<code>setState</code>方法提供第二个参数，这个参数是一个函数，在执行完异步之后执行，可以将ref操作放到这里执行</p>\n</blockquote>\n<h2 id=\"4-React声明周期函数\"><a href=\"#4-React声明周期函数\" class=\"headerlink\" title=\"4.React声明周期函数\"></a>4.React声明周期函数</h2><p>生命周期函数指在某一个时刻被自动调用执行的函数<br><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g177dll2lzj21830ncqbt.jpg\" alt=\"a71efaafly1g177dll2lzj21830ncqbt.jpg\"></p>\n<h3 id=\"4-1-Mounting\"><a href=\"#4-1-Mounting\" class=\"headerlink\" title=\"4.1 Mounting\"></a>4.1 Mounting</h3><p><code>componentWillMount</code> 在组件即将被挂载之前执行，只会执行一次</p>\n<p><code>componentDidMount</code> 在组件被加载后执行，只会执行一次，在此可以调用AJAX请求</p>\n<h3 id=\"4-2-Updation\"><a href=\"#4-2-Updation\" class=\"headerlink\" title=\"4.2 Updation\"></a>4.2 Updation</h3><p><code>componentWillReceiveProps</code> 当一个组件从父组件接收了参数，只要父组件的render函数被执行了，该函数就会被执行（第一次出现在父组件中不会被执行，如果这个组件之前已经存在于父组件中，才会执行）</p>\n<p><code>shouldComponentUpdate</code> 在组件即将被更新前执行，如果返回false，就会阻止数据更新</p>\n<p><code>componentWillUpdate</code> 组件被更新之前会被执行，但是在shouldComponentUpdate之后执行，如果shouldComponeUpdate返回true才会被执行   </p>\n<p><code>componentDidUpdate</code> 组件更新后会被执行</p>\n<h3 id=\"4-3-Unmounting\"><a href=\"#4-3-Unmounting\" class=\"headerlink\" title=\"4.3 Unmounting\"></a>4.3 Unmounting</h3><p><code>componentWillUnmount</code> 当组件即将被移出前自动执行</p>\n<h3 id=\"4-4-应用\"><a href=\"#4-4-应用\" class=\"headerlink\" title=\"4.4 应用\"></a>4.4 应用</h3><blockquote>\n<p>shouldComponentUpdate</p>\n</blockquote>\n<p><code>shouldComponentUpdate</code>可以传入两个参数，一个<code>nextProps</code>一个<code>nextState</code>，表示父组件改变时，即将顺应改变的子组件的props值和state值。当父组件发生执行render函数时，子组件也会重新render，此时只要使用该生命周期函数，通过判断即将更新的props和state的值，就可以选择子组件重新渲染与否，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(nextProps.content !== <span class=\"keyword\">this</span>.props.content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-在React中使用axios\"><a href=\"#5-在React中使用axios\" class=\"headerlink\" title=\"5. 在React中使用axios\"></a>5. 在React中使用axios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\">axios.get().then().catch()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-React中的过度动画\"><a href=\"#6-React中的过度动画\" class=\"headerlink\" title=\"6. React中的过度动画\"></a>6. React中的过度动画</h2><p>安装 <code>react-transtion-group</code> 一个React动画专用的动画库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-transtion-group</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-CSSTranstion的使用\"><a href=\"#6-1-CSSTranstion的使用\" class=\"headerlink\" title=\"6.1 CSSTranstion的使用\"></a>6.1 CSSTranstion的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CSSTranstion &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">&lt;CSSTransition</span><br><span class=\"line\">  <span class=\"keyword\">in</span>=&#123;<span class=\"keyword\">this</span>.state.show&#125; <span class=\"comment\">// 动画进入时的判断</span></span><br><span class=\"line\">  timeout=&#123;<span class=\"number\">1000</span>&#125;  <span class=\"comment\">// 动画执行的时间</span></span><br><span class=\"line\">  classNames=<span class=\"string\">'fade'</span> <span class=\"comment\">// 过长动画的css的前缀，如下面的'.fade-enter' 的前缀 'fade-'</span></span><br><span class=\"line\">  unmountOnExit <span class=\"comment\">// 动画执行结束后移除</span></span><br><span class=\"line\">  onEntered=&#123;(el)=&gt;&#123;el.style.color = <span class=\"string\">'blue'</span>&#125;&#125; <span class=\"comment\">// 动画进入后执行的钩子函数</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;div&gt;Hello&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>CSSTransition&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>入场动画的挂载的class: </p>\n<p> <code>.fade-enter</code> 入场动画第一个时刻，但是还未入场，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>.fade-enter-active</code> 入场动画的第二个时刻，到入场动画执行完成之前的一个时刻，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease-in</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>.fade-enter-done</code> 当整个过场动画执行完成之后执行，此时挂载该CSS</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter-done</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出场动画的挂载的class:<br> <code>.fade-exit</code>、<code>fade-exit-active</code>、<code>fade-exit-done</code> 跟入场动画的作用相似</p>\n</li>\n</ol>\n<h3 id=\"6-2-apear参数\"><a href=\"#6-2-apear参数\" class=\"headerlink\" title=\"6.2 apear参数\"></a>6.2 apear参数</h3><p>在 <code>&lt;CSSTransition&gt;</code> 标签中传入一个 <code>appear={true}</code> 就会在元素上添加额外的 <code>appear</code> class，这个apper可以让元素在加载入页面的实行就执行相关的进入页面的动画，假如我们设定了一个元素进入的动画，元素在加载进页面的时候是出于显示状态，则进入动画不会被执行，只有让动画消失再出现的时候才会被执行。如果我们想要元素在被加载进页面的时候就执行进入动画，就可以开启 <code>appear</code> 参数，同时在css中这么设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>, <span class=\"selector-class\">.fade-appear</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span> <span class=\"selector-class\">.fade-appear-active</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease-in</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-TransitionGroup\"><a href=\"#6-3-TransitionGroup\" class=\"headerlink\" title=\"6.3 TransitionGroup\"></a>6.3 TransitionGroup</h3><p>假如我们要循环生成一些列表DOM，就可以用 <code>TransitionGroup</code> 来实现多个元素的切换动画效果，只需要在列表外层加一个 <code>&lt;TransitionGroup&gt;</code> 标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CSSTransition, TransitionGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TransitionGroup&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;CSSTransition</span><br><span class=\"line\">          timeout=&#123;<span class=\"number\">1000</span>&#125;</span><br><span class=\"line\">          classNames=<span class=\"string\">'fade'</span></span><br><span class=\"line\">          key=&#123;index&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;div&gt;&#123;item&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>CSSTransition&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/TransitionGroup&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"React学习笔记03：Redux入门","date":"2019-05-01T13:54:05.000Z","_content":"# 02.redux概念\n\n![](http://ww1.sinaimg.cn/large/a71efaafly1g191kj6wkej20rj0icjxn.jpg)\n\n图书馆模型：\n- React Components：借书的用户\n- Action Creators：借书说的话（借哪本书）\n- Store：图书管理员\n- Reducers（减速器，还原剂 ）：记录本\n\n# 03.使用AntDesign\n> 示例：./03.AntDesign-TodoList\nhttps://ant.design/docs/react/introduce-cn\n\n# 04.Redux的创建与使用\n\n## 文件结构\n```\nsrc\n├── index.js\n├── TodoList.js\n├── store\n|   ├── index.js\n|   ├── reducer.js\n|   ├── actionCreator.js\n└── └── actionTypes.js\n```\n\n## 安装Redux\n> yarn add redux\n\n## 创建Reducer和Store\n\n在这一步中我们创建一个Reducer去生成一个存放数据的位置，再把Reducer交给Store。\n\n```javascript\n// .store/index.js\nimport { createStore } from 'redux'\nimport reducer from './reducer'\n\nconst store = createStore(reducer);\n\nexport store;\n```\n\n```javascript\n// ./store/reducer.js\nconst defaultState ={\n  // 在此初始化rudecuer中的数据\n}\n\nexport default (state = defaultState, action) => {\n  return state;\n  // state 存放数据（存放图书馆里所有书的信息）\n}\n```\n\n## 在组件中使用Redux中保存的数据\n1. 在组件中导入store文件的位置\n    ```javascript\n    import store from '../04.Redux/store.js';\n    ```\n2. 在组件中可以使用`store.getState()`获取数据\n    ```javascript\n    // 将store中的数据绑定在state上\n    constructor(props){     \n      super(props);\n      this.state = store.getState()\n    }\n    ```\n\n# 05.Action和Reducer的编写\n\n## 使用Redux DevTools\n在创建store的文件下，添加一句代码\n```diff\nconst store = createStore(\n  reducer,\n+ window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n```\n\n## 组件中直接请求更改数据\n\n### 1.组件发送修改请求action\n\n在组件中可以直接创建一个`action`来请求更改Store中的数据，但是这个`action`必须符合规范，之后组件可以通过调用`store.dispatch(action)`方法，把`action`传递给`Store` \n\n拿TodoList项目来说，当用户在文本框内输入了文字，会触发`onChange`而调用`handleInputChange`方法，此时在方法中要向Store中发送一个修改请求，如下：\n```javascript\nhandleInputChange(e) {\n  const action = {\n    type: 'change_input_value',\n    value: e.target.value\n  }\n  store.dispatch(action)\n}\n```\n\n### 2.Store转发请求给Reducer\n\nStore接受到一个`action`后，会将 **当前的数据（previousState）** 和 **操作指令（action）** 转发给Reducer（这就是在`reducer.js`中，要接收的两个变量），这一步是自动执行的。\n\n\n### 3.Reducers处理数据\n\nReducers接收到当前的数据（previousState）和操作的指令（action）后，会将它们对并且处理数据，之后将新的数据（newState）传回给Store。\n\n如在TodoList示例中，在Reducers中设置一个`change_input_value`的判断方法，去设置数据的方法：\n\n```javascript\n// ./store/reducer.js\n\nexport default (state = defaultState, action) => {\n  // state：store上一次存储的数据，action指的是用户传入的那句话\n  console.log(state, action);\n\n  // 查看用户的指令是什么\n  if (action.type === 'change_input_value') {\n    // 对previousState进行一次深拷贝\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.inputValue = action.value;\n    return newState;\n  }\n\n  return state;\n}\n```\n\n> 在此要注意的是：reducer可以接收state，但是绝对不能修改state，必须对state进行深拷贝后再处理数据。\n\n### 4.Store拿到Reducer的处理结果\n\nStore拿到Reducer的处理结果后，会将旧的数据替换为新的数据，这个阶段Store并未将数据交给组件，需要组件去自我感知数据发生了变化并自行更新界面。\n\n### 5.组件感知Store中数据变化\n\n在组件中的`constror`中调用`store.subscribe()`设置一个事件订阅，它的参数为个方法函数，用来检查store中的数据（state）是否发生了变化，如果发生了变化，就会调用参数中传入的方法，从而更新组件state中的数据，如下：\n\n```javascript\nconstructor() {\n  ... ...\n  // 注意this绑定（在设置订阅前绑定this）\n  this.handleStoreChange = this.handleStoreChange.bind(this)\n  // 订阅store的改变\n  store.subscribe(this.handleStoreChange)\n  ... ...\n}\n\n... ...\n\nhandleStoreChange() {\n  // 组件感知到store数据变化后更新数据\n  this.setState(store.getState());\n}\n```\n\n# 06.ActionType的拆分\n\n在`./store`目录下创建actionTypes来存放action的命名\n\n```javascript\n// actionTypes.js\nexport const CHANGE_INPUT_VALUE = 'change_input_value';\nexport const ADD_TODO_ITEM = 'add_todo_item';\nexport const DELETE_TODO_ITEM = 'delete_todo_item';\n```\n\n之后将`actionTypes.js`中的变量分别导入`TodoList.js`和`ruducer.js`中，之后在定义`action`时，调用变量即可\n\n```javascript\n// reducer.js\nimport { CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM } from './actionTypes'\n```\n\n# 07.使用ActionCreator统一创建action\n\n我们按照 [组件中直接请求更改数据](###组件中直接请求更改数据) 的方法直接在业务逻辑中创建action会导致代码变得混乱，为了统一，我们将创建action的方法写入`./store/actionCreator`文件下，结合`actionTypes`统一创建action，然后再在业务逻辑中调用。\n\n```javascript\n// actionCreator.js\nimport { CHANGE_INPUT_VALUE } from './actionTypes'\n\nexport const getInputChangeAction = (value) => ({\n  type: CHANGE_INPUT_VALUE,\n  value\n})\n```\n\n```javascript\n// Todolist.js\nimport { getInputChangeAction } from './store/actionCreator'\n\n... ...\n\nhandleInputChange(e) {\n  const action = getInputChangeAction(e.target.value);\n  store.dispatch(action)\n}\n```\n\n# 09. 知识点补充\n\n## 总流程\n1. 在 `actionTypes.js` 中创建变量存放action的操作类型，并向外暴露出变量名，提供给 `actionCreator.js` 和 `reducer.js` 调用。\n2. 在 `actionCreator.js` 中集中编写生成action对象，设置action对象的类型以及传入的数据名称，向外暴露该对象，供组件在业务逻辑代码部分调取使用。\n3. 在 `reducer.js` 判断某个action的type，编写与之对应的数据操作，并返回给store。\n4. 在组件业务逻辑代码中调用 `actionCreator.js` 提供的方法，生成一个action，并利用 `store.dispatch()` 向store发送一个action。\n\n```\n文件依赖关系:\n\nactionTypes.js ──[actionType]── actionCreator.js ──[actionObj]── component.js\n            |\n            └────[actionType]── reducer.js\n```\n\n## 注意事项\n1. store是唯一的\n2. 只有store才能变更自己的内容\n3. Reducer必须是纯函数：纯函数指的是，给定固定的输入，就一定会有固定的输出，而且不会有任何副作用\n\n\n## 核心API\n`createStore`: 创建store\n\n`store.dispatch`: 派发action\n\n`store.getState`: 获取store中的数据内容\n\n`store.subscribe`: 订阅stote中的改变","source":"_posts/2019/React学习笔记03：Redux入门.md","raw":"---\ntitle: React学习笔记03：Redux入门\ntags: [React基础教程, Redux]\ncategories:\n  - Front\n  - React\ndate: 2019-05-01 21:54:05\n---\n# 02.redux概念\n\n![](http://ww1.sinaimg.cn/large/a71efaafly1g191kj6wkej20rj0icjxn.jpg)\n\n图书馆模型：\n- React Components：借书的用户\n- Action Creators：借书说的话（借哪本书）\n- Store：图书管理员\n- Reducers（减速器，还原剂 ）：记录本\n\n# 03.使用AntDesign\n> 示例：./03.AntDesign-TodoList\nhttps://ant.design/docs/react/introduce-cn\n\n# 04.Redux的创建与使用\n\n## 文件结构\n```\nsrc\n├── index.js\n├── TodoList.js\n├── store\n|   ├── index.js\n|   ├── reducer.js\n|   ├── actionCreator.js\n└── └── actionTypes.js\n```\n\n## 安装Redux\n> yarn add redux\n\n## 创建Reducer和Store\n\n在这一步中我们创建一个Reducer去生成一个存放数据的位置，再把Reducer交给Store。\n\n```javascript\n// .store/index.js\nimport { createStore } from 'redux'\nimport reducer from './reducer'\n\nconst store = createStore(reducer);\n\nexport store;\n```\n\n```javascript\n// ./store/reducer.js\nconst defaultState ={\n  // 在此初始化rudecuer中的数据\n}\n\nexport default (state = defaultState, action) => {\n  return state;\n  // state 存放数据（存放图书馆里所有书的信息）\n}\n```\n\n## 在组件中使用Redux中保存的数据\n1. 在组件中导入store文件的位置\n    ```javascript\n    import store from '../04.Redux/store.js';\n    ```\n2. 在组件中可以使用`store.getState()`获取数据\n    ```javascript\n    // 将store中的数据绑定在state上\n    constructor(props){     \n      super(props);\n      this.state = store.getState()\n    }\n    ```\n\n# 05.Action和Reducer的编写\n\n## 使用Redux DevTools\n在创建store的文件下，添加一句代码\n```diff\nconst store = createStore(\n  reducer,\n+ window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n```\n\n## 组件中直接请求更改数据\n\n### 1.组件发送修改请求action\n\n在组件中可以直接创建一个`action`来请求更改Store中的数据，但是这个`action`必须符合规范，之后组件可以通过调用`store.dispatch(action)`方法，把`action`传递给`Store` \n\n拿TodoList项目来说，当用户在文本框内输入了文字，会触发`onChange`而调用`handleInputChange`方法，此时在方法中要向Store中发送一个修改请求，如下：\n```javascript\nhandleInputChange(e) {\n  const action = {\n    type: 'change_input_value',\n    value: e.target.value\n  }\n  store.dispatch(action)\n}\n```\n\n### 2.Store转发请求给Reducer\n\nStore接受到一个`action`后，会将 **当前的数据（previousState）** 和 **操作指令（action）** 转发给Reducer（这就是在`reducer.js`中，要接收的两个变量），这一步是自动执行的。\n\n\n### 3.Reducers处理数据\n\nReducers接收到当前的数据（previousState）和操作的指令（action）后，会将它们对并且处理数据，之后将新的数据（newState）传回给Store。\n\n如在TodoList示例中，在Reducers中设置一个`change_input_value`的判断方法，去设置数据的方法：\n\n```javascript\n// ./store/reducer.js\n\nexport default (state = defaultState, action) => {\n  // state：store上一次存储的数据，action指的是用户传入的那句话\n  console.log(state, action);\n\n  // 查看用户的指令是什么\n  if (action.type === 'change_input_value') {\n    // 对previousState进行一次深拷贝\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.inputValue = action.value;\n    return newState;\n  }\n\n  return state;\n}\n```\n\n> 在此要注意的是：reducer可以接收state，但是绝对不能修改state，必须对state进行深拷贝后再处理数据。\n\n### 4.Store拿到Reducer的处理结果\n\nStore拿到Reducer的处理结果后，会将旧的数据替换为新的数据，这个阶段Store并未将数据交给组件，需要组件去自我感知数据发生了变化并自行更新界面。\n\n### 5.组件感知Store中数据变化\n\n在组件中的`constror`中调用`store.subscribe()`设置一个事件订阅，它的参数为个方法函数，用来检查store中的数据（state）是否发生了变化，如果发生了变化，就会调用参数中传入的方法，从而更新组件state中的数据，如下：\n\n```javascript\nconstructor() {\n  ... ...\n  // 注意this绑定（在设置订阅前绑定this）\n  this.handleStoreChange = this.handleStoreChange.bind(this)\n  // 订阅store的改变\n  store.subscribe(this.handleStoreChange)\n  ... ...\n}\n\n... ...\n\nhandleStoreChange() {\n  // 组件感知到store数据变化后更新数据\n  this.setState(store.getState());\n}\n```\n\n# 06.ActionType的拆分\n\n在`./store`目录下创建actionTypes来存放action的命名\n\n```javascript\n// actionTypes.js\nexport const CHANGE_INPUT_VALUE = 'change_input_value';\nexport const ADD_TODO_ITEM = 'add_todo_item';\nexport const DELETE_TODO_ITEM = 'delete_todo_item';\n```\n\n之后将`actionTypes.js`中的变量分别导入`TodoList.js`和`ruducer.js`中，之后在定义`action`时，调用变量即可\n\n```javascript\n// reducer.js\nimport { CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM } from './actionTypes'\n```\n\n# 07.使用ActionCreator统一创建action\n\n我们按照 [组件中直接请求更改数据](###组件中直接请求更改数据) 的方法直接在业务逻辑中创建action会导致代码变得混乱，为了统一，我们将创建action的方法写入`./store/actionCreator`文件下，结合`actionTypes`统一创建action，然后再在业务逻辑中调用。\n\n```javascript\n// actionCreator.js\nimport { CHANGE_INPUT_VALUE } from './actionTypes'\n\nexport const getInputChangeAction = (value) => ({\n  type: CHANGE_INPUT_VALUE,\n  value\n})\n```\n\n```javascript\n// Todolist.js\nimport { getInputChangeAction } from './store/actionCreator'\n\n... ...\n\nhandleInputChange(e) {\n  const action = getInputChangeAction(e.target.value);\n  store.dispatch(action)\n}\n```\n\n# 09. 知识点补充\n\n## 总流程\n1. 在 `actionTypes.js` 中创建变量存放action的操作类型，并向外暴露出变量名，提供给 `actionCreator.js` 和 `reducer.js` 调用。\n2. 在 `actionCreator.js` 中集中编写生成action对象，设置action对象的类型以及传入的数据名称，向外暴露该对象，供组件在业务逻辑代码部分调取使用。\n3. 在 `reducer.js` 判断某个action的type，编写与之对应的数据操作，并返回给store。\n4. 在组件业务逻辑代码中调用 `actionCreator.js` 提供的方法，生成一个action，并利用 `store.dispatch()` 向store发送一个action。\n\n```\n文件依赖关系:\n\nactionTypes.js ──[actionType]── actionCreator.js ──[actionObj]── component.js\n            |\n            └────[actionType]── reducer.js\n```\n\n## 注意事项\n1. store是唯一的\n2. 只有store才能变更自己的内容\n3. Reducer必须是纯函数：纯函数指的是，给定固定的输入，就一定会有固定的输出，而且不会有任何副作用\n\n\n## 核心API\n`createStore`: 创建store\n\n`store.dispatch`: 派发action\n\n`store.getState`: 获取store中的数据内容\n\n`store.subscribe`: 订阅stote中的改变","slug":"React学习笔记03：Redux入门","published":1,"updated":"2019-11-09T13:54:35.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdx000c3w4uh4xla36o","content":"<h1 id=\"02-redux概念\"><a href=\"#02-redux概念\" class=\"headerlink\" title=\"02.redux概念\"></a>02.redux概念</h1><p><img src=\"http://ww1.sinaimg.cn/large/a71efaafly1g191kj6wkej20rj0icjxn.jpg\" alt=\"\"></p>\n<p>图书馆模型：</p>\n<ul>\n<li>React Components：借书的用户</li>\n<li>Action Creators：借书说的话（借哪本书）</li>\n<li>Store：图书管理员</li>\n<li>Reducers（减速器，还原剂 ）：记录本</li>\n</ul>\n<h1 id=\"03-使用AntDesign\"><a href=\"#03-使用AntDesign\" class=\"headerlink\" title=\"03.使用AntDesign\"></a>03.使用AntDesign</h1><blockquote>\n<p>示例：./03.AntDesign-TodoList<br><a href=\"https://ant.design/docs/react/introduce-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/introduce-cn</a></p>\n</blockquote>\n<h1 id=\"04-Redux的创建与使用\"><a href=\"#04-Redux的创建与使用\" class=\"headerlink\" title=\"04.Redux的创建与使用\"></a>04.Redux的创建与使用</h1><h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── TodoList.js</span><br><span class=\"line\">├── store</span><br><span class=\"line\">|   ├── index.js</span><br><span class=\"line\">|   ├── reducer.js</span><br><span class=\"line\">|   ├── actionCreator.js</span><br><span class=\"line\">└── └── actionTypes.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Redux\"><a href=\"#安装Redux\" class=\"headerlink\" title=\"安装Redux\"></a>安装Redux</h2><blockquote>\n<p>yarn add redux</p>\n</blockquote>\n<h2 id=\"创建Reducer和Store\"><a href=\"#创建Reducer和Store\" class=\"headerlink\" title=\"创建Reducer和Store\"></a>创建Reducer和Store</h2><p>在这一步中我们创建一个Reducer去生成一个存放数据的位置，再把Reducer交给Store。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> store;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./store/reducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultState =&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此初始化rudecuer中的数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  <span class=\"comment\">// state 存放数据（存放图书馆里所有书的信息）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在组件中使用Redux中保存的数据\"><a href=\"#在组件中使用Redux中保存的数据\" class=\"headerlink\" title=\"在组件中使用Redux中保存的数据\"></a>在组件中使用Redux中保存的数据</h2><ol>\n<li>在组件中导入store文件的位置 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../04.Redux/store.js'</span>;</span><br></pre></td></tr></table></figure></li>\n<li>在组件中可以使用<code>store.getState()</code>获取数据 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将store中的数据绑定在state上</span></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(props)&#123;     </span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = store.getState()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"05-Action和Reducer的编写\"><a href=\"#05-Action和Reducer的编写\" class=\"headerlink\" title=\"05.Action和Reducer的编写\"></a>05.Action和Reducer的编写</h1><h2 id=\"使用Redux-DevTools\"><a href=\"#使用Redux-DevTools\" class=\"headerlink\" title=\"使用Redux DevTools\"></a>使用Redux DevTools</h2><p>在创建store的文件下，添加一句代码</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\"><span class=\"addition\">+ window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件中直接请求更改数据\"><a href=\"#组件中直接请求更改数据\" class=\"headerlink\" title=\"组件中直接请求更改数据\"></a>组件中直接请求更改数据</h2><h3 id=\"1-组件发送修改请求action\"><a href=\"#1-组件发送修改请求action\" class=\"headerlink\" title=\"1.组件发送修改请求action\"></a>1.组件发送修改请求action</h3><p>在组件中可以直接创建一个<code>action</code>来请求更改Store中的数据，但是这个<code>action</code>必须符合规范，之后组件可以通过调用<code>store.dispatch(action)</code>方法，把<code>action</code>传递给<code>Store</code> </p>\n<p>拿TodoList项目来说，当用户在文本框内输入了文字，会触发<code>onChange</code>而调用<code>handleInputChange</code>方法，此时在方法中要向Store中发送一个修改请求，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleInputChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'change_input_value'</span>,</span><br><span class=\"line\">    value: e.target.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store.dispatch(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Store转发请求给Reducer\"><a href=\"#2-Store转发请求给Reducer\" class=\"headerlink\" title=\"2.Store转发请求给Reducer\"></a>2.Store转发请求给Reducer</h3><p>Store接受到一个<code>action</code>后，会将 <strong>当前的数据（previousState）</strong> 和 <strong>操作指令（action）</strong> 转发给Reducer（这就是在<code>reducer.js</code>中，要接收的两个变量），这一步是自动执行的。</p>\n<h3 id=\"3-Reducers处理数据\"><a href=\"#3-Reducers处理数据\" class=\"headerlink\" title=\"3.Reducers处理数据\"></a>3.Reducers处理数据</h3><p>Reducers接收到当前的数据（previousState）和操作的指令（action）后，会将它们对并且处理数据，之后将新的数据（newState）传回给Store。</p>\n<p>如在TodoList示例中，在Reducers中设置一个<code>change_input_value</code>的判断方法，去设置数据的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./store/reducer.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// state：store上一次存储的数据，action指的是用户传入的那句话</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(state, action);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看用户的指令是什么</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'change_input_value'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对previousState进行一次深拷贝</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">    newState.inputValue = action.value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在此要注意的是：reducer可以接收state，但是绝对不能修改state，必须对state进行深拷贝后再处理数据。</p>\n</blockquote>\n<h3 id=\"4-Store拿到Reducer的处理结果\"><a href=\"#4-Store拿到Reducer的处理结果\" class=\"headerlink\" title=\"4.Store拿到Reducer的处理结果\"></a>4.Store拿到Reducer的处理结果</h3><p>Store拿到Reducer的处理结果后，会将旧的数据替换为新的数据，这个阶段Store并未将数据交给组件，需要组件去自我感知数据发生了变化并自行更新界面。</p>\n<h3 id=\"5-组件感知Store中数据变化\"><a href=\"#5-组件感知Store中数据变化\" class=\"headerlink\" title=\"5.组件感知Store中数据变化\"></a>5.组件感知Store中数据变化</h3><p>在组件中的<code>constror</code>中调用<code>store.subscribe()</code>设置一个事件订阅，它的参数为个方法函数，用来检查store中的数据（state）是否发生了变化，如果发生了变化，就会调用参数中传入的方法，从而更新组件state中的数据，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"comment\">// 注意this绑定（在设置订阅前绑定this）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handleStoreChange = <span class=\"keyword\">this</span>.handleStoreChange.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 订阅store的改变</span></span><br><span class=\"line\">  store.subscribe(<span class=\"keyword\">this</span>.handleStoreChange)</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">handleStoreChange() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 组件感知到store数据变化后更新数据</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(store.getState());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"06-ActionType的拆分\"><a href=\"#06-ActionType的拆分\" class=\"headerlink\" title=\"06.ActionType的拆分\"></a>06.ActionType的拆分</h1><p>在<code>./store</code>目录下创建actionTypes来存放action的命名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// actionTypes.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> CHANGE_INPUT_VALUE = <span class=\"string\">'change_input_value'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO_ITEM = <span class=\"string\">'add_todo_item'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> DELETE_TODO_ITEM = <span class=\"string\">'delete_todo_item'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>之后将<code>actionTypes.js</code>中的变量分别导入<code>TodoList.js</code>和<code>ruducer.js</code>中，之后在定义<code>action</code>时，调用变量即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"07-使用ActionCreator统一创建action\"><a href=\"#07-使用ActionCreator统一创建action\" class=\"headerlink\" title=\"07.使用ActionCreator统一创建action\"></a>07.使用ActionCreator统一创建action</h1><p>我们按照 <a href=\"###组件中直接请求更改数据\">组件中直接请求更改数据</a> 的方法直接在业务逻辑中创建action会导致代码变得混乱，为了统一，我们将创建action的方法写入<code>./store/actionCreator</code>文件下，结合<code>actionTypes</code>统一创建action，然后再在业务逻辑中调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// actionCreator.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CHANGE_INPUT_VALUE &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputChangeAction = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  type: CHANGE_INPUT_VALUE,</span><br><span class=\"line\">  value</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Todolist.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputChangeAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store/actionCreator'</span></span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">handleInputChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = getInputChangeAction(e.target.value);</span><br><span class=\"line\">  store.dispatch(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"09-知识点补充\"><a href=\"#09-知识点补充\" class=\"headerlink\" title=\"09. 知识点补充\"></a>09. 知识点补充</h1><h2 id=\"总流程\"><a href=\"#总流程\" class=\"headerlink\" title=\"总流程\"></a>总流程</h2><ol>\n<li>在 <code>actionTypes.js</code> 中创建变量存放action的操作类型，并向外暴露出变量名，提供给 <code>actionCreator.js</code> 和 <code>reducer.js</code> 调用。</li>\n<li>在 <code>actionCreator.js</code> 中集中编写生成action对象，设置action对象的类型以及传入的数据名称，向外暴露该对象，供组件在业务逻辑代码部分调取使用。</li>\n<li>在 <code>reducer.js</code> 判断某个action的type，编写与之对应的数据操作，并返回给store。</li>\n<li>在组件业务逻辑代码中调用 <code>actionCreator.js</code> 提供的方法，生成一个action，并利用 <code>store.dispatch()</code> 向store发送一个action。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件依赖关系:</span><br><span class=\"line\"></span><br><span class=\"line\">actionTypes.js ──[actionType]── actionCreator.js ──[actionObj]── component.js</span><br><span class=\"line\">            |</span><br><span class=\"line\">            └────[actionType]── reducer.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>store是唯一的</li>\n<li>只有store才能变更自己的内容</li>\n<li>Reducer必须是纯函数：纯函数指的是，给定固定的输入，就一定会有固定的输出，而且不会有任何副作用</li>\n</ol>\n<h2 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h2><p><code>createStore</code>: 创建store</p>\n<p><code>store.dispatch</code>: 派发action</p>\n<p><code>store.getState</code>: 获取store中的数据内容</p>\n<p><code>store.subscribe</code>: 订阅stote中的改变</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"02-redux概念\"><a href=\"#02-redux概念\" class=\"headerlink\" title=\"02.redux概念\"></a>02.redux概念</h1><p><img src=\"http://ww1.sinaimg.cn/large/a71efaafly1g191kj6wkej20rj0icjxn.jpg\" alt=\"\"></p>\n<p>图书馆模型：</p>\n<ul>\n<li>React Components：借书的用户</li>\n<li>Action Creators：借书说的话（借哪本书）</li>\n<li>Store：图书管理员</li>\n<li>Reducers（减速器，还原剂 ）：记录本</li>\n</ul>\n<h1 id=\"03-使用AntDesign\"><a href=\"#03-使用AntDesign\" class=\"headerlink\" title=\"03.使用AntDesign\"></a>03.使用AntDesign</h1><blockquote>\n<p>示例：./03.AntDesign-TodoList<br><a href=\"https://ant.design/docs/react/introduce-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/introduce-cn</a></p>\n</blockquote>\n<h1 id=\"04-Redux的创建与使用\"><a href=\"#04-Redux的创建与使用\" class=\"headerlink\" title=\"04.Redux的创建与使用\"></a>04.Redux的创建与使用</h1><h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── TodoList.js</span><br><span class=\"line\">├── store</span><br><span class=\"line\">|   ├── index.js</span><br><span class=\"line\">|   ├── reducer.js</span><br><span class=\"line\">|   ├── actionCreator.js</span><br><span class=\"line\">└── └── actionTypes.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Redux\"><a href=\"#安装Redux\" class=\"headerlink\" title=\"安装Redux\"></a>安装Redux</h2><blockquote>\n<p>yarn add redux</p>\n</blockquote>\n<h2 id=\"创建Reducer和Store\"><a href=\"#创建Reducer和Store\" class=\"headerlink\" title=\"创建Reducer和Store\"></a>创建Reducer和Store</h2><p>在这一步中我们创建一个Reducer去生成一个存放数据的位置，再把Reducer交给Store。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> store;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./store/reducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultState =&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此初始化rudecuer中的数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  <span class=\"comment\">// state 存放数据（存放图书馆里所有书的信息）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在组件中使用Redux中保存的数据\"><a href=\"#在组件中使用Redux中保存的数据\" class=\"headerlink\" title=\"在组件中使用Redux中保存的数据\"></a>在组件中使用Redux中保存的数据</h2><ol>\n<li>在组件中导入store文件的位置 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../04.Redux/store.js'</span>;</span><br></pre></td></tr></table></figure></li>\n<li>在组件中可以使用<code>store.getState()</code>获取数据 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将store中的数据绑定在state上</span></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(props)&#123;     </span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = store.getState()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"05-Action和Reducer的编写\"><a href=\"#05-Action和Reducer的编写\" class=\"headerlink\" title=\"05.Action和Reducer的编写\"></a>05.Action和Reducer的编写</h1><h2 id=\"使用Redux-DevTools\"><a href=\"#使用Redux-DevTools\" class=\"headerlink\" title=\"使用Redux DevTools\"></a>使用Redux DevTools</h2><p>在创建store的文件下，添加一句代码</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\"><span class=\"addition\">+ window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件中直接请求更改数据\"><a href=\"#组件中直接请求更改数据\" class=\"headerlink\" title=\"组件中直接请求更改数据\"></a>组件中直接请求更改数据</h2><h3 id=\"1-组件发送修改请求action\"><a href=\"#1-组件发送修改请求action\" class=\"headerlink\" title=\"1.组件发送修改请求action\"></a>1.组件发送修改请求action</h3><p>在组件中可以直接创建一个<code>action</code>来请求更改Store中的数据，但是这个<code>action</code>必须符合规范，之后组件可以通过调用<code>store.dispatch(action)</code>方法，把<code>action</code>传递给<code>Store</code> </p>\n<p>拿TodoList项目来说，当用户在文本框内输入了文字，会触发<code>onChange</code>而调用<code>handleInputChange</code>方法，此时在方法中要向Store中发送一个修改请求，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleInputChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'change_input_value'</span>,</span><br><span class=\"line\">    value: e.target.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store.dispatch(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Store转发请求给Reducer\"><a href=\"#2-Store转发请求给Reducer\" class=\"headerlink\" title=\"2.Store转发请求给Reducer\"></a>2.Store转发请求给Reducer</h3><p>Store接受到一个<code>action</code>后，会将 <strong>当前的数据（previousState）</strong> 和 <strong>操作指令（action）</strong> 转发给Reducer（这就是在<code>reducer.js</code>中，要接收的两个变量），这一步是自动执行的。</p>\n<h3 id=\"3-Reducers处理数据\"><a href=\"#3-Reducers处理数据\" class=\"headerlink\" title=\"3.Reducers处理数据\"></a>3.Reducers处理数据</h3><p>Reducers接收到当前的数据（previousState）和操作的指令（action）后，会将它们对并且处理数据，之后将新的数据（newState）传回给Store。</p>\n<p>如在TodoList示例中，在Reducers中设置一个<code>change_input_value</code>的判断方法，去设置数据的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./store/reducer.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// state：store上一次存储的数据，action指的是用户传入的那句话</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(state, action);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看用户的指令是什么</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.type === <span class=\"string\">'change_input_value'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对previousState进行一次深拷贝</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(state));</span><br><span class=\"line\">    newState.inputValue = action.value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在此要注意的是：reducer可以接收state，但是绝对不能修改state，必须对state进行深拷贝后再处理数据。</p>\n</blockquote>\n<h3 id=\"4-Store拿到Reducer的处理结果\"><a href=\"#4-Store拿到Reducer的处理结果\" class=\"headerlink\" title=\"4.Store拿到Reducer的处理结果\"></a>4.Store拿到Reducer的处理结果</h3><p>Store拿到Reducer的处理结果后，会将旧的数据替换为新的数据，这个阶段Store并未将数据交给组件，需要组件去自我感知数据发生了变化并自行更新界面。</p>\n<h3 id=\"5-组件感知Store中数据变化\"><a href=\"#5-组件感知Store中数据变化\" class=\"headerlink\" title=\"5.组件感知Store中数据变化\"></a>5.组件感知Store中数据变化</h3><p>在组件中的<code>constror</code>中调用<code>store.subscribe()</code>设置一个事件订阅，它的参数为个方法函数，用来检查store中的数据（state）是否发生了变化，如果发生了变化，就会调用参数中传入的方法，从而更新组件state中的数据，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"comment\">// 注意this绑定（在设置订阅前绑定this）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handleStoreChange = <span class=\"keyword\">this</span>.handleStoreChange.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 订阅store的改变</span></span><br><span class=\"line\">  store.subscribe(<span class=\"keyword\">this</span>.handleStoreChange)</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">handleStoreChange() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 组件感知到store数据变化后更新数据</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(store.getState());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"06-ActionType的拆分\"><a href=\"#06-ActionType的拆分\" class=\"headerlink\" title=\"06.ActionType的拆分\"></a>06.ActionType的拆分</h1><p>在<code>./store</code>目录下创建actionTypes来存放action的命名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// actionTypes.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> CHANGE_INPUT_VALUE = <span class=\"string\">'change_input_value'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO_ITEM = <span class=\"string\">'add_todo_item'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> DELETE_TODO_ITEM = <span class=\"string\">'delete_todo_item'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>之后将<code>actionTypes.js</code>中的变量分别导入<code>TodoList.js</code>和<code>ruducer.js</code>中，之后在定义<code>action</code>时，调用变量即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"07-使用ActionCreator统一创建action\"><a href=\"#07-使用ActionCreator统一创建action\" class=\"headerlink\" title=\"07.使用ActionCreator统一创建action\"></a>07.使用ActionCreator统一创建action</h1><p>我们按照 <a href=\"###组件中直接请求更改数据\">组件中直接请求更改数据</a> 的方法直接在业务逻辑中创建action会导致代码变得混乱，为了统一，我们将创建action的方法写入<code>./store/actionCreator</code>文件下，结合<code>actionTypes</code>统一创建action，然后再在业务逻辑中调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// actionCreator.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CHANGE_INPUT_VALUE &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputChangeAction = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  type: CHANGE_INPUT_VALUE,</span><br><span class=\"line\">  value</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Todolist.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputChangeAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store/actionCreator'</span></span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\">handleInputChange(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = getInputChangeAction(e.target.value);</span><br><span class=\"line\">  store.dispatch(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"09-知识点补充\"><a href=\"#09-知识点补充\" class=\"headerlink\" title=\"09. 知识点补充\"></a>09. 知识点补充</h1><h2 id=\"总流程\"><a href=\"#总流程\" class=\"headerlink\" title=\"总流程\"></a>总流程</h2><ol>\n<li>在 <code>actionTypes.js</code> 中创建变量存放action的操作类型，并向外暴露出变量名，提供给 <code>actionCreator.js</code> 和 <code>reducer.js</code> 调用。</li>\n<li>在 <code>actionCreator.js</code> 中集中编写生成action对象，设置action对象的类型以及传入的数据名称，向外暴露该对象，供组件在业务逻辑代码部分调取使用。</li>\n<li>在 <code>reducer.js</code> 判断某个action的type，编写与之对应的数据操作，并返回给store。</li>\n<li>在组件业务逻辑代码中调用 <code>actionCreator.js</code> 提供的方法，生成一个action，并利用 <code>store.dispatch()</code> 向store发送一个action。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件依赖关系:</span><br><span class=\"line\"></span><br><span class=\"line\">actionTypes.js ──[actionType]── actionCreator.js ──[actionObj]── component.js</span><br><span class=\"line\">            |</span><br><span class=\"line\">            └────[actionType]── reducer.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>store是唯一的</li>\n<li>只有store才能变更自己的内容</li>\n<li>Reducer必须是纯函数：纯函数指的是，给定固定的输入，就一定会有固定的输出，而且不会有任何副作用</li>\n</ol>\n<h2 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h2><p><code>createStore</code>: 创建store</p>\n<p><code>store.dispatch</code>: 派发action</p>\n<p><code>store.getState</code>: 获取store中的数据内容</p>\n<p><code>store.subscribe</code>: 订阅stote中的改变</p>\n"},{"title":"Vue 中销毁 keep-alive 缓存组件及缓存组件的管理","date":"2019-10-23T14:23:53.000Z","_content":"# 1. keep-alive\n在 Vue 的组件机制中，如果在多个组件页面中来回切换，已访问的组件页面是不会被缓存的，也就是说每次切换一个组件页面再返回后，原有的组件页面仍会被重新渲染，相应的执行从 `beforeCreate` 开始的声明周期函数 。这样的话是非常浪费性能的，所以 Vue 提供了一个 [\\<keep-alive\\> 组件](https://cn.vuejs.org/v2/api/#keep-alive)，可以用于缓存组件，配合 Vue-Router 使用可以缓存页面。\n\n但是这样就存在一个问题，Vue 并没有专门的销毁缓存组件的方法，这就造成缓存的组件会一直存在，如果我们需要重新加载这个组件，或更新组件中的数据，是没有办法主动让组件及其子组件重新渲染的。\n\n# 2. 问题解决\n为了解决以上问题我们可以通过 `<keep-alive>` 组件的 `include` 属性来解决，我们先来看一下官方的释义：\n\n**`include` and `exclude`**\n\n> 2.1.0 新增\n\n`include` 和 `exclude` 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：\n\n```html\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n\n匹配首先检查组件自身的 `name` 选项，如果 `name` 选项不可用，则匹配它的局部注册名称 (父组件 `components` 选项的键值)。匿名组件不能被匹配。\n\n**简而言之，我们可以通过控制 `include` 属性的值，来控制系统缓存的组件。**\n\n# 3. 解决方案\n\n1. 使用 vuex 或者 localstroge 等全局存储方案，创建一个数组 `keepAliveArr`\n2. 将缓存组件的 name 存放于 `keepAliveArr` 数组中\n3. 将 `keepAliveArr` 绑定到 `<keep-alive>` 的 `include` 属性上\n4. 当需要删除缓存组件时，直接删除 `keepAliveArr` 中的组件 name\n5. 当需要添加缓存组件时，向 `keepAliveArr` 中添加组件的 name","source":"_posts/2019/Vue中销毁keep-alive缓存组件及缓存组件的管理.md","raw":"---\ntitle: Vue 中销毁 keep-alive 缓存组件及缓存组件的管理\ntags: [Vue]\ncategories:\n  - Front\n  - Vue\ndate: 2019-10-23 22:23:53\n---\n# 1. keep-alive\n在 Vue 的组件机制中，如果在多个组件页面中来回切换，已访问的组件页面是不会被缓存的，也就是说每次切换一个组件页面再返回后，原有的组件页面仍会被重新渲染，相应的执行从 `beforeCreate` 开始的声明周期函数 。这样的话是非常浪费性能的，所以 Vue 提供了一个 [\\<keep-alive\\> 组件](https://cn.vuejs.org/v2/api/#keep-alive)，可以用于缓存组件，配合 Vue-Router 使用可以缓存页面。\n\n但是这样就存在一个问题，Vue 并没有专门的销毁缓存组件的方法，这就造成缓存的组件会一直存在，如果我们需要重新加载这个组件，或更新组件中的数据，是没有办法主动让组件及其子组件重新渲染的。\n\n# 2. 问题解决\n为了解决以上问题我们可以通过 `<keep-alive>` 组件的 `include` 属性来解决，我们先来看一下官方的释义：\n\n**`include` and `exclude`**\n\n> 2.1.0 新增\n\n`include` 和 `exclude` 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：\n\n```html\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n\n匹配首先检查组件自身的 `name` 选项，如果 `name` 选项不可用，则匹配它的局部注册名称 (父组件 `components` 选项的键值)。匿名组件不能被匹配。\n\n**简而言之，我们可以通过控制 `include` 属性的值，来控制系统缓存的组件。**\n\n# 3. 解决方案\n\n1. 使用 vuex 或者 localstroge 等全局存储方案，创建一个数组 `keepAliveArr`\n2. 将缓存组件的 name 存放于 `keepAliveArr` 数组中\n3. 将 `keepAliveArr` 绑定到 `<keep-alive>` 的 `include` 属性上\n4. 当需要删除缓存组件时，直接删除 `keepAliveArr` 中的组件 name\n5. 当需要添加缓存组件时，向 `keepAliveArr` 中添加组件的 name","slug":"Vue中销毁keep-alive缓存组件及缓存组件的管理","published":1,"updated":"2019-11-09T14:24:30.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrdy000d3w4uhdykbx84","content":"<h1 id=\"1-keep-alive\"><a href=\"#1-keep-alive\" class=\"headerlink\" title=\"1. keep-alive\"></a>1. keep-alive</h1><p>在 Vue 的组件机制中，如果在多个组件页面中来回切换，已访问的组件页面是不会被缓存的，也就是说每次切换一个组件页面再返回后，原有的组件页面仍会被重新渲染，相应的执行从 <code>beforeCreate</code> 开始的声明周期函数 。这样的话是非常浪费性能的，所以 Vue 提供了一个 <a href=\"https://cn.vuejs.org/v2/api/#keep-alive\" target=\"_blank\" rel=\"noopener\">&lt;keep-alive&gt; 组件</a>，可以用于缓存组件，配合 Vue-Router 使用可以缓存页面。</p>\n<p>但是这样就存在一个问题，Vue 并没有专门的销毁缓存组件的方法，这就造成缓存的组件会一直存在，如果我们需要重新加载这个组件，或更新组件中的数据，是没有办法主动让组件及其子组件重新渲染的。</p>\n<h1 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"2. 问题解决\"></a>2. 问题解决</h1><p>为了解决以上问题我们可以通过 <code>&lt;keep-alive&gt;</code> 组件的 <code>include</code> 属性来解决，我们先来看一下官方的释义：</p>\n<p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>2.1.0 新增</p>\n</blockquote>\n<p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p>\n<p><strong>简而言之，我们可以通过控制 <code>include</code> 属性的值，来控制系统缓存的组件。</strong></p>\n<h1 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3. 解决方案\"></a>3. 解决方案</h1><ol>\n<li>使用 vuex 或者 localstroge 等全局存储方案，创建一个数组 <code>keepAliveArr</code></li>\n<li>将缓存组件的 name 存放于 <code>keepAliveArr</code> 数组中</li>\n<li>将 <code>keepAliveArr</code> 绑定到 <code>&lt;keep-alive&gt;</code> 的 <code>include</code> 属性上</li>\n<li>当需要删除缓存组件时，直接删除 <code>keepAliveArr</code> 中的组件 name</li>\n<li>当需要添加缓存组件时，向 <code>keepAliveArr</code> 中添加组件的 name</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-keep-alive\"><a href=\"#1-keep-alive\" class=\"headerlink\" title=\"1. keep-alive\"></a>1. keep-alive</h1><p>在 Vue 的组件机制中，如果在多个组件页面中来回切换，已访问的组件页面是不会被缓存的，也就是说每次切换一个组件页面再返回后，原有的组件页面仍会被重新渲染，相应的执行从 <code>beforeCreate</code> 开始的声明周期函数 。这样的话是非常浪费性能的，所以 Vue 提供了一个 <a href=\"https://cn.vuejs.org/v2/api/#keep-alive\" target=\"_blank\" rel=\"noopener\">&lt;keep-alive&gt; 组件</a>，可以用于缓存组件，配合 Vue-Router 使用可以缓存页面。</p>\n<p>但是这样就存在一个问题，Vue 并没有专门的销毁缓存组件的方法，这就造成缓存的组件会一直存在，如果我们需要重新加载这个组件，或更新组件中的数据，是没有办法主动让组件及其子组件重新渲染的。</p>\n<h1 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"2. 问题解决\"></a>2. 问题解决</h1><p>为了解决以上问题我们可以通过 <code>&lt;keep-alive&gt;</code> 组件的 <code>include</code> 属性来解决，我们先来看一下官方的释义：</p>\n<p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>2.1.0 新增</p>\n</blockquote>\n<p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p>\n<p><strong>简而言之，我们可以通过控制 <code>include</code> 属性的值，来控制系统缓存的组件。</strong></p>\n<h1 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3. 解决方案\"></a>3. 解决方案</h1><ol>\n<li>使用 vuex 或者 localstroge 等全局存储方案，创建一个数组 <code>keepAliveArr</code></li>\n<li>将缓存组件的 name 存放于 <code>keepAliveArr</code> 数组中</li>\n<li>将 <code>keepAliveArr</code> 绑定到 <code>&lt;keep-alive&gt;</code> 的 <code>include</code> 属性上</li>\n<li>当需要删除缓存组件时，直接删除 <code>keepAliveArr</code> 中的组件 name</li>\n<li>当需要添加缓存组件时，向 <code>keepAliveArr</code> 中添加组件的 name</li>\n</ol>\n"},{"title":"SVN快速使用指南","date":"2019-08-06T08:34:44.000Z","_content":"# 1.svn的安装\n\nsvn 需要安装 sliksvn 才能在命令行中使用 `svn` 指令\n\n```sh\nsvn --version\n```\n# 2.svn服务指令\n\n## 2.1 创建指令\n\n**​指令：**\n\n```sh\nsvnadmin create [Path]\n```\n**创建出的目录：**\n\n* conf/        设置权限时，需要设置conf目录\n* db/            存储svn自身的数据\n* hooks/    存放钩子，在每次提交时可以触发一定时间\n* locks/\n* format\n* README\\.txt\n\n## 2.2 启动服务器端程序\n\n### 2.2.1 将svn按指令方式启动​\n\n**指令：**\n\n```SH\nsvnserve -d -r [Path]\n```\n\\-d 表示后台执行，\\-r 标识版本根目录，服务器将会运行在 3690 端口\n\n### 2.2.2 将svn作为系统服务器启动（可后台运行）\n\n```sh\nsc create SVNService binpath= \"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\" start= auto depend= Tcpip\n```\nPS：这些指令的等号左边没空格，等号右边有一个空格\n\n# 3.svn操作指令\n\n## 3.1 取出版本（检出）\n\n创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目\n\n```sh\ncd ./DevWorkSpace/WorkSpaceSvn\nmkdir SpaceJerry\nmkdir SpaceTom\ncd SpaceJerry\nsvn checkout svn://localhost/OA\n\n>取出版本0\n```\n## 3.2 提交指令\n\n### 设置权限\n\n在服务器端存放的项目地址下，打开 `conf/svnserve.conf` 文件，并进行权限编辑，将匿名写入权限开启：\n\n```\nanon-access = write # 将匿名访问开启\n# auth-access = write\n```\n### 提交版本\n\n```sh\n# 新创建一个文件\nvi text.txt\n# 将文件加入版本控制系统\nsvn add text.txt\n# 填写日志信息并提交\nsvn commit -m \"My first commit\" text.txt\n```\n### 更新指令\n\n当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：\n\n```sh\nsvn update\n```\n# 4.解决冲突\n\n## 4.1 冲突产生的前置条件\n\nJerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；\n\n当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；\n\nTom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本**已过时。**\n\n\n\n​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。\n\n## 4.2 冲突产生的文件\n\n* \\*.main  是自己的文件\n* \\*.rx         x代表了在x版本时代码的状态\n\n# 4.权限\n\n## 4.1 开启授权访问\n\n打开 \\`conf/svnserve.conf\\` 文件，关闭匿名访问，开启授权访问\n\n```\nanon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见\nauth-access = write   # 开启授权访问\npassword-db = passwd  # 存放密码文件\nauthz-db = authz      # 存放授权信息的文件\n```\n## 4.2 设置用户\n\n打开 \\`conf/passwd\\` 文件，设置用户名与密码\n\n```\n[users]\ntom = 123456\njerry = 123456\nceshi = 123456\n```\n## 4.3 设置权限\n\n打开 \\`conf/authz\\` 文件，对用户进行分组：\n\n```\n[groups]\nkaifa = tom,jerry\n```\n分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：\n\n```\n# 设置权限目录\n[/]\n# 为用户组设置读写权限\n@kaifa = rw\n# 为单个用户设置读权限\nceshi = r\n# 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限\n* = \n```\n","source":"_posts/2019/SVN快速使用指南.md","raw":"---\ntitle: SVN快速使用指南\ndate: 2019-08-06 16:34:44\ntags: [SVN, 快速使用]\ncategories: [Git]\n---\n# 1.svn的安装\n\nsvn 需要安装 sliksvn 才能在命令行中使用 `svn` 指令\n\n```sh\nsvn --version\n```\n# 2.svn服务指令\n\n## 2.1 创建指令\n\n**​指令：**\n\n```sh\nsvnadmin create [Path]\n```\n**创建出的目录：**\n\n* conf/        设置权限时，需要设置conf目录\n* db/            存储svn自身的数据\n* hooks/    存放钩子，在每次提交时可以触发一定时间\n* locks/\n* format\n* README\\.txt\n\n## 2.2 启动服务器端程序\n\n### 2.2.1 将svn按指令方式启动​\n\n**指令：**\n\n```SH\nsvnserve -d -r [Path]\n```\n\\-d 表示后台执行，\\-r 标识版本根目录，服务器将会运行在 3690 端口\n\n### 2.2.2 将svn作为系统服务器启动（可后台运行）\n\n```sh\nsc create SVNService binpath= \"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\" start= auto depend= Tcpip\n```\nPS：这些指令的等号左边没空格，等号右边有一个空格\n\n# 3.svn操作指令\n\n## 3.1 取出版本（检出）\n\n创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目\n\n```sh\ncd ./DevWorkSpace/WorkSpaceSvn\nmkdir SpaceJerry\nmkdir SpaceTom\ncd SpaceJerry\nsvn checkout svn://localhost/OA\n\n>取出版本0\n```\n## 3.2 提交指令\n\n### 设置权限\n\n在服务器端存放的项目地址下，打开 `conf/svnserve.conf` 文件，并进行权限编辑，将匿名写入权限开启：\n\n```\nanon-access = write # 将匿名访问开启\n# auth-access = write\n```\n### 提交版本\n\n```sh\n# 新创建一个文件\nvi text.txt\n# 将文件加入版本控制系统\nsvn add text.txt\n# 填写日志信息并提交\nsvn commit -m \"My first commit\" text.txt\n```\n### 更新指令\n\n当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：\n\n```sh\nsvn update\n```\n# 4.解决冲突\n\n## 4.1 冲突产生的前置条件\n\nJerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；\n\n当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；\n\nTom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本**已过时。**\n\n\n\n​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。\n\n## 4.2 冲突产生的文件\n\n* \\*.main  是自己的文件\n* \\*.rx         x代表了在x版本时代码的状态\n\n# 4.权限\n\n## 4.1 开启授权访问\n\n打开 \\`conf/svnserve.conf\\` 文件，关闭匿名访问，开启授权访问\n\n```\nanon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见\nauth-access = write   # 开启授权访问\npassword-db = passwd  # 存放密码文件\nauthz-db = authz      # 存放授权信息的文件\n```\n## 4.2 设置用户\n\n打开 \\`conf/passwd\\` 文件，设置用户名与密码\n\n```\n[users]\ntom = 123456\njerry = 123456\nceshi = 123456\n```\n## 4.3 设置权限\n\n打开 \\`conf/authz\\` 文件，对用户进行分组：\n\n```\n[groups]\nkaifa = tom,jerry\n```\n分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：\n\n```\n# 设置权限目录\n[/]\n# 为用户组设置读写权限\n@kaifa = rw\n# 为单个用户设置读权限\nceshi = r\n# 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限\n* = \n```\n","slug":"SVN快速使用指南","published":1,"updated":"2019-11-09T13:40:55.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxre0000h3w4u786v4jwh","content":"<h1 id=\"1-svn的安装\"><a href=\"#1-svn的安装\" class=\"headerlink\" title=\"1.svn的安装\"></a>1.svn的安装</h1><p>svn 需要安装 sliksvn 才能在命令行中使用 <code>svn</code> 指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn --version</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-svn服务指令\"><a href=\"#2-svn服务指令\" class=\"headerlink\" title=\"2.svn服务指令\"></a>2.svn服务指令</h1><h2 id=\"2-1-创建指令\"><a href=\"#2-1-创建指令\" class=\"headerlink\" title=\"2.1 创建指令\"></a>2.1 创建指令</h2><p><strong>​指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create [Path]</span><br></pre></td></tr></table></figure>\n<p><strong>创建出的目录：</strong></p>\n<ul>\n<li>conf/        设置权限时，需要设置conf目录</li>\n<li>db/            存储svn自身的数据</li>\n<li>hooks/    存放钩子，在每次提交时可以触发一定时间</li>\n<li>locks/</li>\n<li>format</li>\n<li>README.txt</li>\n</ul>\n<h2 id=\"2-2-启动服务器端程序\"><a href=\"#2-2-启动服务器端程序\" class=\"headerlink\" title=\"2.2 启动服务器端程序\"></a>2.2 启动服务器端程序</h2><h3 id=\"2-2-1-将svn按指令方式启动​\"><a href=\"#2-2-1-将svn按指令方式启动​\" class=\"headerlink\" title=\"2.2.1 将svn按指令方式启动​\"></a>2.2.1 将svn按指令方式启动​</h3><p><strong>指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r [Path]</span><br></pre></td></tr></table></figure>\n<p>-d 表示后台执行，-r 标识版本根目录，服务器将会运行在 3690 端口</p>\n<h3 id=\"2-2-2-将svn作为系统服务器启动（可后台运行）\"><a href=\"#2-2-2-将svn作为系统服务器启动（可后台运行）\" class=\"headerlink\" title=\"2.2.2 将svn作为系统服务器启动（可后台运行）\"></a>2.2.2 将svn作为系统服务器启动（可后台运行）</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc create SVNService binpath= <span class=\"string\">\"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\"</span> start= auto depend= Tcpip</span><br></pre></td></tr></table></figure>\n<p>PS：这些指令的等号左边没空格，等号右边有一个空格</p>\n<h1 id=\"3-svn操作指令\"><a href=\"#3-svn操作指令\" class=\"headerlink\" title=\"3.svn操作指令\"></a>3.svn操作指令</h1><h2 id=\"3-1-取出版本（检出）\"><a href=\"#3-1-取出版本（检出）\" class=\"headerlink\" title=\"3.1 取出版本（检出）\"></a>3.1 取出版本（检出）</h2><p>创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./DevWorkSpace/WorkSpaceSvn</span><br><span class=\"line\">mkdir SpaceJerry</span><br><span class=\"line\">mkdir SpaceTom</span><br><span class=\"line\"><span class=\"built_in\">cd</span> SpaceJerry</span><br><span class=\"line\">svn checkout svn://localhost/OA</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;取出版本0</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-提交指令\"><a href=\"#3-2-提交指令\" class=\"headerlink\" title=\"3.2 提交指令\"></a>3.2 提交指令</h2><h3 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h3><p>在服务器端存放的项目地址下，打开 <code>conf/svnserve.conf</code> 文件，并进行权限编辑，将匿名写入权限开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = write # 将匿名访问开启</span><br><span class=\"line\"># auth-access = write</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交版本\"><a href=\"#提交版本\" class=\"headerlink\" title=\"提交版本\"></a>提交版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新创建一个文件</span></span><br><span class=\"line\">vi text.txt</span><br><span class=\"line\"><span class=\"comment\"># 将文件加入版本控制系统</span></span><br><span class=\"line\">svn add text.txt</span><br><span class=\"line\"><span class=\"comment\"># 填写日志信息并提交</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"My first commit\"</span> text.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新指令\"><a href=\"#更新指令\" class=\"headerlink\" title=\"更新指令\"></a>更新指令</h3><p>当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn update</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-解决冲突\"><a href=\"#4-解决冲突\" class=\"headerlink\" title=\"4.解决冲突\"></a>4.解决冲突</h1><h2 id=\"4-1-冲突产生的前置条件\"><a href=\"#4-1-冲突产生的前置条件\" class=\"headerlink\" title=\"4.1 冲突产生的前置条件\"></a>4.1 冲突产生的前置条件</h2><p>Jerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；</p>\n<p>当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；</p>\n<p>Tom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本<strong>已过时。</strong></p>\n<p>​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。</p>\n<h2 id=\"4-2-冲突产生的文件\"><a href=\"#4-2-冲突产生的文件\" class=\"headerlink\" title=\"4.2 冲突产生的文件\"></a>4.2 冲突产生的文件</h2><ul>\n<li>*.main  是自己的文件</li>\n<li>*.rx         x代表了在x版本时代码的状态</li>\n</ul>\n<h1 id=\"4-权限\"><a href=\"#4-权限\" class=\"headerlink\" title=\"4.权限\"></a>4.权限</h1><h2 id=\"4-1-开启授权访问\"><a href=\"#4-1-开启授权访问\" class=\"headerlink\" title=\"4.1 开启授权访问\"></a>4.1 开启授权访问</h2><p>打开 `conf/svnserve.conf` 文件，关闭匿名访问，开启授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见</span><br><span class=\"line\">auth-access = write   # 开启授权访问</span><br><span class=\"line\">password-db = passwd  # 存放密码文件</span><br><span class=\"line\">authz-db = authz      # 存放授权信息的文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-设置用户\"><a href=\"#4-2-设置用户\" class=\"headerlink\" title=\"4.2 设置用户\"></a>4.2 设置用户</h2><p>打开 `conf/passwd` 文件，设置用户名与密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\">tom = 123456</span><br><span class=\"line\">jerry = 123456</span><br><span class=\"line\">ceshi = 123456</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-设置权限\"><a href=\"#4-3-设置权限\" class=\"headerlink\" title=\"4.3 设置权限\"></a>4.3 设置权限</h2><p>打开 `conf/authz` 文件，对用户进行分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">kaifa = tom,jerry</span><br></pre></td></tr></table></figure>\n<p>分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置权限目录</span><br><span class=\"line\">[/]</span><br><span class=\"line\"># 为用户组设置读写权限</span><br><span class=\"line\">@kaifa = rw</span><br><span class=\"line\"># 为单个用户设置读权限</span><br><span class=\"line\">ceshi = r</span><br><span class=\"line\"># 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限</span><br><span class=\"line\">* =</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-svn的安装\"><a href=\"#1-svn的安装\" class=\"headerlink\" title=\"1.svn的安装\"></a>1.svn的安装</h1><p>svn 需要安装 sliksvn 才能在命令行中使用 <code>svn</code> 指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn --version</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-svn服务指令\"><a href=\"#2-svn服务指令\" class=\"headerlink\" title=\"2.svn服务指令\"></a>2.svn服务指令</h1><h2 id=\"2-1-创建指令\"><a href=\"#2-1-创建指令\" class=\"headerlink\" title=\"2.1 创建指令\"></a>2.1 创建指令</h2><p><strong>​指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create [Path]</span><br></pre></td></tr></table></figure>\n<p><strong>创建出的目录：</strong></p>\n<ul>\n<li>conf/        设置权限时，需要设置conf目录</li>\n<li>db/            存储svn自身的数据</li>\n<li>hooks/    存放钩子，在每次提交时可以触发一定时间</li>\n<li>locks/</li>\n<li>format</li>\n<li>README.txt</li>\n</ul>\n<h2 id=\"2-2-启动服务器端程序\"><a href=\"#2-2-启动服务器端程序\" class=\"headerlink\" title=\"2.2 启动服务器端程序\"></a>2.2 启动服务器端程序</h2><h3 id=\"2-2-1-将svn按指令方式启动​\"><a href=\"#2-2-1-将svn按指令方式启动​\" class=\"headerlink\" title=\"2.2.1 将svn按指令方式启动​\"></a>2.2.1 将svn按指令方式启动​</h3><p><strong>指令：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r [Path]</span><br></pre></td></tr></table></figure>\n<p>-d 表示后台执行，-r 标识版本根目录，服务器将会运行在 3690 端口</p>\n<h3 id=\"2-2-2-将svn作为系统服务器启动（可后台运行）\"><a href=\"#2-2-2-将svn作为系统服务器启动（可后台运行）\" class=\"headerlink\" title=\"2.2.2 将svn作为系统服务器启动（可后台运行）\"></a>2.2.2 将svn作为系统服务器启动（可后台运行）</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc create SVNService binpath= <span class=\"string\">\"C:\\Program Files\\SlikSvn\\bin\\svnserve.exe --service -r D:\\SvnRep\"</span> start= auto depend= Tcpip</span><br></pre></td></tr></table></figure>\n<p>PS：这些指令的等号左边没空格，等号右边有一个空格</p>\n<h1 id=\"3-svn操作指令\"><a href=\"#3-svn操作指令\" class=\"headerlink\" title=\"3.svn操作指令\"></a>3.svn操作指令</h1><h2 id=\"3-1-取出版本（检出）\"><a href=\"#3-1-取出版本（检出）\" class=\"headerlink\" title=\"3.1 取出版本（检出）\"></a>3.1 取出版本（检出）</h2><p>创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./DevWorkSpace/WorkSpaceSvn</span><br><span class=\"line\">mkdir SpaceJerry</span><br><span class=\"line\">mkdir SpaceTom</span><br><span class=\"line\"><span class=\"built_in\">cd</span> SpaceJerry</span><br><span class=\"line\">svn checkout svn://localhost/OA</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;取出版本0</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-提交指令\"><a href=\"#3-2-提交指令\" class=\"headerlink\" title=\"3.2 提交指令\"></a>3.2 提交指令</h2><h3 id=\"设置权限\"><a href=\"#设置权限\" class=\"headerlink\" title=\"设置权限\"></a>设置权限</h3><p>在服务器端存放的项目地址下，打开 <code>conf/svnserve.conf</code> 文件，并进行权限编辑，将匿名写入权限开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = write # 将匿名访问开启</span><br><span class=\"line\"># auth-access = write</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交版本\"><a href=\"#提交版本\" class=\"headerlink\" title=\"提交版本\"></a>提交版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新创建一个文件</span></span><br><span class=\"line\">vi text.txt</span><br><span class=\"line\"><span class=\"comment\"># 将文件加入版本控制系统</span></span><br><span class=\"line\">svn add text.txt</span><br><span class=\"line\"><span class=\"comment\"># 填写日志信息并提交</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"My first commit\"</span> text.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新指令\"><a href=\"#更新指令\" class=\"headerlink\" title=\"更新指令\"></a>更新指令</h3><p>当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn update</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-解决冲突\"><a href=\"#4-解决冲突\" class=\"headerlink\" title=\"4.解决冲突\"></a>4.解决冲突</h1><h2 id=\"4-1-冲突产生的前置条件\"><a href=\"#4-1-冲突产生的前置条件\" class=\"headerlink\" title=\"4.1 冲突产生的前置条件\"></a>4.1 冲突产生的前置条件</h2><p>Jerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；</p>\n<p>当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；</p>\n<p>Tom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本<strong>已过时。</strong></p>\n<p>​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。</p>\n<h2 id=\"4-2-冲突产生的文件\"><a href=\"#4-2-冲突产生的文件\" class=\"headerlink\" title=\"4.2 冲突产生的文件\"></a>4.2 冲突产生的文件</h2><ul>\n<li>*.main  是自己的文件</li>\n<li>*.rx         x代表了在x版本时代码的状态</li>\n</ul>\n<h1 id=\"4-权限\"><a href=\"#4-权限\" class=\"headerlink\" title=\"4.权限\"></a>4.权限</h1><h2 id=\"4-1-开启授权访问\"><a href=\"#4-1-开启授权访问\" class=\"headerlink\" title=\"4.1 开启授权访问\"></a>4.1 开启授权访问</h2><p>打开 `conf/svnserve.conf` 文件，关闭匿名访问，开启授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见</span><br><span class=\"line\">auth-access = write   # 开启授权访问</span><br><span class=\"line\">password-db = passwd  # 存放密码文件</span><br><span class=\"line\">authz-db = authz      # 存放授权信息的文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-设置用户\"><a href=\"#4-2-设置用户\" class=\"headerlink\" title=\"4.2 设置用户\"></a>4.2 设置用户</h2><p>打开 `conf/passwd` 文件，设置用户名与密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\">tom = 123456</span><br><span class=\"line\">jerry = 123456</span><br><span class=\"line\">ceshi = 123456</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-设置权限\"><a href=\"#4-3-设置权限\" class=\"headerlink\" title=\"4.3 设置权限\"></a>4.3 设置权限</h2><p>打开 `conf/authz` 文件，对用户进行分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">kaifa = tom,jerry</span><br></pre></td></tr></table></figure>\n<p>分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置权限目录</span><br><span class=\"line\">[/]</span><br><span class=\"line\"># 为用户组设置读写权限</span><br><span class=\"line\">@kaifa = rw</span><br><span class=\"line\"># 为单个用户设置读权限</span><br><span class=\"line\">ceshi = r</span><br><span class=\"line\"># 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限</span><br><span class=\"line\">* =</span><br></pre></td></tr></table></figure>\n"},{"title":"Webpack快速配置参考","date":"2019-05-15T14:03:54.000Z","_content":"# 1. 安装与设置项目目录结构\n\n安装基础的webpack组件：\n\n```shell\nmkdir webpack-demo \ncd webpack-demo\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n```\n\n常用目录参考：\n\n```\nwebpack-demo \n|- /node_modelues\n|- /dist（存放最终输出的文件）\n|- /asset（存放HTML模板以及favoicon）\n   |- index.html\n|- /src（存放源码）\n   |- index.js（入口文件）\n   |- /js\n   |- /css\n   |- /img\n|- package.json\n|- package-lock.json\n|- webpack.common.js（webpack通用配置项）\n|- webpack.dev.js（webpack开发环境配置项）\n|- webpack.prod.js（webpack生产环境配置项）\n```\n\n# 2. 安装开发环境依赖\n\n```shell\nnpm install clean-webpack-plugin html-webpack-plugin webpack-dev-server webpack-merge -D\n\nnpm install sass-loader node-sass style-loader css-loader file-loader -D\n```\n\n简单介绍：\n- clean-webpack-plugin： 用于每次编译代码时，自动清除目录中的dist文件夹\n- html-webpack-plugin：与 clean-webpack-plugin 配合使用，可以自动生成 dist 中的 html 文件，并且通过配置可以自动导入 webpack config 中的所有 entry 文件。\n- file-loader：文件加载器\n- webpack-dev-server：webpack 开发环境服务器\n- webpack-merge：自动合并 webpack config 的生产环境配置和开发环境配置\n\n# 3. 具体配置\n\n## 3.1 package.json文件\n\n在 package.json 文件下编写 `scripts`，来快捷在 npm 环境下运行 webpack 指令：\n\n```json\n{\n  \"name\": \"app-name\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack --config webpack.prod.js\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    ... ...\n  },\n  \"dependencies\": {\n    ... ...\n  }\n}\n```\n\n## 3.2 webpack config文件\n\n使用 webpack config 多环境配置文件，可以让 webpack 在不同的编译状态下实施相对应的编译模式，如：\n\n- 在 `npm run dev` 模式下执行的是 `webpack.common.js` + `webpack.dev.js` 的设置；\n- 在 `npm run build` 模式下执行的是 `webpack.common.js` + `webpack.dev.js` 的设置。\n\n合并配置文件依赖于 `webpack-merge` 插件\n\n### webpack.common.js\n\nwebpack 的基础配置文件，将开发环境和生产环境的配置同样的项目写在该文件下：\n\n```javascript\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      title: 'Title',\n      template: './asset/index.html' // HtmlWebpackPlugin 自动生成 HTML 文件的模板\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    rules: [\n      // 图片加载器\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name: '[hash].[ext]', // 将图片以哈希值命名，如果需要使用原名则将 [hash] 改为 [name]\n            outputPath: 'images' // 将读取的图片放置在 dist/images/ 目录下\n          }\n        }]\n      },\n      // css加载器\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      },\n      // scss加载器\n      {\n        test: /\\.scss$/,\n        use: [\n            \"style-loader\",\n            \"css-loader\",\n            \"sass-loader\"\n        ]\n      }\n    ]\n  }\n};\n```\n\n### webpack.dev.js\n\n开发环境配置，主要配置热更新以及源代码映射：\n\n```javascript\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist',\n    hot: true\n  }\n})\n```\n\n### webpack.prod.js\n\n生产环境配置：\n\n```javascript\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\n\nmodule.exports = merge(common, {\n  mode: 'production'\n})\n```\n\n# 4. 编译\n\n运行开发模式：\n\n```sh\nnpm run dev\n```\n\n运行构建模式：\n\n```sh\nnpm run build\n```","source":"_posts/2019/Webpack快速配置参考.md","raw":"---\ntitle: Webpack快速配置参考\ndate: 2019-05-15 22:03:54\ntags: [Webpack]\ncategories:\n  - Front\n  - 构建工具\n---\n# 1. 安装与设置项目目录结构\n\n安装基础的webpack组件：\n\n```shell\nmkdir webpack-demo \ncd webpack-demo\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n```\n\n常用目录参考：\n\n```\nwebpack-demo \n|- /node_modelues\n|- /dist（存放最终输出的文件）\n|- /asset（存放HTML模板以及favoicon）\n   |- index.html\n|- /src（存放源码）\n   |- index.js（入口文件）\n   |- /js\n   |- /css\n   |- /img\n|- package.json\n|- package-lock.json\n|- webpack.common.js（webpack通用配置项）\n|- webpack.dev.js（webpack开发环境配置项）\n|- webpack.prod.js（webpack生产环境配置项）\n```\n\n# 2. 安装开发环境依赖\n\n```shell\nnpm install clean-webpack-plugin html-webpack-plugin webpack-dev-server webpack-merge -D\n\nnpm install sass-loader node-sass style-loader css-loader file-loader -D\n```\n\n简单介绍：\n- clean-webpack-plugin： 用于每次编译代码时，自动清除目录中的dist文件夹\n- html-webpack-plugin：与 clean-webpack-plugin 配合使用，可以自动生成 dist 中的 html 文件，并且通过配置可以自动导入 webpack config 中的所有 entry 文件。\n- file-loader：文件加载器\n- webpack-dev-server：webpack 开发环境服务器\n- webpack-merge：自动合并 webpack config 的生产环境配置和开发环境配置\n\n# 3. 具体配置\n\n## 3.1 package.json文件\n\n在 package.json 文件下编写 `scripts`，来快捷在 npm 环境下运行 webpack 指令：\n\n```json\n{\n  \"name\": \"app-name\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack --config webpack.prod.js\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    ... ...\n  },\n  \"dependencies\": {\n    ... ...\n  }\n}\n```\n\n## 3.2 webpack config文件\n\n使用 webpack config 多环境配置文件，可以让 webpack 在不同的编译状态下实施相对应的编译模式，如：\n\n- 在 `npm run dev` 模式下执行的是 `webpack.common.js` + `webpack.dev.js` 的设置；\n- 在 `npm run build` 模式下执行的是 `webpack.common.js` + `webpack.dev.js` 的设置。\n\n合并配置文件依赖于 `webpack-merge` 插件\n\n### webpack.common.js\n\nwebpack 的基础配置文件，将开发环境和生产环境的配置同样的项目写在该文件下：\n\n```javascript\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      title: 'Title',\n      template: './asset/index.html' // HtmlWebpackPlugin 自动生成 HTML 文件的模板\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    rules: [\n      // 图片加载器\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name: '[hash].[ext]', // 将图片以哈希值命名，如果需要使用原名则将 [hash] 改为 [name]\n            outputPath: 'images' // 将读取的图片放置在 dist/images/ 目录下\n          }\n        }]\n      },\n      // css加载器\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      },\n      // scss加载器\n      {\n        test: /\\.scss$/,\n        use: [\n            \"style-loader\",\n            \"css-loader\",\n            \"sass-loader\"\n        ]\n      }\n    ]\n  }\n};\n```\n\n### webpack.dev.js\n\n开发环境配置，主要配置热更新以及源代码映射：\n\n```javascript\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist',\n    hot: true\n  }\n})\n```\n\n### webpack.prod.js\n\n生产环境配置：\n\n```javascript\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\n\nmodule.exports = merge(common, {\n  mode: 'production'\n})\n```\n\n# 4. 编译\n\n运行开发模式：\n\n```sh\nnpm run dev\n```\n\n运行构建模式：\n\n```sh\nnpm run build\n```","slug":"Webpack快速配置参考","published":1,"updated":"2019-11-09T14:04:47.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxre2000j3w4ubdub29ri","content":"<h1 id=\"1-安装与设置项目目录结构\"><a href=\"#1-安装与设置项目目录结构\" class=\"headerlink\" title=\"1. 安装与设置项目目录结构\"></a>1. 安装与设置项目目录结构</h1><p>安装基础的webpack组件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo </span><br><span class=\"line\">cd webpack-demo</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>常用目录参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo </span><br><span class=\"line\">|- /node_modelues</span><br><span class=\"line\">|- /dist（存放最终输出的文件）</span><br><span class=\"line\">|- /asset（存放HTML模板以及favoicon）</span><br><span class=\"line\">   |- index.html</span><br><span class=\"line\">|- /src（存放源码）</span><br><span class=\"line\">   |- index.js（入口文件）</span><br><span class=\"line\">   |- /js</span><br><span class=\"line\">   |- /css</span><br><span class=\"line\">   |- /img</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- package-lock.json</span><br><span class=\"line\">|- webpack.common.js（webpack通用配置项）</span><br><span class=\"line\">|- webpack.dev.js（webpack开发环境配置项）</span><br><span class=\"line\">|- webpack.prod.js（webpack生产环境配置项）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-安装开发环境依赖\"><a href=\"#2-安装开发环境依赖\" class=\"headerlink\" title=\"2. 安装开发环境依赖\"></a>2. 安装开发环境依赖</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin html-webpack-plugin webpack-dev-server webpack-merge -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install sass-loader node-sass style-loader css-loader file-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍：</p>\n<ul>\n<li>clean-webpack-plugin： 用于每次编译代码时，自动清除目录中的dist文件夹</li>\n<li>html-webpack-plugin：与 clean-webpack-plugin 配合使用，可以自动生成 dist 中的 html 文件，并且通过配置可以自动导入 webpack config 中的所有 entry 文件。</li>\n<li>file-loader：文件加载器</li>\n<li>webpack-dev-server：webpack 开发环境服务器</li>\n<li>webpack-merge：自动合并 webpack config 的生产环境配置和开发环境配置</li>\n</ul>\n<h1 id=\"3-具体配置\"><a href=\"#3-具体配置\" class=\"headerlink\" title=\"3. 具体配置\"></a>3. 具体配置</h1><h2 id=\"3-1-package-json文件\"><a href=\"#3-1-package-json文件\" class=\"headerlink\" title=\"3.1 package.json文件\"></a>3.1 package.json文件</h2><p>在 package.json 文件下编写 <code>scripts</code>，来快捷在 npm 环境下运行 webpack 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"app-name\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.prod.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.dev.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-webpack-config文件\"><a href=\"#3-2-webpack-config文件\" class=\"headerlink\" title=\"3.2 webpack config文件\"></a>3.2 webpack config文件</h2><p>使用 webpack config 多环境配置文件，可以让 webpack 在不同的编译状态下实施相对应的编译模式，如：</p>\n<ul>\n<li>在 <code>npm run dev</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置；</li>\n<li>在 <code>npm run build</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置。</li>\n</ul>\n<p>合并配置文件依赖于 <code>webpack-merge</code> 插件</p>\n<h3 id=\"webpack-common-js\"><a href=\"#webpack-common-js\" class=\"headerlink\" title=\"webpack.common.js\"></a>webpack.common.js</h3><p>webpack 的基础配置文件，将开发环境和生产环境的配置同样的项目写在该文件下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./asset/index.html'</span> <span class=\"comment\">// HtmlWebpackPlugin 自动生成 HTML 文件的模板</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// 图片加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'[hash].[ext]'</span>, <span class=\"comment\">// 将图片以哈希值命名，如果需要使用原名则将 [hash] 改为 [name]</span></span><br><span class=\"line\">            outputPath: <span class=\"string\">'images'</span> <span class=\"comment\">// 将读取的图片放置在 dist/images/ 目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// css加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// scss加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"sass-loader\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-dev-js\"><a href=\"#webpack-dev-js\" class=\"headerlink\" title=\"webpack.dev.js\"></a>webpack.dev.js</h3><p>开发环境配置，主要配置热更新以及源代码映射：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-prod-js\"><a href=\"#webpack-prod-js\" class=\"headerlink\" title=\"webpack.prod.js\"></a>webpack.prod.js</h3><p>生产环境配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-编译\"><a href=\"#4-编译\" class=\"headerlink\" title=\"4. 编译\"></a>4. 编译</h1><p>运行开发模式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>运行构建模式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-安装与设置项目目录结构\"><a href=\"#1-安装与设置项目目录结构\" class=\"headerlink\" title=\"1. 安装与设置项目目录结构\"></a>1. 安装与设置项目目录结构</h1><p>安装基础的webpack组件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo </span><br><span class=\"line\">cd webpack-demo</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>常用目录参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo </span><br><span class=\"line\">|- /node_modelues</span><br><span class=\"line\">|- /dist（存放最终输出的文件）</span><br><span class=\"line\">|- /asset（存放HTML模板以及favoicon）</span><br><span class=\"line\">   |- index.html</span><br><span class=\"line\">|- /src（存放源码）</span><br><span class=\"line\">   |- index.js（入口文件）</span><br><span class=\"line\">   |- /js</span><br><span class=\"line\">   |- /css</span><br><span class=\"line\">   |- /img</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">|- package-lock.json</span><br><span class=\"line\">|- webpack.common.js（webpack通用配置项）</span><br><span class=\"line\">|- webpack.dev.js（webpack开发环境配置项）</span><br><span class=\"line\">|- webpack.prod.js（webpack生产环境配置项）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-安装开发环境依赖\"><a href=\"#2-安装开发环境依赖\" class=\"headerlink\" title=\"2. 安装开发环境依赖\"></a>2. 安装开发环境依赖</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin html-webpack-plugin webpack-dev-server webpack-merge -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install sass-loader node-sass style-loader css-loader file-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍：</p>\n<ul>\n<li>clean-webpack-plugin： 用于每次编译代码时，自动清除目录中的dist文件夹</li>\n<li>html-webpack-plugin：与 clean-webpack-plugin 配合使用，可以自动生成 dist 中的 html 文件，并且通过配置可以自动导入 webpack config 中的所有 entry 文件。</li>\n<li>file-loader：文件加载器</li>\n<li>webpack-dev-server：webpack 开发环境服务器</li>\n<li>webpack-merge：自动合并 webpack config 的生产环境配置和开发环境配置</li>\n</ul>\n<h1 id=\"3-具体配置\"><a href=\"#3-具体配置\" class=\"headerlink\" title=\"3. 具体配置\"></a>3. 具体配置</h1><h2 id=\"3-1-package-json文件\"><a href=\"#3-1-package-json文件\" class=\"headerlink\" title=\"3.1 package.json文件\"></a>3.1 package.json文件</h2><p>在 package.json 文件下编写 <code>scripts</code>，来快捷在 npm 环境下运行 webpack 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"app-name\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.prod.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.dev.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-webpack-config文件\"><a href=\"#3-2-webpack-config文件\" class=\"headerlink\" title=\"3.2 webpack config文件\"></a>3.2 webpack config文件</h2><p>使用 webpack config 多环境配置文件，可以让 webpack 在不同的编译状态下实施相对应的编译模式，如：</p>\n<ul>\n<li>在 <code>npm run dev</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置；</li>\n<li>在 <code>npm run build</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置。</li>\n</ul>\n<p>合并配置文件依赖于 <code>webpack-merge</code> 插件</p>\n<h3 id=\"webpack-common-js\"><a href=\"#webpack-common-js\" class=\"headerlink\" title=\"webpack.common.js\"></a>webpack.common.js</h3><p>webpack 的基础配置文件，将开发环境和生产环境的配置同样的项目写在该文件下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./asset/index.html'</span> <span class=\"comment\">// HtmlWebpackPlugin 自动生成 HTML 文件的模板</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// 图片加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'[hash].[ext]'</span>, <span class=\"comment\">// 将图片以哈希值命名，如果需要使用原名则将 [hash] 改为 [name]</span></span><br><span class=\"line\">            outputPath: <span class=\"string\">'images'</span> <span class=\"comment\">// 将读取的图片放置在 dist/images/ 目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// css加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// scss加载器</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"sass-loader\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-dev-js\"><a href=\"#webpack-dev-js\" class=\"headerlink\" title=\"webpack.dev.js\"></a>webpack.dev.js</h3><p>开发环境配置，主要配置热更新以及源代码映射：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-prod-js\"><a href=\"#webpack-prod-js\" class=\"headerlink\" title=\"webpack.prod.js\"></a>webpack.prod.js</h3><p>生产环境配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-编译\"><a href=\"#4-编译\" class=\"headerlink\" title=\"4. 编译\"></a>4. 编译</h1><p>运行开发模式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>运行构建模式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>"},{"title":"一段代码两张图，帮你理解JS中的原型链继承","date":"2019-10-29T14:25:57.000Z","_content":"创建一个 Animal 类，Dog 类继承与 Animal 类，同时实例化一个 Dog 类为 dog，查看其显式原型与隐式原型之间的关系：\n\n```js\nclass Animal {\n  constructor(name) {\n    this.name = name\n  }\n  eat() {\n    console.log(\"吃东西\");\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name)\n  }\n  brak() {\n    console.log(\"wang!\");\n  }\n}\n\nvar dog = new Dog(\"huahua\")\ndog.eat() // 吃东西\ndog.brak() // wang!\n\n\nconsole.log(dog.__proto__); // Dog {}\nconsole.log(Dog); // [Function: Dog]\nconsole.log(Dog.prototype); // Dog {}\nconsole.log(Dog.prototype.__proto__); // Animal {}\nconsole.log(Dog.__proto__); // [Function: Animal]\nconsole.log(Dog.__proto__.prototype); // Animal {}\nconsole.log(Dog.__proto__.__proto__); // [Function]\nconsole.log(Animal.prototype.__proto__); // {}\n```\n\n将以上的显式原型（prototype）与隐式原型（\\_\\_proto\\_\\_）转换为如下的可视关系：\n\n![](http://markdown.img.esunr.xyz/20191109222750.png)\n\n网上流行的一张图：\n\n![](http://markdown.img.esunr.xyz/20191109222853.png)","source":"_posts/2019/一段代码两张图，帮你理解JS中的原型链继承.md","raw":"---\ntitle: 一段代码两张图，帮你理解JS中的原型链继承\ntags: [JS, 面试题]\ncategories:\n  - Front\n  - JS\ndate: 2019-10-29 22:25:57\n---\n创建一个 Animal 类，Dog 类继承与 Animal 类，同时实例化一个 Dog 类为 dog，查看其显式原型与隐式原型之间的关系：\n\n```js\nclass Animal {\n  constructor(name) {\n    this.name = name\n  }\n  eat() {\n    console.log(\"吃东西\");\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name)\n  }\n  brak() {\n    console.log(\"wang!\");\n  }\n}\n\nvar dog = new Dog(\"huahua\")\ndog.eat() // 吃东西\ndog.brak() // wang!\n\n\nconsole.log(dog.__proto__); // Dog {}\nconsole.log(Dog); // [Function: Dog]\nconsole.log(Dog.prototype); // Dog {}\nconsole.log(Dog.prototype.__proto__); // Animal {}\nconsole.log(Dog.__proto__); // [Function: Animal]\nconsole.log(Dog.__proto__.prototype); // Animal {}\nconsole.log(Dog.__proto__.__proto__); // [Function]\nconsole.log(Animal.prototype.__proto__); // {}\n```\n\n将以上的显式原型（prototype）与隐式原型（\\_\\_proto\\_\\_）转换为如下的可视关系：\n\n![](http://markdown.img.esunr.xyz/20191109222750.png)\n\n网上流行的一张图：\n\n![](http://markdown.img.esunr.xyz/20191109222853.png)","slug":"一段代码两张图，帮你理解JS中的原型链继承","published":1,"updated":"2019-11-09T14:28:59.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxre5000n3w4udidy7dra","content":"<p>创建一个 Animal 类，Dog 类继承与 Animal 类，同时实例化一个 Dog 类为 dog，查看其显式原型与隐式原型之间的关系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃东西\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  brak() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wang!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">\"huahua\"</span>)</span><br><span class=\"line\">dog.eat() <span class=\"comment\">// 吃东西</span></span><br><span class=\"line\">dog.brak() <span class=\"comment\">// wang!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.__proto__); <span class=\"comment\">// Dog &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog); <span class=\"comment\">// [Function: Dog]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.prototype); <span class=\"comment\">// Dog &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.prototype.__proto__); <span class=\"comment\">// Animal &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__); <span class=\"comment\">// [Function: Animal]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__.prototype); <span class=\"comment\">// Animal &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__.__proto__); <span class=\"comment\">// [Function]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.__proto__); <span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将以上的显式原型（prototype）与隐式原型（__proto__）转换为如下的可视关系：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20191109222750.png\" alt=\"\"></p>\n<p>网上流行的一张图：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20191109222853.png\" alt=\"\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>创建一个 Animal 类，Dog 类继承与 Animal 类，同时实例化一个 Dog 类为 dog，查看其显式原型与隐式原型之间的关系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃东西\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  brak() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wang!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">\"huahua\"</span>)</span><br><span class=\"line\">dog.eat() <span class=\"comment\">// 吃东西</span></span><br><span class=\"line\">dog.brak() <span class=\"comment\">// wang!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.__proto__); <span class=\"comment\">// Dog &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog); <span class=\"comment\">// [Function: Dog]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.prototype); <span class=\"comment\">// Dog &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.prototype.__proto__); <span class=\"comment\">// Animal &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__); <span class=\"comment\">// [Function: Animal]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__.prototype); <span class=\"comment\">// Animal &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__.__proto__); <span class=\"comment\">// [Function]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.__proto__); <span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将以上的显式原型（prototype）与隐式原型（__proto__）转换为如下的可视关系：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20191109222750.png\" alt=\"\"></p>\n<p>网上流行的一张图：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20191109222853.png\" alt=\"\"></p>\n"},{"title":"使用 Element UI Select 组件的 value-key 属性，让绑定值可以为一个对象","date":"2019-11-07T14:29:53.000Z","_content":"当我们使用 Elemet UI 的选择组件进行多选时，Select 组件的绑定值是一个数组，但是数组的值只能传入 Number 类型或者 String 类型的数据，如果我们想向其中传入一个对象就会出错，如：\n\n```html\n<template>\n\t<el-select v-model=\"permissionList\" multiple placeholder=\"请选择\">\n\t\t<el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" />\n\t</el-select>\n</template>\n\n<script>\nexport default{\n\tdata() {\n\t\treturn {\n\t\t\tpermissionList: [],\n\t\t\tgroups: [{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'A组',\n\t\t\t\tpermission: 'Write'\n\t\t\t},{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'B组',\n\t\t\t\tpermission: 'Write'\n\t\t\t},{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'C组',\n\t\t\t\tpermission: 'Write'\n\t\t\t}]\n\t\t}\n\t}\n}\n</script>\n```\n\n但是这样组件在选择的时候就会出错：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019110712074016.png)\n\n同时，控制台报错：\n\n```\nvue.runtime.esm.js:619 [Vue warn]: <transition-group> children must be keyed: <ElTag>\n```\n\n我们可以发现其为缺少一个索引，翻查 elemnet-ui 的文档，可以查阅到 Select 组件有一个属性：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191107121013628.png)\n那么，我们可以为其添加一个索引的属性，这个 value-key 即为我们绑定对象的唯一标识符，如在上述的例子中，这个标识符为 `groupID`\n\n所以可以将上面的代码改动为：\n\n```diff\n<template>\n\t<el-select \n\t\tv-model=\"permissionList\" \n\t\tmultiple \n\t\tplaceholder=\"请选择\"\n+\t\tvalue-key=\"groupID\"\n\t>\n\t\t<el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" />\n\t</el-select>\n</template>\n```","source":"_posts/2019/使用ElementUISelect组件的value-key属性，让绑定值可以为一个对象.md","raw":"---\ntitle: 使用 Element UI Select 组件的 value-key 属性，让绑定值可以为一个对象\ntags: [ElementUI]\ncategories:\n  - Front\n  - Vue\ndate: 2019-11-07 22:29:53\n---\n当我们使用 Elemet UI 的选择组件进行多选时，Select 组件的绑定值是一个数组，但是数组的值只能传入 Number 类型或者 String 类型的数据，如果我们想向其中传入一个对象就会出错，如：\n\n```html\n<template>\n\t<el-select v-model=\"permissionList\" multiple placeholder=\"请选择\">\n\t\t<el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" />\n\t</el-select>\n</template>\n\n<script>\nexport default{\n\tdata() {\n\t\treturn {\n\t\t\tpermissionList: [],\n\t\t\tgroups: [{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'A组',\n\t\t\t\tpermission: 'Write'\n\t\t\t},{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'B组',\n\t\t\t\tpermission: 'Write'\n\t\t\t},{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'C组',\n\t\t\t\tpermission: 'Write'\n\t\t\t}]\n\t\t}\n\t}\n}\n</script>\n```\n\n但是这样组件在选择的时候就会出错：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019110712074016.png)\n\n同时，控制台报错：\n\n```\nvue.runtime.esm.js:619 [Vue warn]: <transition-group> children must be keyed: <ElTag>\n```\n\n我们可以发现其为缺少一个索引，翻查 elemnet-ui 的文档，可以查阅到 Select 组件有一个属性：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191107121013628.png)\n那么，我们可以为其添加一个索引的属性，这个 value-key 即为我们绑定对象的唯一标识符，如在上述的例子中，这个标识符为 `groupID`\n\n所以可以将上面的代码改动为：\n\n```diff\n<template>\n\t<el-select \n\t\tv-model=\"permissionList\" \n\t\tmultiple \n\t\tplaceholder=\"请选择\"\n+\t\tvalue-key=\"groupID\"\n\t>\n\t\t<el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" />\n\t</el-select>\n</template>\n```","slug":"使用ElementUISelect组件的value-key属性，让绑定值可以为一个对象","published":1,"updated":"2019-11-09T14:30:49.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxre8000o3w4ugk6n80kn","content":"<p>当我们使用 Elemet UI 的选择组件进行多选时，Select 组件的绑定值是一个数组，但是数组的值只能传入 Number 类型或者 String 类型的数据，如果我们想向其中传入一个对象就会出错，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">el-select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"permissionList\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in groups\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.groupID\"</span> <span class=\"attr\">:label</span>=<span class=\"string\">\"item.name\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"item\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">el-select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\tpermissionList: [],</span><br><span class=\"line\">\t\t\tgroups: [&#123;</span><br><span class=\"line\">\t\t\t\tid: 1,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'A组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\tid: 2,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'B组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\tid: 3,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'C组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这样组件在选择的时候就会出错：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019110712074016.png\" alt=\"在这里插入图片描述\"></p>\n<p>同时，控制台报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.runtime.esm.js:619 [Vue warn]: &lt;transition-group&gt; children must be keyed: &lt;ElTag&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以发现其为缺少一个索引，翻查 elemnet-ui 的文档，可以查阅到 Select 组件有一个属性：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191107121013628.png\" alt=\"在这里插入图片描述\"><br>那么，我们可以为其添加一个索引的属性，这个 value-key 即为我们绑定对象的唯一标识符，如在上述的例子中，这个标识符为 <code>groupID</code></p>\n<p>所以可以将上面的代码改动为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;el-select </span><br><span class=\"line\">\t\tv-model=\"permissionList\" </span><br><span class=\"line\">\t\tmultiple </span><br><span class=\"line\">\t\tplaceholder=\"请选择\"</span><br><span class=\"line\"><span class=\"addition\">+\t\tvalue-key=\"groupID\"</span></span><br><span class=\"line\">\t&gt;</span><br><span class=\"line\">\t\t&lt;el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" /&gt;</span><br><span class=\"line\">\t&lt;/el-select&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>当我们使用 Elemet UI 的选择组件进行多选时，Select 组件的绑定值是一个数组，但是数组的值只能传入 Number 类型或者 String 类型的数据，如果我们想向其中传入一个对象就会出错，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">el-select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"permissionList\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in groups\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.groupID\"</span> <span class=\"attr\">:label</span>=<span class=\"string\">\"item.name\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"item\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">el-select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">\t\t\tpermissionList: [],</span><br><span class=\"line\">\t\t\tgroups: [&#123;</span><br><span class=\"line\">\t\t\t\tid: 1,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'A组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\tid: 2,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'B组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;,&#123;</span><br><span class=\"line\">\t\t\t\tid: 3,</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tname: <span class=\"string\">'C组'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tpermission: <span class=\"string\">'Write'</span></span></span><br><span class=\"line\">\t\t\t&#125;]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这样组件在选择的时候就会出错：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019110712074016.png\" alt=\"在这里插入图片描述\"></p>\n<p>同时，控制台报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.runtime.esm.js:619 [Vue warn]: &lt;transition-group&gt; children must be keyed: &lt;ElTag&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以发现其为缺少一个索引，翻查 elemnet-ui 的文档，可以查阅到 Select 组件有一个属性：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191107121013628.png\" alt=\"在这里插入图片描述\"><br>那么，我们可以为其添加一个索引的属性，这个 value-key 即为我们绑定对象的唯一标识符，如在上述的例子中，这个标识符为 <code>groupID</code></p>\n<p>所以可以将上面的代码改动为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;el-select </span><br><span class=\"line\">\t\tv-model=\"permissionList\" </span><br><span class=\"line\">\t\tmultiple </span><br><span class=\"line\">\t\tplaceholder=\"请选择\"</span><br><span class=\"line\"><span class=\"addition\">+\t\tvalue-key=\"groupID\"</span></span><br><span class=\"line\">\t&gt;</span><br><span class=\"line\">\t\t&lt;el-option v-for=\"item in groups\" :key=\"item.groupID\" :label=\"item.name\" :value=\"item\" /&gt;</span><br><span class=\"line\">\t&lt;/el-select&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>"},{"title":"使用Flask-Sqlachemy操作数据库对象","date":"2019-07-22T13:26:37.000Z","_content":"# 1. Hello Flask\n\n快速开始示例：\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/', methods=[\"get\"])\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n\n```\n\n# 2. 使用数据库\n\n## 2.1 使用flask\\_sqlalchemy连接和创建数据库内容\n\n[笔记：flask数据库之Flask\\-SQLAlchemy安装及配置](https://blog.csdn.net/feilzhang/article/details/81041637)\n\n```python\n#! -*- coding:utf-8 -*-\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport pymysql\n\npymysql.install_as_MySQLdb()\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost/flask_study'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\n# 数据库模型，需要继承db.Model\nclass Role(db.Model):\n    #    定义表名\n    __tablename__ = \"roles\"\n    #     定义字段\n    #     db.Column表示一个字段\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(16), unique=True)\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(16), unique=True)\n    # db.ForeignKey标识外键\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n@app.route('/')\ndef index():\n    return 'Hello flask!'\n\nif __name__ == '__main__':\n    # 删除表\n    db.drop_all()\n\n    # 创建表\n    db.create_all()\n\n    app.run(debug=True)\n\n```\n\n## 2.2 在shell中使用ipython修改数据\n\n[笔记：flask数据库之基本操作模型建立](https://blog.csdn.net/feilzhang/article/details/81041663)\n\n注意：在ipython已经不支持python2，需要安装旧版本来获取对Python2的支持！\n\n```\n$ pip install ipython==5.4.0\nIn [5]: user = User(name=\"heima\", role_id=role.id)\n\nIn [6]: db.session.add(user)\n\nIn [7]: db.session.commit()\n\nIn [8]: user.name = 'chengxuyuan'\n\nIn [9]: db.session.commit()\n\nIn [10]: db.session.delete(user)\n\nIn [11]: db.session.commit()\n\n```\n\n## 2.3 创建关系引用\n\n[笔记：flask数据库之多对多模型演练](https://blog.csdn.net/feilzhang/article/details/81041747)\n\n```python\n# ... ...\n\ndb = SQLAlchemy(app)\n\n# 数据库模型，需要继承db.Model\nclass Role(db.Model):\n    # ... ...\n\n    # 在一的乙方，写关联（填写模型名）\n    # 表示和User模型发生了关联，增加了一个users属性\n    users = db.relationship('User', backref=\"role\")\n\n    # repr()方法显示一个可读字符串\n    def __repr__(self):\n        return '<Role: %s %s>' % (self.name, self.id)\n\nclass User(db.Model):\n    # ... ...\n    # db.ForeignKey标识外键\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    # User希望有role属性，但是这个属性的定义，需要另一个模型中定义\n    def __repr__(self):\n        return '<User: %s %s %s %s>' % (self.name, self.id, self.email, self.password)\n\n@app.route('/')\ndef index():\n    return 'Hello flask!'\n\nif __name__ == '__main__':\n    # 删除表\n    db.drop_all()\n    # 创建表\n    db.create_all()\n    app.run(debug=True)\n\n```\n\n创建了关系引用后，我们可以通过访问数据对象实例的属性来访问相关联的数据，如：\n\n```\nIn [3]: role = Role(name = \"admin\")\nIn [4]: db.session.add(role)\nIn [5]: db.session.commit()\n\n=== 完成角色创建 ===\n\nIn [6]: user1 = User(name='zs', role_id=role.id)\nIn [7]: user2 = User(name='ls', role_id=role.id)\nIn [10]: db.session.add(user1)\nIn [11]: db.session.add(user2)\nIn [12]: db.session.commit()\n\n=== 完成用户创建 ===\n\n=== 进行关联查询 ===\n\nIn [13]: role.users\nOut[13]: [<User: zs 1 None None>, <User: ls 2 None None>]\n\nIn [20]: user1.role\nOut[20]: <Role: admin 1>\n\n```\n\n## 2.4 数据库数据的查询\n\n### 常用的SQLAlchemy查询过滤器\n\n| 过滤器 | 说明 |\n| --- | --- |\n| filter() | 把过滤器添加到原查询上，返回一个新查询 |\n| filter\\_by() | 把等值过滤器添加到原查询上，返回一个新查询 |\n| limit | 使用指定的值限定原查询返回的结果 |\n| offset() | 偏移原查询返回的结果，返回一个新查询 |\n| order\\_by() | 根据指定条件对原查询结果进行排序，返回一个新查询 |\n| group\\_by() | 根据指定条件对原查询结果进行分组，返回一个新查询 |\n\n### 常用的SQLAlchemy查询执行器\n\n| 方法 | 说明 |\n| --- | --- |\n| all() | 以列表形式返回查询的所有结果 |\n| first() | 返回查询的第一个结果，如果未查到，返回None |\n| first\\_or\\_404() | 返回查询的第一个结果，如果未查到，返回404 |\n| get() | 返回指定主键对应的行，如不存在，返回None |\n| get\\_or\\_404() | 返回指定主键对应的行，如不存在，返回404 |\n| count() | 返回查询结果的数量 |\n| paginate() | 返回一个Paginate对象，它包含指定范围内的结果 |\n\n### 使用示例\n\n返回名字等于wang的所有人：\n\n```\nUser.query.filter_by(name='wang').all()\n\n```\n\nall()返回查询到的所有对象：\n\n```\nUser.query.all()\n```","source":"_posts/2019/使用Flask-Sqlachemy操作数据库对象.md","raw":"---\ntitle: 使用Flask-Sqlachemy操作数据库对象\npermalink: 使用Flask-Sqlachemy操作数据库对象\ndate: 2019-07-22 21:26:37\ntags: [Python, ORM]\ncategories: [Back, Python]\n---\n# 1. Hello Flask\n\n快速开始示例：\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/', methods=[\"get\"])\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n\n```\n\n# 2. 使用数据库\n\n## 2.1 使用flask\\_sqlalchemy连接和创建数据库内容\n\n[笔记：flask数据库之Flask\\-SQLAlchemy安装及配置](https://blog.csdn.net/feilzhang/article/details/81041637)\n\n```python\n#! -*- coding:utf-8 -*-\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport pymysql\n\npymysql.install_as_MySQLdb()\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost/flask_study'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\n# 数据库模型，需要继承db.Model\nclass Role(db.Model):\n    #    定义表名\n    __tablename__ = \"roles\"\n    #     定义字段\n    #     db.Column表示一个字段\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(16), unique=True)\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(16), unique=True)\n    # db.ForeignKey标识外键\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n@app.route('/')\ndef index():\n    return 'Hello flask!'\n\nif __name__ == '__main__':\n    # 删除表\n    db.drop_all()\n\n    # 创建表\n    db.create_all()\n\n    app.run(debug=True)\n\n```\n\n## 2.2 在shell中使用ipython修改数据\n\n[笔记：flask数据库之基本操作模型建立](https://blog.csdn.net/feilzhang/article/details/81041663)\n\n注意：在ipython已经不支持python2，需要安装旧版本来获取对Python2的支持！\n\n```\n$ pip install ipython==5.4.0\nIn [5]: user = User(name=\"heima\", role_id=role.id)\n\nIn [6]: db.session.add(user)\n\nIn [7]: db.session.commit()\n\nIn [8]: user.name = 'chengxuyuan'\n\nIn [9]: db.session.commit()\n\nIn [10]: db.session.delete(user)\n\nIn [11]: db.session.commit()\n\n```\n\n## 2.3 创建关系引用\n\n[笔记：flask数据库之多对多模型演练](https://blog.csdn.net/feilzhang/article/details/81041747)\n\n```python\n# ... ...\n\ndb = SQLAlchemy(app)\n\n# 数据库模型，需要继承db.Model\nclass Role(db.Model):\n    # ... ...\n\n    # 在一的乙方，写关联（填写模型名）\n    # 表示和User模型发生了关联，增加了一个users属性\n    users = db.relationship('User', backref=\"role\")\n\n    # repr()方法显示一个可读字符串\n    def __repr__(self):\n        return '<Role: %s %s>' % (self.name, self.id)\n\nclass User(db.Model):\n    # ... ...\n    # db.ForeignKey标识外键\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n\n    # User希望有role属性，但是这个属性的定义，需要另一个模型中定义\n    def __repr__(self):\n        return '<User: %s %s %s %s>' % (self.name, self.id, self.email, self.password)\n\n@app.route('/')\ndef index():\n    return 'Hello flask!'\n\nif __name__ == '__main__':\n    # 删除表\n    db.drop_all()\n    # 创建表\n    db.create_all()\n    app.run(debug=True)\n\n```\n\n创建了关系引用后，我们可以通过访问数据对象实例的属性来访问相关联的数据，如：\n\n```\nIn [3]: role = Role(name = \"admin\")\nIn [4]: db.session.add(role)\nIn [5]: db.session.commit()\n\n=== 完成角色创建 ===\n\nIn [6]: user1 = User(name='zs', role_id=role.id)\nIn [7]: user2 = User(name='ls', role_id=role.id)\nIn [10]: db.session.add(user1)\nIn [11]: db.session.add(user2)\nIn [12]: db.session.commit()\n\n=== 完成用户创建 ===\n\n=== 进行关联查询 ===\n\nIn [13]: role.users\nOut[13]: [<User: zs 1 None None>, <User: ls 2 None None>]\n\nIn [20]: user1.role\nOut[20]: <Role: admin 1>\n\n```\n\n## 2.4 数据库数据的查询\n\n### 常用的SQLAlchemy查询过滤器\n\n| 过滤器 | 说明 |\n| --- | --- |\n| filter() | 把过滤器添加到原查询上，返回一个新查询 |\n| filter\\_by() | 把等值过滤器添加到原查询上，返回一个新查询 |\n| limit | 使用指定的值限定原查询返回的结果 |\n| offset() | 偏移原查询返回的结果，返回一个新查询 |\n| order\\_by() | 根据指定条件对原查询结果进行排序，返回一个新查询 |\n| group\\_by() | 根据指定条件对原查询结果进行分组，返回一个新查询 |\n\n### 常用的SQLAlchemy查询执行器\n\n| 方法 | 说明 |\n| --- | --- |\n| all() | 以列表形式返回查询的所有结果 |\n| first() | 返回查询的第一个结果，如果未查到，返回None |\n| first\\_or\\_404() | 返回查询的第一个结果，如果未查到，返回404 |\n| get() | 返回指定主键对应的行，如不存在，返回None |\n| get\\_or\\_404() | 返回指定主键对应的行，如不存在，返回404 |\n| count() | 返回查询结果的数量 |\n| paginate() | 返回一个Paginate对象，它包含指定范围内的结果 |\n\n### 使用示例\n\n返回名字等于wang的所有人：\n\n```\nUser.query.filter_by(name='wang').all()\n\n```\n\nall()返回查询到的所有对象：\n\n```\nUser.query.all()\n```","slug":"使用Flask-Sqlachemy操作数据库对象","published":1,"updated":"2019-11-09T13:38:03.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxre9000s3w4u9xst2a03","content":"<h1 id=\"1-Hello-Flask\"><a href=\"#1-Hello-Flask\" class=\"headerlink\" title=\"1. Hello Flask\"></a>1. Hello Flask</h1><p>快速开始示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=[\"get\"])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-使用数据库\"><a href=\"#2-使用数据库\" class=\"headerlink\" title=\"2. 使用数据库\"></a>2. 使用数据库</h1><h2 id=\"2-1-使用flask-sqlalchemy连接和创建数据库内容\"><a href=\"#2-1-使用flask-sqlalchemy连接和创建数据库内容\" class=\"headerlink\" title=\"2.1 使用flask_sqlalchemy连接和创建数据库内容\"></a>2.1 使用flask_sqlalchemy连接和创建数据库内容</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041637\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之Flask-SQLAlchemy安装及配置</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>] = <span class=\"string\">'mysql://root:@localhost/flask_study'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库模型，需要继承db.Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#    定义表名</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"roles\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     定义字段</span></span><br><span class=\"line\">    <span class=\"comment\">#     db.Column表示一个字段</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">16</span>), unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">16</span>), unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># db.ForeignKey标识外键</span></span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello flask!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 删除表</span></span><br><span class=\"line\">    db.drop_all()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建表</span></span><br><span class=\"line\">    db.create_all()</span><br><span class=\"line\"></span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-在shell中使用ipython修改数据\"><a href=\"#2-2-在shell中使用ipython修改数据\" class=\"headerlink\" title=\"2.2 在shell中使用ipython修改数据\"></a>2.2 在shell中使用ipython修改数据</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041663\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之基本操作模型建立</a></p>\n<p>注意：在ipython已经不支持python2，需要安装旧版本来获取对Python2的支持！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython==5.4.0</span><br><span class=\"line\">In [5]: user = User(name=&quot;heima&quot;, role_id=role.id)</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: user.name = &apos;chengxuyuan&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: db.session.delete(user)</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-创建关系引用\"><a href=\"#2-3-创建关系引用\" class=\"headerlink\" title=\"2.3 创建关系引用\"></a>2.3 创建关系引用</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041747\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之多对多模型演练</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库模型，需要继承db.Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在一的乙方，写关联（填写模型名）</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示和User模型发生了关联，增加了一个users属性</span></span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">\"role\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># repr()方法显示一个可读字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role: %s %s&gt;'</span> % (self.name, self.id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ... ...</span></span><br><span class=\"line\">    <span class=\"comment\"># db.ForeignKey标识外键</span></span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># User希望有role属性，但是这个属性的定义，需要另一个模型中定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User: %s %s %s %s&gt;'</span> % (self.name, self.id, self.email, self.password)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello flask!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 删除表</span></span><br><span class=\"line\">    db.drop_all()</span><br><span class=\"line\">    <span class=\"comment\"># 创建表</span></span><br><span class=\"line\">    db.create_all()</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建了关系引用后，我们可以通过访问数据对象实例的属性来访问相关联的数据，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: role = Role(name = &quot;admin&quot;)</span><br><span class=\"line\">In [4]: db.session.add(role)</span><br><span class=\"line\">In [5]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">=== 完成角色创建 ===</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: user1 = User(name=&apos;zs&apos;, role_id=role.id)</span><br><span class=\"line\">In [7]: user2 = User(name=&apos;ls&apos;, role_id=role.id)</span><br><span class=\"line\">In [10]: db.session.add(user1)</span><br><span class=\"line\">In [11]: db.session.add(user2)</span><br><span class=\"line\">In [12]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">=== 完成用户创建 ===</span><br><span class=\"line\"></span><br><span class=\"line\">=== 进行关联查询 ===</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: role.users</span><br><span class=\"line\">Out[13]: [&lt;User: zs 1 None None&gt;, &lt;User: ls 2 None None&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: user1.role</span><br><span class=\"line\">Out[20]: &lt;Role: admin 1&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-数据库数据的查询\"><a href=\"#2-4-数据库数据的查询\" class=\"headerlink\" title=\"2.4 数据库数据的查询\"></a>2.4 数据库数据的查询</h2><h3 id=\"常用的SQLAlchemy查询过滤器\"><a href=\"#常用的SQLAlchemy查询过滤器\" class=\"headerlink\" title=\"常用的SQLAlchemy查询过滤器\"></a>常用的SQLAlchemy查询过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>filter()</td>\n<td>把过滤器添加到原查询上，返回一个新查询</td>\n</tr>\n<tr>\n<td>filter_by()</td>\n<td>把等值过滤器添加到原查询上，返回一个新查询</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>使用指定的值限定原查询返回的结果</td>\n</tr>\n<tr>\n<td>offset()</td>\n<td>偏移原查询返回的结果，返回一个新查询</td>\n</tr>\n<tr>\n<td>order_by()</td>\n<td>根据指定条件对原查询结果进行排序，返回一个新查询</td>\n</tr>\n<tr>\n<td>group_by()</td>\n<td>根据指定条件对原查询结果进行分组，返回一个新查询</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的SQLAlchemy查询执行器\"><a href=\"#常用的SQLAlchemy查询执行器\" class=\"headerlink\" title=\"常用的SQLAlchemy查询执行器\"></a>常用的SQLAlchemy查询执行器</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all()</td>\n<td>以列表形式返回查询的所有结果</td>\n</tr>\n<tr>\n<td>first()</td>\n<td>返回查询的第一个结果，如果未查到，返回None</td>\n</tr>\n<tr>\n<td>first_or_404()</td>\n<td>返回查询的第一个结果，如果未查到，返回404</td>\n</tr>\n<tr>\n<td>get()</td>\n<td>返回指定主键对应的行，如不存在，返回None</td>\n</tr>\n<tr>\n<td>get_or_404()</td>\n<td>返回指定主键对应的行，如不存在，返回404</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回查询结果的数量</td>\n</tr>\n<tr>\n<td>paginate()</td>\n<td>返回一个Paginate对象，它包含指定范围内的结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>返回名字等于wang的所有人：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.query.filter_by(name=&apos;wang&apos;).all()</span><br></pre></td></tr></table></figure>\n\n<p>all()返回查询到的所有对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.query.all()</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-Hello-Flask\"><a href=\"#1-Hello-Flask\" class=\"headerlink\" title=\"1. Hello Flask\"></a>1. Hello Flask</h1><p>快速开始示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', methods=[\"get\"])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-使用数据库\"><a href=\"#2-使用数据库\" class=\"headerlink\" title=\"2. 使用数据库\"></a>2. 使用数据库</h1><h2 id=\"2-1-使用flask-sqlalchemy连接和创建数据库内容\"><a href=\"#2-1-使用flask-sqlalchemy连接和创建数据库内容\" class=\"headerlink\" title=\"2.1 使用flask_sqlalchemy连接和创建数据库内容\"></a>2.1 使用flask_sqlalchemy连接和创建数据库内容</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041637\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之Flask-SQLAlchemy安装及配置</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>] = <span class=\"string\">'mysql://root:@localhost/flask_study'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库模型，需要继承db.Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#    定义表名</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">\"roles\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     定义字段</span></span><br><span class=\"line\">    <span class=\"comment\">#     db.Column表示一个字段</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">16</span>), unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">16</span>), unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># db.ForeignKey标识外键</span></span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello flask!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 删除表</span></span><br><span class=\"line\">    db.drop_all()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建表</span></span><br><span class=\"line\">    db.create_all()</span><br><span class=\"line\"></span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-在shell中使用ipython修改数据\"><a href=\"#2-2-在shell中使用ipython修改数据\" class=\"headerlink\" title=\"2.2 在shell中使用ipython修改数据\"></a>2.2 在shell中使用ipython修改数据</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041663\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之基本操作模型建立</a></p>\n<p>注意：在ipython已经不支持python2，需要安装旧版本来获取对Python2的支持！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ipython==5.4.0</span><br><span class=\"line\">In [5]: user = User(name=&quot;heima&quot;, role_id=role.id)</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: user.name = &apos;chengxuyuan&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: db.session.delete(user)</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-创建关系引用\"><a href=\"#2-3-创建关系引用\" class=\"headerlink\" title=\"2.3 创建关系引用\"></a>2.3 创建关系引用</h2><p><a href=\"https://blog.csdn.net/feilzhang/article/details/81041747\" target=\"_blank\" rel=\"noopener\">笔记：flask数据库之多对多模型演练</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库模型，需要继承db.Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在一的乙方，写关联（填写模型名）</span></span><br><span class=\"line\">    <span class=\"comment\"># 表示和User模型发生了关联，增加了一个users属性</span></span><br><span class=\"line\">    users = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">\"role\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># repr()方法显示一个可读字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Role: %s %s&gt;'</span> % (self.name, self.id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ... ...</span></span><br><span class=\"line\">    <span class=\"comment\"># db.ForeignKey标识外键</span></span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># User希望有role属性，但是这个属性的定义，需要另一个模型中定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User: %s %s %s %s&gt;'</span> % (self.name, self.id, self.email, self.password)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello flask!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 删除表</span></span><br><span class=\"line\">    db.drop_all()</span><br><span class=\"line\">    <span class=\"comment\"># 创建表</span></span><br><span class=\"line\">    db.create_all()</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>创建了关系引用后，我们可以通过访问数据对象实例的属性来访问相关联的数据，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: role = Role(name = &quot;admin&quot;)</span><br><span class=\"line\">In [4]: db.session.add(role)</span><br><span class=\"line\">In [5]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">=== 完成角色创建 ===</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: user1 = User(name=&apos;zs&apos;, role_id=role.id)</span><br><span class=\"line\">In [7]: user2 = User(name=&apos;ls&apos;, role_id=role.id)</span><br><span class=\"line\">In [10]: db.session.add(user1)</span><br><span class=\"line\">In [11]: db.session.add(user2)</span><br><span class=\"line\">In [12]: db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">=== 完成用户创建 ===</span><br><span class=\"line\"></span><br><span class=\"line\">=== 进行关联查询 ===</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: role.users</span><br><span class=\"line\">Out[13]: [&lt;User: zs 1 None None&gt;, &lt;User: ls 2 None None&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: user1.role</span><br><span class=\"line\">Out[20]: &lt;Role: admin 1&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-数据库数据的查询\"><a href=\"#2-4-数据库数据的查询\" class=\"headerlink\" title=\"2.4 数据库数据的查询\"></a>2.4 数据库数据的查询</h2><h3 id=\"常用的SQLAlchemy查询过滤器\"><a href=\"#常用的SQLAlchemy查询过滤器\" class=\"headerlink\" title=\"常用的SQLAlchemy查询过滤器\"></a>常用的SQLAlchemy查询过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>filter()</td>\n<td>把过滤器添加到原查询上，返回一个新查询</td>\n</tr>\n<tr>\n<td>filter_by()</td>\n<td>把等值过滤器添加到原查询上，返回一个新查询</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>使用指定的值限定原查询返回的结果</td>\n</tr>\n<tr>\n<td>offset()</td>\n<td>偏移原查询返回的结果，返回一个新查询</td>\n</tr>\n<tr>\n<td>order_by()</td>\n<td>根据指定条件对原查询结果进行排序，返回一个新查询</td>\n</tr>\n<tr>\n<td>group_by()</td>\n<td>根据指定条件对原查询结果进行分组，返回一个新查询</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的SQLAlchemy查询执行器\"><a href=\"#常用的SQLAlchemy查询执行器\" class=\"headerlink\" title=\"常用的SQLAlchemy查询执行器\"></a>常用的SQLAlchemy查询执行器</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all()</td>\n<td>以列表形式返回查询的所有结果</td>\n</tr>\n<tr>\n<td>first()</td>\n<td>返回查询的第一个结果，如果未查到，返回None</td>\n</tr>\n<tr>\n<td>first_or_404()</td>\n<td>返回查询的第一个结果，如果未查到，返回404</td>\n</tr>\n<tr>\n<td>get()</td>\n<td>返回指定主键对应的行，如不存在，返回None</td>\n</tr>\n<tr>\n<td>get_or_404()</td>\n<td>返回指定主键对应的行，如不存在，返回404</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回查询结果的数量</td>\n</tr>\n<tr>\n<td>paginate()</td>\n<td>返回一个Paginate对象，它包含指定范围内的结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>返回名字等于wang的所有人：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.query.filter_by(name=&apos;wang&apos;).all()</span><br></pre></td></tr></table></figure>\n\n<p>all()返回查询到的所有对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.query.all()</span><br></pre></td></tr></table></figure>"},{"title":"关于BFC的特性以及如何利用BFC解决margin相关的问题","date":"2019-05-22T14:07:16.000Z","_content":"# 1. 何为BFC?\n\n> 文章：https://juejin.im/post/5909db2fda2f60005d2093db#heading-8\n\nBFC概括：可以在心中记住这么一个概念———所谓的BFC就是css布局的一个概念，是一块区域，一个环境。\n\nBFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n\nFC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。\n\n常见的FC有`BFC`、`IFC`（行级格式化上下文），还有`GFC`（网格布局格式化上下文）和`FFC`（自适应格式化上下文），这里就不再展开了。\n\n# 2. 触发BFC的方式\n\n满足下列条件之一就可触发BFC\n\n1. 根元素，即HTML元素\n2. float的值不为none\n3. overflow的值不为visible\n4. display的值为inline-block、table-cell、table-caption\n5. position的值为absolute或fixed\n\n# 3. 布局规则\n\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n# 4. BFC作用\n\n1. 自适应两栏布局\n2. 可以阻止元素被浮动元素覆盖\n3. 可以包含浮动元素——清除内部浮动\n4. ~~分属于不同的BFC时可以阻止margin重叠~~\n\n# 5. BFC解决margin问题\n\n使用margin存在两种问题，一种是穿透问题，一种是折叠问题。\n\n## 5.1 穿透问题\n\n穿透问题即为子级元素的垂直方向margin会穿透父级元素，导致父级元素发生位移，如下：\n\n```html\n<div class=\"wrapper\">\n  <div class=\"inner\"></div>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n}\n.inner{\n  margin-top: 50px;\n}\n```\n\n![20190522110557.png](http://img.cdn.esunr.xyz/markdown/20190522110557.png)\n\n![20190522110624.png](http://img.cdn.esunr.xyz/markdown/20190522110624.png)\n\n## 5.2 margin折叠问题\n\nmargin折叠问题即为同属一个BFC中的垂直元素的垂直margin值在页面计算时发生了折叠而并不会累加\n\n```html\n<div class=\"wrapper\"></div>\n<div class=\"wrapper\"></div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  margin: 20px 0;\n}\n```\n\n![20190522110846.png](http://img.cdn.esunr.xyz/markdown/20190522110846.png)\n\n\n## 5.3 两种问题应该如何解决\n\n### 5.3.1 解决margin溢出\n\n解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 `overflow: hidden` 来触发父级的BFC：\n\n```html\n<div class=\"wrapper\">\n  <div class=\"inner\"></div>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  overflow: hidden;\n}\n.inner{\n  margin-top: 50px;\n}\n```\n![20190522111410.png](http://img.cdn.esunr.xyz/markdown/20190522111410.png)\n\n### 5.3.2 解决margin重叠\n\n网上很多文章都说可以使用BFC特性来解决margin折叠其实是错误的，如果我们用 `overflow: hidden` 将两个div设置为不同的两个BFC区域，那么我们会发现该重叠的还是会重叠。\n\n查阅相关资料显示只有以下一种方式可以使元素上下margin不折叠：\n\n> 浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素） \n> \n> 作者：丁小倪 链接：https://www.zhihu.com/question/19823139/answer/13610574 来源：知乎\n\n\n之所以很多文章生成BFC可以解决垂直margin重叠的问题，是因为浮动元素、inline-block 元素、绝对定位元素都在触发了BFC的同时解决了重叠问题。也就是说可以解决垂直margin重叠问题的方法都可以让元素具有BFC特性，但是让元素具有BFC特性不一定能够解决垂直margin重叠的问题。\n\n所以如果我们需要解决margin重叠问题，那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用，我们采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 `inline-block` 元素对空格敏感，会导致两个div之间出现空隙，具体的解决方法看：https://segmentfault.com/a/1190000010934928 ）：\n\n```html\n<div class=\"wrapper\"></div>\n<div class=\"wrapper\"></div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  margin: 20px 0;\n  display: inline-block;\n  width: 100%;\n}\n```\n\n![20190522122552.png](http://img.cdn.esunr.xyz/markdown/20190522122552.png)\n\n其实如果利用BFC特性也能实现去掉上下margin的效果，只不过原理上还是利用BFC阻止margin溢出，我们可以将两个div套上一个BFC的外壳，这样两个BFC的内部元素就不会互相影响了：\n\n> 作者：陈厚毅 链接：https://www.zhihu.com/question/19823139/answer/50075651 来源：知乎\n\n![20190522122826.png](http://img.cdn.esunr.xyz/markdown/20190522122826.png)","source":"_posts/2019/关于BFC的特性以及如何利用BFC解决margin相关的问题.md","raw":"---\ntitle: 关于BFC的特性以及如何利用BFC解决margin相关的问题\ntags: [CSS, BFC]\ncategories:\n  - Front\n  - CSS\ndate: 2019-05-22 22:07:16\n---\n# 1. 何为BFC?\n\n> 文章：https://juejin.im/post/5909db2fda2f60005d2093db#heading-8\n\nBFC概括：可以在心中记住这么一个概念———所谓的BFC就是css布局的一个概念，是一块区域，一个环境。\n\nBFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n\nFC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。\n\n常见的FC有`BFC`、`IFC`（行级格式化上下文），还有`GFC`（网格布局格式化上下文）和`FFC`（自适应格式化上下文），这里就不再展开了。\n\n# 2. 触发BFC的方式\n\n满足下列条件之一就可触发BFC\n\n1. 根元素，即HTML元素\n2. float的值不为none\n3. overflow的值不为visible\n4. display的值为inline-block、table-cell、table-caption\n5. position的值为absolute或fixed\n\n# 3. 布局规则\n\n1. 内部的Box会在垂直方向，一个接一个地放置。\n2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC的区域不会与float box重叠。\n5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n# 4. BFC作用\n\n1. 自适应两栏布局\n2. 可以阻止元素被浮动元素覆盖\n3. 可以包含浮动元素——清除内部浮动\n4. ~~分属于不同的BFC时可以阻止margin重叠~~\n\n# 5. BFC解决margin问题\n\n使用margin存在两种问题，一种是穿透问题，一种是折叠问题。\n\n## 5.1 穿透问题\n\n穿透问题即为子级元素的垂直方向margin会穿透父级元素，导致父级元素发生位移，如下：\n\n```html\n<div class=\"wrapper\">\n  <div class=\"inner\"></div>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n}\n.inner{\n  margin-top: 50px;\n}\n```\n\n![20190522110557.png](http://img.cdn.esunr.xyz/markdown/20190522110557.png)\n\n![20190522110624.png](http://img.cdn.esunr.xyz/markdown/20190522110624.png)\n\n## 5.2 margin折叠问题\n\nmargin折叠问题即为同属一个BFC中的垂直元素的垂直margin值在页面计算时发生了折叠而并不会累加\n\n```html\n<div class=\"wrapper\"></div>\n<div class=\"wrapper\"></div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  margin: 20px 0;\n}\n```\n\n![20190522110846.png](http://img.cdn.esunr.xyz/markdown/20190522110846.png)\n\n\n## 5.3 两种问题应该如何解决\n\n### 5.3.1 解决margin溢出\n\n解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 `overflow: hidden` 来触发父级的BFC：\n\n```html\n<div class=\"wrapper\">\n  <div class=\"inner\"></div>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  overflow: hidden;\n}\n.inner{\n  margin-top: 50px;\n}\n```\n![20190522111410.png](http://img.cdn.esunr.xyz/markdown/20190522111410.png)\n\n### 5.3.2 解决margin重叠\n\n网上很多文章都说可以使用BFC特性来解决margin折叠其实是错误的，如果我们用 `overflow: hidden` 将两个div设置为不同的两个BFC区域，那么我们会发现该重叠的还是会重叠。\n\n查阅相关资料显示只有以下一种方式可以使元素上下margin不折叠：\n\n> 浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素） \n> \n> 作者：丁小倪 链接：https://www.zhihu.com/question/19823139/answer/13610574 来源：知乎\n\n\n之所以很多文章生成BFC可以解决垂直margin重叠的问题，是因为浮动元素、inline-block 元素、绝对定位元素都在触发了BFC的同时解决了重叠问题。也就是说可以解决垂直margin重叠问题的方法都可以让元素具有BFC特性，但是让元素具有BFC特性不一定能够解决垂直margin重叠的问题。\n\n所以如果我们需要解决margin重叠问题，那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用，我们采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 `inline-block` 元素对空格敏感，会导致两个div之间出现空隙，具体的解决方法看：https://segmentfault.com/a/1190000010934928 ）：\n\n```html\n<div class=\"wrapper\"></div>\n<div class=\"wrapper\"></div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  margin: 20px 0;\n  display: inline-block;\n  width: 100%;\n}\n```\n\n![20190522122552.png](http://img.cdn.esunr.xyz/markdown/20190522122552.png)\n\n其实如果利用BFC特性也能实现去掉上下margin的效果，只不过原理上还是利用BFC阻止margin溢出，我们可以将两个div套上一个BFC的外壳，这样两个BFC的内部元素就不会互相影响了：\n\n> 作者：陈厚毅 链接：https://www.zhihu.com/question/19823139/answer/50075651 来源：知乎\n\n![20190522122826.png](http://img.cdn.esunr.xyz/markdown/20190522122826.png)","slug":"关于BFC的特性以及如何利用BFC解决margin相关的问题","published":1,"updated":"2019-11-09T14:07:52.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxreb000u3w4u8zno6ybm","content":"<h1 id=\"1-何为BFC\"><a href=\"#1-何为BFC\" class=\"headerlink\" title=\"1. 何为BFC?\"></a>1. 何为BFC?</h1><blockquote>\n<p>文章：<a href=\"https://juejin.im/post/5909db2fda2f60005d2093db#heading-8\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5909db2fda2f60005d2093db#heading-8</a></p>\n</blockquote>\n<p>BFC概括：可以在心中记住这么一个概念———所谓的BFC就是css布局的一个概念，是一块区域，一个环境。</p>\n<p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>\n<p>FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p>\n<p>常见的FC有<code>BFC</code>、<code>IFC</code>（行级格式化上下文），还有<code>GFC</code>（网格布局格式化上下文）和<code>FFC</code>（自适应格式化上下文），这里就不再展开了。</p>\n<h1 id=\"2-触发BFC的方式\"><a href=\"#2-触发BFC的方式\" class=\"headerlink\" title=\"2. 触发BFC的方式\"></a>2. 触发BFC的方式</h1><p>满足下列条件之一就可触发BFC</p>\n<ol>\n<li>根元素，即HTML元素</li>\n<li>float的值不为none</li>\n<li>overflow的值不为visible</li>\n<li>display的值为inline-block、table-cell、table-caption</li>\n<li>position的值为absolute或fixed</li>\n</ol>\n<h1 id=\"3-布局规则\"><a href=\"#3-布局规则\" class=\"headerlink\" title=\"3. 布局规则\"></a>3. 布局规则</h1><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n</ol>\n<h1 id=\"4-BFC作用\"><a href=\"#4-BFC作用\" class=\"headerlink\" title=\"4. BFC作用\"></a>4. BFC作用</h1><ol>\n<li>自适应两栏布局</li>\n<li>可以阻止元素被浮动元素覆盖</li>\n<li>可以包含浮动元素——清除内部浮动</li>\n<li><del>分属于不同的BFC时可以阻止margin重叠</del></li>\n</ol>\n<h1 id=\"5-BFC解决margin问题\"><a href=\"#5-BFC解决margin问题\" class=\"headerlink\" title=\"5. BFC解决margin问题\"></a>5. BFC解决margin问题</h1><p>使用margin存在两种问题，一种是穿透问题，一种是折叠问题。</p>\n<h2 id=\"5-1-穿透问题\"><a href=\"#5-1-穿透问题\" class=\"headerlink\" title=\"5.1 穿透问题\"></a>5.1 穿透问题</h2><p>穿透问题即为子级元素的垂直方向margin会穿透父级元素，导致父级元素发生位移，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110557.png\" alt=\"20190522110557.png\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110624.png\" alt=\"20190522110624.png\"></p>\n<h2 id=\"5-2-margin折叠问题\"><a href=\"#5-2-margin折叠问题\" class=\"headerlink\" title=\"5.2 margin折叠问题\"></a>5.2 margin折叠问题</h2><p>margin折叠问题即为同属一个BFC中的垂直元素的垂直margin值在页面计算时发生了折叠而并不会累加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110846.png\" alt=\"20190522110846.png\"></p>\n<h2 id=\"5-3-两种问题应该如何解决\"><a href=\"#5-3-两种问题应该如何解决\" class=\"headerlink\" title=\"5.3 两种问题应该如何解决\"></a>5.3 两种问题应该如何解决</h2><h3 id=\"5-3-1-解决margin溢出\"><a href=\"#5-3-1-解决margin溢出\" class=\"headerlink\" title=\"5.3.1 解决margin溢出\"></a>5.3.1 解决margin溢出</h3><p>解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 <code>overflow: hidden</code> 来触发父级的BFC：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522111410.png\" alt=\"20190522111410.png\"></p>\n<h3 id=\"5-3-2-解决margin重叠\"><a href=\"#5-3-2-解决margin重叠\" class=\"headerlink\" title=\"5.3.2 解决margin重叠\"></a>5.3.2 解决margin重叠</h3><p>网上很多文章都说可以使用BFC特性来解决margin折叠其实是错误的，如果我们用 <code>overflow: hidden</code> 将两个div设置为不同的两个BFC区域，那么我们会发现该重叠的还是会重叠。</p>\n<p>查阅相关资料显示只有以下一种方式可以使元素上下margin不折叠：</p>\n<blockquote>\n<p>浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素） </p>\n<p>作者：丁小倪 链接：<a href=\"https://www.zhihu.com/question/19823139/answer/13610574\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139/answer/13610574</a> 来源：知乎</p>\n</blockquote>\n<p>之所以很多文章生成BFC可以解决垂直margin重叠的问题，是因为浮动元素、inline-block 元素、绝对定位元素都在触发了BFC的同时解决了重叠问题。也就是说可以解决垂直margin重叠问题的方法都可以让元素具有BFC特性，但是让元素具有BFC特性不一定能够解决垂直margin重叠的问题。</p>\n<p>所以如果我们需要解决margin重叠问题，那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用，我们采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 <code>inline-block</code> 元素对空格敏感，会导致两个div之间出现空隙，具体的解决方法看：<a href=\"https://segmentfault.com/a/1190000010934928\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010934928</a> ）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522122552.png\" alt=\"20190522122552.png\"></p>\n<p>其实如果利用BFC特性也能实现去掉上下margin的效果，只不过原理上还是利用BFC阻止margin溢出，我们可以将两个div套上一个BFC的外壳，这样两个BFC的内部元素就不会互相影响了：</p>\n<blockquote>\n<p>作者：陈厚毅 链接：<a href=\"https://www.zhihu.com/question/19823139/answer/50075651\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139/answer/50075651</a> 来源：知乎</p>\n</blockquote>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522122826.png\" alt=\"20190522122826.png\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-何为BFC\"><a href=\"#1-何为BFC\" class=\"headerlink\" title=\"1. 何为BFC?\"></a>1. 何为BFC?</h1><blockquote>\n<p>文章：<a href=\"https://juejin.im/post/5909db2fda2f60005d2093db#heading-8\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5909db2fda2f60005d2093db#heading-8</a></p>\n</blockquote>\n<p>BFC概括：可以在心中记住这么一个概念———所谓的BFC就是css布局的一个概念，是一块区域，一个环境。</p>\n<p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>\n<p>FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p>\n<p>常见的FC有<code>BFC</code>、<code>IFC</code>（行级格式化上下文），还有<code>GFC</code>（网格布局格式化上下文）和<code>FFC</code>（自适应格式化上下文），这里就不再展开了。</p>\n<h1 id=\"2-触发BFC的方式\"><a href=\"#2-触发BFC的方式\" class=\"headerlink\" title=\"2. 触发BFC的方式\"></a>2. 触发BFC的方式</h1><p>满足下列条件之一就可触发BFC</p>\n<ol>\n<li>根元素，即HTML元素</li>\n<li>float的值不为none</li>\n<li>overflow的值不为visible</li>\n<li>display的值为inline-block、table-cell、table-caption</li>\n<li>position的值为absolute或fixed</li>\n</ol>\n<h1 id=\"3-布局规则\"><a href=\"#3-布局规则\" class=\"headerlink\" title=\"3. 布局规则\"></a>3. 布局规则</h1><ol>\n<li>内部的Box会在垂直方向，一个接一个地放置。</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠。</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n</ol>\n<h1 id=\"4-BFC作用\"><a href=\"#4-BFC作用\" class=\"headerlink\" title=\"4. BFC作用\"></a>4. BFC作用</h1><ol>\n<li>自适应两栏布局</li>\n<li>可以阻止元素被浮动元素覆盖</li>\n<li>可以包含浮动元素——清除内部浮动</li>\n<li><del>分属于不同的BFC时可以阻止margin重叠</del></li>\n</ol>\n<h1 id=\"5-BFC解决margin问题\"><a href=\"#5-BFC解决margin问题\" class=\"headerlink\" title=\"5. BFC解决margin问题\"></a>5. BFC解决margin问题</h1><p>使用margin存在两种问题，一种是穿透问题，一种是折叠问题。</p>\n<h2 id=\"5-1-穿透问题\"><a href=\"#5-1-穿透问题\" class=\"headerlink\" title=\"5.1 穿透问题\"></a>5.1 穿透问题</h2><p>穿透问题即为子级元素的垂直方向margin会穿透父级元素，导致父级元素发生位移，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110557.png\" alt=\"20190522110557.png\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110624.png\" alt=\"20190522110624.png\"></p>\n<h2 id=\"5-2-margin折叠问题\"><a href=\"#5-2-margin折叠问题\" class=\"headerlink\" title=\"5.2 margin折叠问题\"></a>5.2 margin折叠问题</h2><p>margin折叠问题即为同属一个BFC中的垂直元素的垂直margin值在页面计算时发生了折叠而并不会累加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522110846.png\" alt=\"20190522110846.png\"></p>\n<h2 id=\"5-3-两种问题应该如何解决\"><a href=\"#5-3-两种问题应该如何解决\" class=\"headerlink\" title=\"5.3 两种问题应该如何解决\"></a>5.3 两种问题应该如何解决</h2><h3 id=\"5-3-1-解决margin溢出\"><a href=\"#5-3-1-解决margin溢出\" class=\"headerlink\" title=\"5.3.1 解决margin溢出\"></a>5.3.1 解决margin溢出</h3><p>解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 <code>overflow: hidden</code> 来触发父级的BFC：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522111410.png\" alt=\"20190522111410.png\"></p>\n<h3 id=\"5-3-2-解决margin重叠\"><a href=\"#5-3-2-解决margin重叠\" class=\"headerlink\" title=\"5.3.2 解决margin重叠\"></a>5.3.2 解决margin重叠</h3><p>网上很多文章都说可以使用BFC特性来解决margin折叠其实是错误的，如果我们用 <code>overflow: hidden</code> 将两个div设置为不同的两个BFC区域，那么我们会发现该重叠的还是会重叠。</p>\n<p>查阅相关资料显示只有以下一种方式可以使元素上下margin不折叠：</p>\n<blockquote>\n<p>浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素） </p>\n<p>作者：丁小倪 链接：<a href=\"https://www.zhihu.com/question/19823139/answer/13610574\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139/answer/13610574</a> 来源：知乎</p>\n</blockquote>\n<p>之所以很多文章生成BFC可以解决垂直margin重叠的问题，是因为浮动元素、inline-block 元素、绝对定位元素都在触发了BFC的同时解决了重叠问题。也就是说可以解决垂直margin重叠问题的方法都可以让元素具有BFC特性，但是让元素具有BFC特性不一定能够解决垂直margin重叠的问题。</p>\n<p>所以如果我们需要解决margin重叠问题，那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用，我们采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 <code>inline-block</code> 元素对空格敏感，会导致两个div之间出现空隙，具体的解决方法看：<a href=\"https://segmentfault.com/a/1190000010934928\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010934928</a> ）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522122552.png\" alt=\"20190522122552.png\"></p>\n<p>其实如果利用BFC特性也能实现去掉上下margin的效果，只不过原理上还是利用BFC阻止margin溢出，我们可以将两个div套上一个BFC的外壳，这样两个BFC的内部元素就不会互相影响了：</p>\n<blockquote>\n<p>作者：陈厚毅 链接：<a href=\"https://www.zhihu.com/question/19823139/answer/50075651\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139/answer/50075651</a> 来源：知乎</p>\n</blockquote>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522122826.png\" alt=\"20190522122826.png\"></p>\n"},{"title":"关于构造函数和原型链运行机制的试题与知识点","date":"2019-05-09T13:57:38.000Z","_content":"# 题目\n\n- 如何准确判断一个变量是数组类型\n- 写一个原型链继承的例子\n- 描述new一个对象的过程\n- zepto（或其他框架）源码中如何使用原型链\n\n# 知识点\n\n## 1. 构造函数\n- 构造函数要用大写字母开头\n- var a=其实是var a=new Object）的语法糖\n- var a=[]其实是var a=new Array）的语法糖\n- function Foo）{..}其实是var Foo=new Function（.）\n- 使用instanceof 可以判断一个函数是否是一个变量的构造函数\n\n![a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg)\n\n## 2. 原型规则和示例\n\n- 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null\"意外）\n- 所有的**引用类型**（数组、对象、函数），都有一个__proto__（隐式原型）属性，属性值是一个普通的对象\n- 所有的**函数**，都有一个prototype（显式原型）属性，属性值也是一个普通的对象\n- 所有的引用类型（数组、对象、函数），_proto_属性值指向它的构造函数的\"prototype\"属性值\n\n![a71efaafly1g2rchgklygj20mg0e4dk5.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rchgklygj20mg0e4dk5.jpg)\n\n-  当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__（即它的构造函数的prototype）中寻找。\n\n   我们在一个构造函数的显式原型上去定义方法可以有效的减少内存占用，因为如果我们定义在构造函数内部，则每实例化一个对象，就会开辟一个堆内存去存放挂载到其实例上，然而对于方法的调用这是没有必要的\n\n**关于 prototype 它有以下几个要点，务必牢记：**\n\n1. 每一个函数（类）都有原型属性，称作prototype，这个属性提供了可供当前类的实例调用的属性和方法。\n2. 浏览器默认给原型开辟的堆内存中有一个constructor属性，这个属性存放的是函数本身\n3. 每一个对象~~的实例上~~都有一个__proto__属性称为原型链，这个属性指向当前类的所属原型，不确定的原型都指向Object.prototype，然而Object的__proto__指向null\n\n> prototype下的name属性指函数名，length属性指传入的形参的个数\n\n![a71efaafly1g2rcm3gp5cj20me0e377t.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcm3gp5cj20me0e377t.jpg)\n\n利用 `for in` 循环可以来获取对象身上自己定义的属性而不获取来自原型的属性\n\n![a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg)\n\n## 3. 原型链\n\n当一个方法在原型上没有时，就会查找原型链\n\n![a71efaafly1g2rcwekrs7j20mj0du0vy.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcwekrs7j20mj0du0vy.jpg)\n![a71efaafly1g2rd0r86dzj20mm0drmyo.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rd0r86dzj20mm0drmyo.jpg)\n\n## 4. intanceof\n\nintanceof 用于判断 **引用类型** 属于哪个 **构造函数** 的方法。\n\nfinstanceofFoo的判断逻辑是：\n\n1. f的__proto__一层一层往上，能否对应到Foo.prototype，只要 `f.__proto__ == Foo.prototype` 就验证通过 \n2. 再试着判断 f instanceof Object\n\n```js\nfunction Foo(name) {\n  this.name = name\n}\nfunction Foo2() { }\n\nvar f = new Foo('蔡徐坤');\n\n// 让Foo2的prototype指向Foo的prototype，这时候，Foo2与Foo的prototype可以看作为一个对象，也就是说修改Foo的prototype相当于修改Foo1的prototype，反之亦然\nFoo2.prototype = Foo.prototype;\nFoo.prototype.age = 'unknown';\nFoo2.prototype.hobbies = '唱、跳、篮球、Rap';\n\n// 由下可以看出Foo2与Foo的prototype指向同一个对象\nconsole.log(Foo.prototype); // Foo { age: 'unknown', hobbies: '唱、跳、篮球、Rap' }\nconsole.log(Foo2.prototype); //Foo { age: 'unknown', hobbies: '唱、跳、篮球、Rap' }\n\n// 由于实例 f 的 __proto__ 指向 Foo 的 prototype ，而Foo的 prototype 与 Foo2 的 prototype 是一个，所以 f 既属于 Foo 又属于 Foo2\nconsole.log(f instanceof Foo); // true\nconsole.log(f instanceof Foo2); // true\n```\n\n## 5. 关于原型重定向问题\n先看下面的一个例子：\n```js\nfunction fun(){\n    this.a = 0;\n    this.b = function(){\n        alert(this.a);\n    }\n}\nfun.prototype = {\n    b: function(){\n        this.a = 20;\n        alert(this.a);\n    },\n    c: function(){\n        this.a = 30;\n        alert(this.a);\n    }\n}\nvar my_fun = new fun();\nmy_fun.b(); // 0\nmy_fun.c(); // this => my_fun.a = 30 ; 30\n```\n> 结果：0 30\n\n`my_fun.a` 用来设置私有属性\n\n`my_fun.__proto__.a` 用来设置公有属性\n\n**原型重定向导致的问题:**\n\n1. 自己开辟的堆内存中没有`constructor`属性，导致类的原型构造函数缺失（解决：自己手动在堆内存中增加`constructor`属性）\n2. 当原型重定向后，浏览器默认开辟的那个类原型堆内存会被释放掉，如果之前已经存储了一些方法或属性，都会丢失（所以：内置累的原型不允许重定向到自己开辟的堆内存，因为内置类的原型上存在很多属性方法，重定向后都没了，这样是不被允许的；但浏览器对内置类有保护机制）\n3. 当我们需要给类的原型批量设置属性和方法的时候，一般都是让原型重定向到自己创建的对象中\n\n\n# 解题\n## 1. 如何准确判断一个变量是数组类型\n```js\nvar arr = [];\nconsole.log(arr instanceof Array); // true\nconsole.log(typeof arr); // object 不能用typeof判断一个变量是否是数组类型\n```\n\n\n## 2. 写一个原型链继承的例子\n\n基础实例：\n```js\n//动物\nfunction Animal(){\n  this.eat = function(){\n    console.Log('animal eat')\n  }\n}\n//狗\nfunction Dog(){\n  this.bark = function(){\n    console.Log('dog bark')\n  }\n}\nDog.prototype = new Animal()\n//哈士奇\nvar hashiqi = new Dog()\n//接下里代码演示时，会推荐更加贴近实战的原型继承示例！\n```\n\n封装DOM查询：[戳我查看完整示例代码](../../原型链/06_原型链操作的高级实例.html)\n```js\nfunction Elem(id) {\n  this.elem = document.getElementById(id);\n}\n\nElem.prototype.html = function (html) {\n  if (html == null) {\n    return this.elem.innerHTML;\n  } else {\n    this.elem.innerHTML = html;\n    return this; // 返回this，便于链式操作\n  }\n}\n\nElem.prototype.on = function (eventType, fn) {\n  if (eventType != null && fn != null) {\n    this.elem.addEventListener(eventType, fn);\n    return this;\n  } else {\n    throw new Error('请传入“事件类型”，“执行方法”！');\n  }\n}\n\nvar div = new Elem('div');\ndiv.on('click', function(){\n  alert(div.html());\n})\n```\n\n## 3. 描述new一个对象的过程\n- 创建一个新对象\n- this 指向这个新对象\n- 执行代码，即对this 赋值\n- 返回 this (这一步是默认的)\n\n\n\n\n","source":"_posts/2019/关于构造函数和原型链运行机制的试题与知识点.md","raw":"---\ntitle: 关于构造函数和原型链运行机制的试题与知识点\ntags: [JS, 面试题]\ncategories:\n  - Front\n  - JS\ndate: 2019-05-09 21:57:38\n---\n# 题目\n\n- 如何准确判断一个变量是数组类型\n- 写一个原型链继承的例子\n- 描述new一个对象的过程\n- zepto（或其他框架）源码中如何使用原型链\n\n# 知识点\n\n## 1. 构造函数\n- 构造函数要用大写字母开头\n- var a=其实是var a=new Object）的语法糖\n- var a=[]其实是var a=new Array）的语法糖\n- function Foo）{..}其实是var Foo=new Function（.）\n- 使用instanceof 可以判断一个函数是否是一个变量的构造函数\n\n![a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg)\n\n## 2. 原型规则和示例\n\n- 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null\"意外）\n- 所有的**引用类型**（数组、对象、函数），都有一个__proto__（隐式原型）属性，属性值是一个普通的对象\n- 所有的**函数**，都有一个prototype（显式原型）属性，属性值也是一个普通的对象\n- 所有的引用类型（数组、对象、函数），_proto_属性值指向它的构造函数的\"prototype\"属性值\n\n![a71efaafly1g2rchgklygj20mg0e4dk5.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rchgklygj20mg0e4dk5.jpg)\n\n-  当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__（即它的构造函数的prototype）中寻找。\n\n   我们在一个构造函数的显式原型上去定义方法可以有效的减少内存占用，因为如果我们定义在构造函数内部，则每实例化一个对象，就会开辟一个堆内存去存放挂载到其实例上，然而对于方法的调用这是没有必要的\n\n**关于 prototype 它有以下几个要点，务必牢记：**\n\n1. 每一个函数（类）都有原型属性，称作prototype，这个属性提供了可供当前类的实例调用的属性和方法。\n2. 浏览器默认给原型开辟的堆内存中有一个constructor属性，这个属性存放的是函数本身\n3. 每一个对象~~的实例上~~都有一个__proto__属性称为原型链，这个属性指向当前类的所属原型，不确定的原型都指向Object.prototype，然而Object的__proto__指向null\n\n> prototype下的name属性指函数名，length属性指传入的形参的个数\n\n![a71efaafly1g2rcm3gp5cj20me0e377t.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcm3gp5cj20me0e377t.jpg)\n\n利用 `for in` 循环可以来获取对象身上自己定义的属性而不获取来自原型的属性\n\n![a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg)\n\n## 3. 原型链\n\n当一个方法在原型上没有时，就会查找原型链\n\n![a71efaafly1g2rcwekrs7j20mj0du0vy.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rcwekrs7j20mj0du0vy.jpg)\n![a71efaafly1g2rd0r86dzj20mm0drmyo.jpg](http://markdown.img.esunr.xyz/a71efaafly1g2rd0r86dzj20mm0drmyo.jpg)\n\n## 4. intanceof\n\nintanceof 用于判断 **引用类型** 属于哪个 **构造函数** 的方法。\n\nfinstanceofFoo的判断逻辑是：\n\n1. f的__proto__一层一层往上，能否对应到Foo.prototype，只要 `f.__proto__ == Foo.prototype` 就验证通过 \n2. 再试着判断 f instanceof Object\n\n```js\nfunction Foo(name) {\n  this.name = name\n}\nfunction Foo2() { }\n\nvar f = new Foo('蔡徐坤');\n\n// 让Foo2的prototype指向Foo的prototype，这时候，Foo2与Foo的prototype可以看作为一个对象，也就是说修改Foo的prototype相当于修改Foo1的prototype，反之亦然\nFoo2.prototype = Foo.prototype;\nFoo.prototype.age = 'unknown';\nFoo2.prototype.hobbies = '唱、跳、篮球、Rap';\n\n// 由下可以看出Foo2与Foo的prototype指向同一个对象\nconsole.log(Foo.prototype); // Foo { age: 'unknown', hobbies: '唱、跳、篮球、Rap' }\nconsole.log(Foo2.prototype); //Foo { age: 'unknown', hobbies: '唱、跳、篮球、Rap' }\n\n// 由于实例 f 的 __proto__ 指向 Foo 的 prototype ，而Foo的 prototype 与 Foo2 的 prototype 是一个，所以 f 既属于 Foo 又属于 Foo2\nconsole.log(f instanceof Foo); // true\nconsole.log(f instanceof Foo2); // true\n```\n\n## 5. 关于原型重定向问题\n先看下面的一个例子：\n```js\nfunction fun(){\n    this.a = 0;\n    this.b = function(){\n        alert(this.a);\n    }\n}\nfun.prototype = {\n    b: function(){\n        this.a = 20;\n        alert(this.a);\n    },\n    c: function(){\n        this.a = 30;\n        alert(this.a);\n    }\n}\nvar my_fun = new fun();\nmy_fun.b(); // 0\nmy_fun.c(); // this => my_fun.a = 30 ; 30\n```\n> 结果：0 30\n\n`my_fun.a` 用来设置私有属性\n\n`my_fun.__proto__.a` 用来设置公有属性\n\n**原型重定向导致的问题:**\n\n1. 自己开辟的堆内存中没有`constructor`属性，导致类的原型构造函数缺失（解决：自己手动在堆内存中增加`constructor`属性）\n2. 当原型重定向后，浏览器默认开辟的那个类原型堆内存会被释放掉，如果之前已经存储了一些方法或属性，都会丢失（所以：内置累的原型不允许重定向到自己开辟的堆内存，因为内置类的原型上存在很多属性方法，重定向后都没了，这样是不被允许的；但浏览器对内置类有保护机制）\n3. 当我们需要给类的原型批量设置属性和方法的时候，一般都是让原型重定向到自己创建的对象中\n\n\n# 解题\n## 1. 如何准确判断一个变量是数组类型\n```js\nvar arr = [];\nconsole.log(arr instanceof Array); // true\nconsole.log(typeof arr); // object 不能用typeof判断一个变量是否是数组类型\n```\n\n\n## 2. 写一个原型链继承的例子\n\n基础实例：\n```js\n//动物\nfunction Animal(){\n  this.eat = function(){\n    console.Log('animal eat')\n  }\n}\n//狗\nfunction Dog(){\n  this.bark = function(){\n    console.Log('dog bark')\n  }\n}\nDog.prototype = new Animal()\n//哈士奇\nvar hashiqi = new Dog()\n//接下里代码演示时，会推荐更加贴近实战的原型继承示例！\n```\n\n封装DOM查询：[戳我查看完整示例代码](../../原型链/06_原型链操作的高级实例.html)\n```js\nfunction Elem(id) {\n  this.elem = document.getElementById(id);\n}\n\nElem.prototype.html = function (html) {\n  if (html == null) {\n    return this.elem.innerHTML;\n  } else {\n    this.elem.innerHTML = html;\n    return this; // 返回this，便于链式操作\n  }\n}\n\nElem.prototype.on = function (eventType, fn) {\n  if (eventType != null && fn != null) {\n    this.elem.addEventListener(eventType, fn);\n    return this;\n  } else {\n    throw new Error('请传入“事件类型”，“执行方法”！');\n  }\n}\n\nvar div = new Elem('div');\ndiv.on('click', function(){\n  alert(div.html());\n})\n```\n\n## 3. 描述new一个对象的过程\n- 创建一个新对象\n- this 指向这个新对象\n- 执行代码，即对this 赋值\n- 返回 this (这一步是默认的)\n\n\n\n\n","slug":"关于构造函数和原型链运行机制的试题与知识点","published":1,"updated":"2019-11-09T14:00:18.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxred000y3w4u8g0f8i10","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><ul>\n<li>如何准确判断一个变量是数组类型</li>\n<li>写一个原型链继承的例子</li>\n<li>描述new一个对象的过程</li>\n<li>zepto（或其他框架）源码中如何使用原型链</li>\n</ul>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h2 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1. 构造函数\"></a>1. 构造函数</h2><ul>\n<li>构造函数要用大写字母开头</li>\n<li>var a=其实是var a=new Object）的语法糖</li>\n<li>var a=[]其实是var a=new Array）的语法糖</li>\n<li>function Foo）{..}其实是var Foo=new Function（.）</li>\n<li>使用instanceof 可以判断一个函数是否是一个变量的构造函数</li>\n</ul>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg\" alt=\"a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg\"></p>\n<h2 id=\"2-原型规则和示例\"><a href=\"#2-原型规则和示例\" class=\"headerlink\" title=\"2. 原型规则和示例\"></a>2. 原型规则和示例</h2><ul>\n<li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”意外）</li>\n<li>所有的<strong>引用类型</strong>（数组、对象、函数），都有一个<strong>proto</strong>（隐式原型）属性，属性值是一个普通的对象</li>\n<li>所有的<strong>函数</strong>，都有一个prototype（显式原型）属性，属性值也是一个普通的对象</li>\n<li>所有的引用类型（数组、对象、函数），_proto_属性值指向它的构造函数的”prototype”属性值</li>\n</ul>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rchgklygj20mg0e4dk5.jpg\" alt=\"a71efaafly1g2rchgklygj20mg0e4dk5.jpg\"></p>\n<ul>\n<li><p>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>（即它的构造函数的prototype）中寻找。</p>\n<p>我们在一个构造函数的显式原型上去定义方法可以有效的减少内存占用，因为如果我们定义在构造函数内部，则每实例化一个对象，就会开辟一个堆内存去存放挂载到其实例上，然而对于方法的调用这是没有必要的</p>\n</li>\n</ul>\n<p><strong>关于 prototype 它有以下几个要点，务必牢记：</strong></p>\n<ol>\n<li>每一个函数（类）都有原型属性，称作prototype，这个属性提供了可供当前类的实例调用的属性和方法。</li>\n<li>浏览器默认给原型开辟的堆内存中有一个constructor属性，这个属性存放的是函数本身</li>\n<li>每一个对象<del>的实例上</del>都有一个<strong>proto</strong>属性称为原型链，这个属性指向当前类的所属原型，不确定的原型都指向Object.prototype，然而Object的<strong>proto</strong>指向null</li>\n</ol>\n<blockquote>\n<p>prototype下的name属性指函数名，length属性指传入的形参的个数</p>\n</blockquote>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcm3gp5cj20me0e377t.jpg\" alt=\"a71efaafly1g2rcm3gp5cj20me0e377t.jpg\"></p>\n<p>利用 <code>for in</code> 循环可以来获取对象身上自己定义的属性而不获取来自原型的属性</p>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg\" alt=\"a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg\"></p>\n<h2 id=\"3-原型链\"><a href=\"#3-原型链\" class=\"headerlink\" title=\"3. 原型链\"></a>3. 原型链</h2><p>当一个方法在原型上没有时，就会查找原型链</p>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcwekrs7j20mj0du0vy.jpg\" alt=\"a71efaafly1g2rcwekrs7j20mj0du0vy.jpg\"><br><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rd0r86dzj20mm0drmyo.jpg\" alt=\"a71efaafly1g2rd0r86dzj20mm0drmyo.jpg\"></p>\n<h2 id=\"4-intanceof\"><a href=\"#4-intanceof\" class=\"headerlink\" title=\"4. intanceof\"></a>4. intanceof</h2><p>intanceof 用于判断 <strong>引用类型</strong> 属于哪个 <strong>构造函数</strong> 的方法。</p>\n<p>finstanceofFoo的判断逻辑是：</p>\n<ol>\n<li>f的<strong>proto</strong>一层一层往上，能否对应到Foo.prototype，只要 <code>f.__proto__ == Foo.prototype</code> 就验证通过 </li>\n<li>再试着判断 f instanceof Object</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo(<span class=\"string\">'蔡徐坤'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让Foo2的prototype指向Foo的prototype，这时候，Foo2与Foo的prototype可以看作为一个对象，也就是说修改Foo的prototype相当于修改Foo1的prototype，反之亦然</span></span><br><span class=\"line\">Foo2.prototype = Foo.prototype;</span><br><span class=\"line\">Foo.prototype.age = <span class=\"string\">'unknown'</span>;</span><br><span class=\"line\">Foo2.prototype.hobbies = <span class=\"string\">'唱、跳、篮球、Rap'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由下可以看出Foo2与Foo的prototype指向同一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype); <span class=\"comment\">// Foo &#123; age: 'unknown', hobbies: '唱、跳、篮球、Rap' &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo2.prototype); <span class=\"comment\">//Foo &#123; age: 'unknown', hobbies: '唱、跳、篮球、Rap' &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于实例 f 的 __proto__ 指向 Foo 的 prototype ，而Foo的 prototype 与 Foo2 的 prototype 是一个，所以 f 既属于 Foo 又属于 Foo2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f <span class=\"keyword\">instanceof</span> Foo2); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-关于原型重定向问题\"><a href=\"#5-关于原型重定向问题\" class=\"headerlink\" title=\"5. 关于原型重定向问题\"></a>5. 关于原型重定向问题</h2><p>先看下面的一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype = &#123;</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">20</span>;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">30</span>;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> my_fun = <span class=\"keyword\">new</span> fun();</span><br><span class=\"line\">my_fun.b(); <span class=\"comment\">// 0</span></span><br><span class=\"line\">my_fun.c(); <span class=\"comment\">// this =&gt; my_fun.a = 30 ; 30</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结果：0 30</p>\n</blockquote>\n<p><code>my_fun.a</code> 用来设置私有属性</p>\n<p><code>my_fun.__proto__.a</code> 用来设置公有属性</p>\n<p><strong>原型重定向导致的问题:</strong></p>\n<ol>\n<li>自己开辟的堆内存中没有<code>constructor</code>属性，导致类的原型构造函数缺失（解决：自己手动在堆内存中增加<code>constructor</code>属性）</li>\n<li>当原型重定向后，浏览器默认开辟的那个类原型堆内存会被释放掉，如果之前已经存储了一些方法或属性，都会丢失（所以：内置累的原型不允许重定向到自己开辟的堆内存，因为内置类的原型上存在很多属性方法，重定向后都没了，这样是不被允许的；但浏览器对内置类有保护机制）</li>\n<li>当我们需要给类的原型批量设置属性和方法的时候，一般都是让原型重定向到自己创建的对象中</li>\n</ol>\n<h1 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h1><h2 id=\"1-如何准确判断一个变量是数组类型\"><a href=\"#1-如何准确判断一个变量是数组类型\" class=\"headerlink\" title=\"1. 如何准确判断一个变量是数组类型\"></a>1. 如何准确判断一个变量是数组类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr); <span class=\"comment\">// object 不能用typeof判断一个变量是否是数组类型</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-写一个原型链继承的例子\"><a href=\"#2-写一个原型链继承的例子\" class=\"headerlink\" title=\"2. 写一个原型链继承的例子\"></a>2. 写一个原型链继承的例子</h2><p>基础实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.Log(<span class=\"string\">'animal eat'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//狗</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.Log(<span class=\"string\">'dog bark'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"><span class=\"comment\">//哈士奇</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hashiqi = <span class=\"keyword\">new</span> Dog()</span><br><span class=\"line\"><span class=\"comment\">//接下里代码演示时，会推荐更加贴近实战的原型继承示例！</span></span><br></pre></td></tr></table></figure>\n\n<p>封装DOM查询：<a href=\"../../原型链/06_原型链操作的高级实例.html\">戳我查看完整示例代码</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Elem</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.elem = <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Elem.prototype.html = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">html</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (html == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.elem.innerHTML;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elem.innerHTML = html;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; <span class=\"comment\">// 返回this，便于链式操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Elem.prototype.on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventType, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (eventType != <span class=\"literal\">null</span> &amp;&amp; fn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elem.addEventListener(eventType, fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请传入“事件类型”，“执行方法”！'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"keyword\">new</span> Elem(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">div.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(div.html());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-描述new一个对象的过程\"><a href=\"#3-描述new一个对象的过程\" class=\"headerlink\" title=\"3. 描述new一个对象的过程\"></a>3. 描述new一个对象的过程</h2><ul>\n<li>创建一个新对象</li>\n<li>this 指向这个新对象</li>\n<li>执行代码，即对this 赋值</li>\n<li>返回 this (这一步是默认的)</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><ul>\n<li>如何准确判断一个变量是数组类型</li>\n<li>写一个原型链继承的例子</li>\n<li>描述new一个对象的过程</li>\n<li>zepto（或其他框架）源码中如何使用原型链</li>\n</ul>\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h2 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1. 构造函数\"></a>1. 构造函数</h2><ul>\n<li>构造函数要用大写字母开头</li>\n<li>var a=其实是var a=new Object）的语法糖</li>\n<li>var a=[]其实是var a=new Array）的语法糖</li>\n<li>function Foo）{..}其实是var Foo=new Function（.）</li>\n<li>使用instanceof 可以判断一个函数是否是一个变量的构造函数</li>\n</ul>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg\" alt=\"a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg\"></p>\n<h2 id=\"2-原型规则和示例\"><a href=\"#2-原型规则和示例\" class=\"headerlink\" title=\"2. 原型规则和示例\"></a>2. 原型规则和示例</h2><ul>\n<li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”意外）</li>\n<li>所有的<strong>引用类型</strong>（数组、对象、函数），都有一个<strong>proto</strong>（隐式原型）属性，属性值是一个普通的对象</li>\n<li>所有的<strong>函数</strong>，都有一个prototype（显式原型）属性，属性值也是一个普通的对象</li>\n<li>所有的引用类型（数组、对象、函数），_proto_属性值指向它的构造函数的”prototype”属性值</li>\n</ul>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rchgklygj20mg0e4dk5.jpg\" alt=\"a71efaafly1g2rchgklygj20mg0e4dk5.jpg\"></p>\n<ul>\n<li><p>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>（即它的构造函数的prototype）中寻找。</p>\n<p>我们在一个构造函数的显式原型上去定义方法可以有效的减少内存占用，因为如果我们定义在构造函数内部，则每实例化一个对象，就会开辟一个堆内存去存放挂载到其实例上，然而对于方法的调用这是没有必要的</p>\n</li>\n</ul>\n<p><strong>关于 prototype 它有以下几个要点，务必牢记：</strong></p>\n<ol>\n<li>每一个函数（类）都有原型属性，称作prototype，这个属性提供了可供当前类的实例调用的属性和方法。</li>\n<li>浏览器默认给原型开辟的堆内存中有一个constructor属性，这个属性存放的是函数本身</li>\n<li>每一个对象<del>的实例上</del>都有一个<strong>proto</strong>属性称为原型链，这个属性指向当前类的所属原型，不确定的原型都指向Object.prototype，然而Object的<strong>proto</strong>指向null</li>\n</ol>\n<blockquote>\n<p>prototype下的name属性指函数名，length属性指传入的形参的个数</p>\n</blockquote>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcm3gp5cj20me0e377t.jpg\" alt=\"a71efaafly1g2rcm3gp5cj20me0e377t.jpg\"></p>\n<p>利用 <code>for in</code> 循环可以来获取对象身上自己定义的属性而不获取来自原型的属性</p>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg\" alt=\"a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg\"></p>\n<h2 id=\"3-原型链\"><a href=\"#3-原型链\" class=\"headerlink\" title=\"3. 原型链\"></a>3. 原型链</h2><p>当一个方法在原型上没有时，就会查找原型链</p>\n<p><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rcwekrs7j20mj0du0vy.jpg\" alt=\"a71efaafly1g2rcwekrs7j20mj0du0vy.jpg\"><br><img src=\"http://markdown.img.esunr.xyz/a71efaafly1g2rd0r86dzj20mm0drmyo.jpg\" alt=\"a71efaafly1g2rd0r86dzj20mm0drmyo.jpg\"></p>\n<h2 id=\"4-intanceof\"><a href=\"#4-intanceof\" class=\"headerlink\" title=\"4. intanceof\"></a>4. intanceof</h2><p>intanceof 用于判断 <strong>引用类型</strong> 属于哪个 <strong>构造函数</strong> 的方法。</p>\n<p>finstanceofFoo的判断逻辑是：</p>\n<ol>\n<li>f的<strong>proto</strong>一层一层往上，能否对应到Foo.prototype，只要 <code>f.__proto__ == Foo.prototype</code> 就验证通过 </li>\n<li>再试着判断 f instanceof Object</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo(<span class=\"string\">'蔡徐坤'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让Foo2的prototype指向Foo的prototype，这时候，Foo2与Foo的prototype可以看作为一个对象，也就是说修改Foo的prototype相当于修改Foo1的prototype，反之亦然</span></span><br><span class=\"line\">Foo2.prototype = Foo.prototype;</span><br><span class=\"line\">Foo.prototype.age = <span class=\"string\">'unknown'</span>;</span><br><span class=\"line\">Foo2.prototype.hobbies = <span class=\"string\">'唱、跳、篮球、Rap'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由下可以看出Foo2与Foo的prototype指向同一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype); <span class=\"comment\">// Foo &#123; age: 'unknown', hobbies: '唱、跳、篮球、Rap' &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo2.prototype); <span class=\"comment\">//Foo &#123; age: 'unknown', hobbies: '唱、跳、篮球、Rap' &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于实例 f 的 __proto__ 指向 Foo 的 prototype ，而Foo的 prototype 与 Foo2 的 prototype 是一个，所以 f 既属于 Foo 又属于 Foo2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f <span class=\"keyword\">instanceof</span> Foo2); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-关于原型重定向问题\"><a href=\"#5-关于原型重定向问题\" class=\"headerlink\" title=\"5. 关于原型重定向问题\"></a>5. 关于原型重定向问题</h2><p>先看下面的一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype = &#123;</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">20</span>;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">30</span>;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> my_fun = <span class=\"keyword\">new</span> fun();</span><br><span class=\"line\">my_fun.b(); <span class=\"comment\">// 0</span></span><br><span class=\"line\">my_fun.c(); <span class=\"comment\">// this =&gt; my_fun.a = 30 ; 30</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结果：0 30</p>\n</blockquote>\n<p><code>my_fun.a</code> 用来设置私有属性</p>\n<p><code>my_fun.__proto__.a</code> 用来设置公有属性</p>\n<p><strong>原型重定向导致的问题:</strong></p>\n<ol>\n<li>自己开辟的堆内存中没有<code>constructor</code>属性，导致类的原型构造函数缺失（解决：自己手动在堆内存中增加<code>constructor</code>属性）</li>\n<li>当原型重定向后，浏览器默认开辟的那个类原型堆内存会被释放掉，如果之前已经存储了一些方法或属性，都会丢失（所以：内置累的原型不允许重定向到自己开辟的堆内存，因为内置类的原型上存在很多属性方法，重定向后都没了，这样是不被允许的；但浏览器对内置类有保护机制）</li>\n<li>当我们需要给类的原型批量设置属性和方法的时候，一般都是让原型重定向到自己创建的对象中</li>\n</ol>\n<h1 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h1><h2 id=\"1-如何准确判断一个变量是数组类型\"><a href=\"#1-如何准确判断一个变量是数组类型\" class=\"headerlink\" title=\"1. 如何准确判断一个变量是数组类型\"></a>1. 如何准确判断一个变量是数组类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arr); <span class=\"comment\">// object 不能用typeof判断一个变量是否是数组类型</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-写一个原型链继承的例子\"><a href=\"#2-写一个原型链继承的例子\" class=\"headerlink\" title=\"2. 写一个原型链继承的例子\"></a>2. 写一个原型链继承的例子</h2><p>基础实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.Log(<span class=\"string\">'animal eat'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//狗</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.Log(<span class=\"string\">'dog bark'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"><span class=\"comment\">//哈士奇</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hashiqi = <span class=\"keyword\">new</span> Dog()</span><br><span class=\"line\"><span class=\"comment\">//接下里代码演示时，会推荐更加贴近实战的原型继承示例！</span></span><br></pre></td></tr></table></figure>\n\n<p>封装DOM查询：<a href=\"../../原型链/06_原型链操作的高级实例.html\">戳我查看完整示例代码</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Elem</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.elem = <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Elem.prototype.html = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">html</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (html == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.elem.innerHTML;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elem.innerHTML = html;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; <span class=\"comment\">// 返回this，便于链式操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Elem.prototype.on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventType, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (eventType != <span class=\"literal\">null</span> &amp;&amp; fn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elem.addEventListener(eventType, fn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请传入“事件类型”，“执行方法”！'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"keyword\">new</span> Elem(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">div.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(div.html());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-描述new一个对象的过程\"><a href=\"#3-描述new一个对象的过程\" class=\"headerlink\" title=\"3. 描述new一个对象的过程\"></a>3. 描述new一个对象的过程</h2><ul>\n<li>创建一个新对象</li>\n<li>this 指向这个新对象</li>\n<li>执行代码，即对this 赋值</li>\n<li>返回 this (这一步是默认的)</li>\n</ul>\n"},{"title":"关于ES6中import、export语句的种种引入方式、导出方式的区别","date":"2019-07-02T13:41:42.000Z","_content":"学习了这么长时间的Vue、React、还有nodeJs，对 `import` 语句可以说是既熟练又容易糊涂，我们经常见到以下几种 `import` 语句：\n\n- import {xx1, xx2, xx2} from 'xx'\n- improt * as xx from 'xx'\n- import xx from 'xx'\n\n那么接下来我们就好好分析一下他们的区别以及使用场景：\n\n## 1. import {xx1, xx2, xx2} from 'xx'\n\n该语句是引入外部模块中的某个接口，外部模块向外暴露出某个接口后，在主模块中可以引用该模块文件及其接口名称，即可调用该接口。需要注意的是，其接口名称是一一对应的关系。\n\n### 导出\n\n导出模块的方法基本上分为两种，一种是使用 `export` 语法分别导出对应的模块接口，如：\n\n```javascript\n// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n```\n\n还有一种就是将以接口的形式聚合导出，如：\n\n```javascript\n// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n```\n\n同时我们还可以使用 `as` 语法来对接口名称进行重命名，如：\n\n```javascript\n// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { \n\tfirstName as name1, \n\tlastName as name2, \n\tyear,\n\tyear as bornYaer\n};\n```\n\n### 引入\n\n引入模块接口需要按照接口名称一一对应引入：\n\n```javascript\n// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n```\n\n也可以使用 `as` 语法去对模块接口进行重命名：\n\n```javascript\n// main.js\nimport { firstName as name1, lastName as name2, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = name1 + ' ' + name2;\n}\n```\n\n## 2. improt * as xx from 'xx'\n\n这种加载方式我们称之为模块的整体加载，是用这种方式加载模块，所有的接口都会被加载并且存放到以 `as` 命名的对象中。\n\n### 导出\n\n```javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n```\n\n### 引入\n\n```javascript\n// main.js\n\nimport * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n```\n\n> 注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。\n\n## 3. import xx from 'xx'\n\n这种语法实际上是最常见的，从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。用这种方法可以加载模块文件默认导出的接口，并且按照用户自定义的变量名称去加载该默认接口。\n\n> 本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n### 导出\n\n默认接口使用 `export default` 语句导出，其可以是一个命名函数方法也可以是一个匿名函数方法。同时使用了 `export default` 语句导出默认接口的情况下，仍旧可以使用 `export` 语句导出命名接口：\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n### 引入\n\n在主文件中引用该模块可以直接使用 `import` 语句定义用户自定义变量来引入使用该接口:\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n## 4. 注意\n\n我们在编写模块导出模块接口时，使用 `export` 语句导出的变量、方法必须定义在语句之后，不能直接导出匿名函数、数值、字符串，如下面定义的导出都是非法的：\n\n```javascript\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n```\n\n> 上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。\n\n正确的写法为：\n\n```javascript\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n```\n\n但是当我们使用 `export default` 语句时，如果在语句中声明变量，就会产生报错，这点与 `export` 语句截然相反，其原因是因为 `export default` 语句实质上相当于导出了一个 `defalut` 变量，如果我们再语句中再声明一个变量自然就会报错。\n\n```javascript\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n```\n","source":"_posts/2019/关于import、export语句的种种引入方式、导出方式的区别.md","raw":"---\ntitle: 关于ES6中import、export语句的种种引入方式、导出方式的区别\ntags: [ES6]\ncategories: [Front, ES6]\ndate: 2019-07-02 21:41:42\n---\n学习了这么长时间的Vue、React、还有nodeJs，对 `import` 语句可以说是既熟练又容易糊涂，我们经常见到以下几种 `import` 语句：\n\n- import {xx1, xx2, xx2} from 'xx'\n- improt * as xx from 'xx'\n- import xx from 'xx'\n\n那么接下来我们就好好分析一下他们的区别以及使用场景：\n\n## 1. import {xx1, xx2, xx2} from 'xx'\n\n该语句是引入外部模块中的某个接口，外部模块向外暴露出某个接口后，在主模块中可以引用该模块文件及其接口名称，即可调用该接口。需要注意的是，其接口名称是一一对应的关系。\n\n### 导出\n\n导出模块的方法基本上分为两种，一种是使用 `export` 语法分别导出对应的模块接口，如：\n\n```javascript\n// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n```\n\n还有一种就是将以接口的形式聚合导出，如：\n\n```javascript\n// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n```\n\n同时我们还可以使用 `as` 语法来对接口名称进行重命名，如：\n\n```javascript\n// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { \n\tfirstName as name1, \n\tlastName as name2, \n\tyear,\n\tyear as bornYaer\n};\n```\n\n### 引入\n\n引入模块接口需要按照接口名称一一对应引入：\n\n```javascript\n// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n```\n\n也可以使用 `as` 语法去对模块接口进行重命名：\n\n```javascript\n// main.js\nimport { firstName as name1, lastName as name2, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = name1 + ' ' + name2;\n}\n```\n\n## 2. improt * as xx from 'xx'\n\n这种加载方式我们称之为模块的整体加载，是用这种方式加载模块，所有的接口都会被加载并且存放到以 `as` 命名的对象中。\n\n### 导出\n\n```javascript\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n```\n\n### 引入\n\n```javascript\n// main.js\n\nimport * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n```\n\n> 注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。\n\n## 3. import xx from 'xx'\n\n这种语法实际上是最常见的，从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。用这种方法可以加载模块文件默认导出的接口，并且按照用户自定义的变量名称去加载该默认接口。\n\n> 本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n### 导出\n\n默认接口使用 `export default` 语句导出，其可以是一个命名函数方法也可以是一个匿名函数方法。同时使用了 `export default` 语句导出默认接口的情况下，仍旧可以使用 `export` 语句导出命名接口：\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n### 引入\n\n在主文件中引用该模块可以直接使用 `import` 语句定义用户自定义变量来引入使用该接口:\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n## 4. 注意\n\n我们在编写模块导出模块接口时，使用 `export` 语句导出的变量、方法必须定义在语句之后，不能直接导出匿名函数、数值、字符串，如下面定义的导出都是非法的：\n\n```javascript\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n```\n\n> 上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。\n\n正确的写法为：\n\n```javascript\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n```\n\n但是当我们使用 `export default` 语句时，如果在语句中声明变量，就会产生报错，这点与 `export` 语句截然相反，其原因是因为 `export default` 语句实质上相当于导出了一个 `defalut` 变量，如果我们再语句中再声明一个变量自然就会报错。\n\n```javascript\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n```\n","slug":"关于import、export语句的种种引入方式、导出方式的区别","published":1,"updated":"2019-11-09T13:59:58.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxree00103w4u4rcpc2vz","content":"<p>学习了这么长时间的Vue、React、还有nodeJs，对 <code>import</code> 语句可以说是既熟练又容易糊涂，我们经常见到以下几种 <code>import</code> 语句：</p>\n<ul>\n<li>import {xx1, xx2, xx2} from ‘xx’</li>\n<li>improt * as xx from ‘xx’</li>\n<li>import xx from ‘xx’</li>\n</ul>\n<p>那么接下来我们就好好分析一下他们的区别以及使用场景：</p>\n<h2 id=\"1-import-xx1-xx2-xx2-from-‘xx’\"><a href=\"#1-import-xx1-xx2-xx2-from-‘xx’\" class=\"headerlink\" title=\"1. import {xx1, xx2, xx2} from ‘xx’\"></a>1. import {xx1, xx2, xx2} from ‘xx’</h2><p>该语句是引入外部模块中的某个接口，外部模块向外暴露出某个接口后，在主模块中可以引用该模块文件及其接口名称，即可调用该接口。需要注意的是，其接口名称是一一对应的关系。</p>\n<h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>导出模块的方法基本上分为两种，一种是使用 <code>export</code> 语法分别导出对应的模块接口，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br></pre></td></tr></table></figure>\n\n<p>还有一种就是将以接口的形式聚合导出，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同时我们还可以使用 <code>as</code> 语法来对接口名称进行重命名，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; </span><br><span class=\"line\">\tfirstName <span class=\"keyword\">as</span> name1, </span><br><span class=\"line\">\tlastName <span class=\"keyword\">as</span> name2, </span><br><span class=\"line\">\tyear,</span><br><span class=\"line\">\tyear <span class=\"keyword\">as</span> bornYaer</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>引入模块接口需要按照接口名称一一对应引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName, lastName, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>as</code> 语法去对模块接口进行重命名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName <span class=\"keyword\">as</span> name1, lastName <span class=\"keyword\">as</span> name2, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  element.textContent = name1 + <span class=\"string\">' '</span> + name2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-improt-as-xx-from-‘xx’\"><a href=\"#2-improt-as-xx-from-‘xx’\" class=\"headerlink\" title=\"2. improt * as xx from ‘xx’\"></a>2. improt * as xx from ‘xx’</h2><p>这种加载方式我们称之为模块的整体加载，是用这种方式加载模块，所有的接口都会被加载并且存放到以 <code>as</code> 命名的对象中。</p>\n<h3 id=\"导出-1\"><a href=\"#导出-1\" class=\"headerlink\" title=\"导出\"></a>导出</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入-1\"><a href=\"#引入-1\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + circle.area(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circle.circumference(<span class=\"number\">14</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p>\n</blockquote>\n<h2 id=\"3-import-xx-from-‘xx’\"><a href=\"#3-import-xx-from-‘xx’\" class=\"headerlink\" title=\"3. import xx from ‘xx’\"></a>3. import xx from ‘xx’</h2><p>这种语法实际上是最常见的，从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。用这种方法可以加载模块文件默认导出的接口，并且按照用户自定义的变量名称去加载该默认接口。</p>\n<blockquote>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n</blockquote>\n<h3 id=\"导出-2\"><a href=\"#导出-2\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>默认接口使用 <code>export default</code> 语句导出，其可以是一个命名函数方法也可以是一个匿名函数方法。同时使用了 <code>export default</code> 语句导出默认接口的情况下，仍旧可以使用 <code>export</code> 语句导出命名接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入-2\"><a href=\"#引入-2\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>在主文件中引用该模块可以直接使用 <code>import</code> 语句定义用户自定义变量来引入使用该接口:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4. 注意\"></a>4. 注意</h2><p>我们在编写模块导出模块接口时，使用 <code>export</code> 语句导出的变量、方法必须定义在语句之后，不能直接导出匿名函数、数值、字符串，如下面定义的导出都是非法的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> m;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。</p>\n</blockquote>\n<p>正确的写法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;m&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;n <span class=\"keyword\">as</span> m&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>但是当我们使用 <code>export default</code> 语句时，如果在语句中声明变量，就会产生报错，这点与 <code>export</code> 语句截然相反，其原因是因为 <code>export default</code> 语句实质上相当于导出了一个 <code>defalut</code> 变量，如果我们再语句中再声明一个变量自然就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>学习了这么长时间的Vue、React、还有nodeJs，对 <code>import</code> 语句可以说是既熟练又容易糊涂，我们经常见到以下几种 <code>import</code> 语句：</p>\n<ul>\n<li>import {xx1, xx2, xx2} from ‘xx’</li>\n<li>improt * as xx from ‘xx’</li>\n<li>import xx from ‘xx’</li>\n</ul>\n<p>那么接下来我们就好好分析一下他们的区别以及使用场景：</p>\n<h2 id=\"1-import-xx1-xx2-xx2-from-‘xx’\"><a href=\"#1-import-xx1-xx2-xx2-from-‘xx’\" class=\"headerlink\" title=\"1. import {xx1, xx2, xx2} from ‘xx’\"></a>1. import {xx1, xx2, xx2} from ‘xx’</h2><p>该语句是引入外部模块中的某个接口，外部模块向外暴露出某个接口后，在主模块中可以引用该模块文件及其接口名称，即可调用该接口。需要注意的是，其接口名称是一一对应的关系。</p>\n<h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>导出模块的方法基本上分为两种，一种是使用 <code>export</code> 语法分别导出对应的模块接口，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br></pre></td></tr></table></figure>\n\n<p>还有一种就是将以接口的形式聚合导出，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同时我们还可以使用 <code>as</code> 语法来对接口名称进行重命名，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; </span><br><span class=\"line\">\tfirstName <span class=\"keyword\">as</span> name1, </span><br><span class=\"line\">\tlastName <span class=\"keyword\">as</span> name2, </span><br><span class=\"line\">\tyear,</span><br><span class=\"line\">\tyear <span class=\"keyword\">as</span> bornYaer</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>引入模块接口需要按照接口名称一一对应引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName, lastName, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 <code>as</code> 语法去对模块接口进行重命名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName <span class=\"keyword\">as</span> name1, lastName <span class=\"keyword\">as</span> name2, year &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  element.textContent = name1 + <span class=\"string\">' '</span> + name2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-improt-as-xx-from-‘xx’\"><a href=\"#2-improt-as-xx-from-‘xx’\" class=\"headerlink\" title=\"2. improt * as xx from ‘xx’\"></a>2. improt * as xx from ‘xx’</h2><p>这种加载方式我们称之为模块的整体加载，是用这种方式加载模块，所有的接口都会被加载并且存放到以 <code>as</code> 命名的对象中。</p>\n<h3 id=\"导出-1\"><a href=\"#导出-1\" class=\"headerlink\" title=\"导出\"></a>导出</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// circle.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入-1\"><a href=\"#引入-1\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + circle.area(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circle.circumference(<span class=\"number\">14</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p>\n</blockquote>\n<h2 id=\"3-import-xx-from-‘xx’\"><a href=\"#3-import-xx-from-‘xx’\" class=\"headerlink\" title=\"3. import xx from ‘xx’\"></a>3. import xx from ‘xx’</h2><p>这种语法实际上是最常见的，从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。用这种方法可以加载模块文件默认导出的接口，并且按照用户自定义的变量名称去加载该默认接口。</p>\n<blockquote>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n</blockquote>\n<h3 id=\"导出-2\"><a href=\"#导出-2\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>默认接口使用 <code>export default</code> 语句导出，其可以是一个命名函数方法也可以是一个匿名函数方法。同时使用了 <code>export default</code> 语句导出默认接口的情况下，仍旧可以使用 <code>export</code> 语句导出命名接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入-2\"><a href=\"#引入-2\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>在主文件中引用该模块可以直接使用 <code>import</code> 语句定义用户自定义变量来引入使用该接口:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4. 注意\"></a>4. 注意</h2><p>我们在编写模块导出模块接口时，使用 <code>export</code> 语句导出的变量、方法必须定义在语句之后，不能直接导出匿名函数、数值、字符串，如下面定义的导出都是非法的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> m;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。</p>\n</blockquote>\n<p>正确的写法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;m&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;n <span class=\"keyword\">as</span> m&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>但是当我们使用 <code>export default</code> 语句时，如果在语句中声明变量，就会产生报错，这点与 <code>export</code> 语句截然相反，其原因是因为 <code>export default</code> 语句实质上相当于导出了一个 <code>defalut</code> 变量，如果我们再语句中再声明一个变量自然就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"实现vuex与组件data之间的数据同步更新","date":"2019-05-16T14:06:39.000Z","_content":"# 问题\n\n我们都知道，在Vue组件中，`data`部分的数据与视图之间是可以同步更新的，假如我们更新了`data`中的数据，那么视图上的数据就会被同步更新，这就是Vue所谓的数据驱动视图思想。\n\n当我们使用Vuex时，我们也可以通过在视图上通过 `$store.state.[DataKey]` 来获取Vuex中 `state` 的数据，且当 `state` 中的数据发生变化时，视图上的数据也是可以同步更新的，这似乎看起来很顺利。\n\n但是当我们想要通过将 `state` 中的数据绑定到Vue组件的 `data` 上，然后再在视图上去调用 `data` ，如下：\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInfo: this.$store.state.userInfo;\n    };\n  }\n};\n</script>\n```\n\n那么我们就会发现，当我们去改变 `state` 中的 `userInfo` 时，视图是不会更新的，相对应的 `data` 中的 `userInfo` 也不会被更改，因为这种调用方式是非常规的。\n\n当Vue在组件加载完毕前，会将 `data` 中的所有数据初始化完毕，之后便只会被动改变数据。然而等组件数据初始化完毕之后，即使 `state` 中的数据发生了改变， `data` 中的数据与其并非存在绑定关系，`data` 仅仅在数据初始化阶段去调用了 `state` 中的数据，所以 `data` 中的数据并不会根据 `state` 中的数据发生改变而改变。\n\n所以如果想在视图上实现与 `state` 中的数据保持同步更新的话，只能采用以下方式：\n\n```html\n<template>\n  <div>{{$store.state.userInfo}}</div> \n</template>\n```\n\n# 解决\n\n那么如果我们必须想要在 `data` 上绑定 `state` 中的数据，让 `state` 去驱动 `data` 发生改变，那我们该如何做呢？\n\n我们可以尝试以下两中方法：\n\n## 1. 使用computed属性去获取state中的数据\n\n这种方式其实并非是去调用了 `data` 中的数据，而是为组件添加了一个计算 `computed` 属性。`computed` 通常用于复杂数据的计算，它实际上是一个函数，在函数内部进行预算后，返回一个运算结果，同时它有一个重要的特性：**当在它内部需要进行预算的数据发生改变后，它重新进行数据运算并返回结果。** 所以，我们可以用 `computed` 去返回 `state` 中的数据，当 `state` 中的数据发生改变后，`computed` 会感知到，并重新获取 `state` 中的数据，并返回新的值。\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  computed: {\n    userInfo(){\n      return this.$store.state.userInfo;\n    }\n  }\n};\n</script>\n```\n\n## 2. 使用watch监听state中的数据\n\n这种方式就很好理解了，就是通过组件的 `watch` 属性，为 `state` 中的某一项数据添加一个监听，当数据发生改变的时候触发监听事件，在监听事件内部中去更改 `data` 中对应的数据，即可变相的让 `data` 中的数据去根据 `state` 中的数据发生改变而改变。\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInfo: this.$store.state.userInfo;\n    };\n  },\n  watch: {\n    \"this.$store.state.userInfo\"() {\n      this.userInfo = this.$store.getters.getUserInfo; // 按照规范在这里应该去使用getters来获取数据\n    }\n  }\n};\n</script>\n```","source":"_posts/2019/实现vuex与组件data之间的数据同步更新.md","raw":"---\ntitle: 实现vuex与组件data之间的数据同步更新\ntags: [Vue]\ncategories:\n  - Front\n  - Vue\ndate: 2019-05-16 22:06:39\n---\n# 问题\n\n我们都知道，在Vue组件中，`data`部分的数据与视图之间是可以同步更新的，假如我们更新了`data`中的数据，那么视图上的数据就会被同步更新，这就是Vue所谓的数据驱动视图思想。\n\n当我们使用Vuex时，我们也可以通过在视图上通过 `$store.state.[DataKey]` 来获取Vuex中 `state` 的数据，且当 `state` 中的数据发生变化时，视图上的数据也是可以同步更新的，这似乎看起来很顺利。\n\n但是当我们想要通过将 `state` 中的数据绑定到Vue组件的 `data` 上，然后再在视图上去调用 `data` ，如下：\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInfo: this.$store.state.userInfo;\n    };\n  }\n};\n</script>\n```\n\n那么我们就会发现，当我们去改变 `state` 中的 `userInfo` 时，视图是不会更新的，相对应的 `data` 中的 `userInfo` 也不会被更改，因为这种调用方式是非常规的。\n\n当Vue在组件加载完毕前，会将 `data` 中的所有数据初始化完毕，之后便只会被动改变数据。然而等组件数据初始化完毕之后，即使 `state` 中的数据发生了改变， `data` 中的数据与其并非存在绑定关系，`data` 仅仅在数据初始化阶段去调用了 `state` 中的数据，所以 `data` 中的数据并不会根据 `state` 中的数据发生改变而改变。\n\n所以如果想在视图上实现与 `state` 中的数据保持同步更新的话，只能采用以下方式：\n\n```html\n<template>\n  <div>{{$store.state.userInfo}}</div> \n</template>\n```\n\n# 解决\n\n那么如果我们必须想要在 `data` 上绑定 `state` 中的数据，让 `state` 去驱动 `data` 发生改变，那我们该如何做呢？\n\n我们可以尝试以下两中方法：\n\n## 1. 使用computed属性去获取state中的数据\n\n这种方式其实并非是去调用了 `data` 中的数据，而是为组件添加了一个计算 `computed` 属性。`computed` 通常用于复杂数据的计算，它实际上是一个函数，在函数内部进行预算后，返回一个运算结果，同时它有一个重要的特性：**当在它内部需要进行预算的数据发生改变后，它重新进行数据运算并返回结果。** 所以，我们可以用 `computed` 去返回 `state` 中的数据，当 `state` 中的数据发生改变后，`computed` 会感知到，并重新获取 `state` 中的数据，并返回新的值。\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  computed: {\n    userInfo(){\n      return this.$store.state.userInfo;\n    }\n  }\n};\n</script>\n```\n\n## 2. 使用watch监听state中的数据\n\n这种方式就很好理解了，就是通过组件的 `watch` 属性，为 `state` 中的某一项数据添加一个监听，当数据发生改变的时候触发监听事件，在监听事件内部中去更改 `data` 中对应的数据，即可变相的让 `data` 中的数据去根据 `state` 中的数据发生改变而改变。\n\n```html\n<template>\n  <div>{{userInfo}}</div> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInfo: this.$store.state.userInfo;\n    };\n  },\n  watch: {\n    \"this.$store.state.userInfo\"() {\n      this.userInfo = this.$store.getters.getUserInfo; // 按照规范在这里应该去使用getters来获取数据\n    }\n  }\n};\n</script>\n```","slug":"实现vuex与组件data之间的数据同步更新","published":1,"updated":"2019-11-09T14:06:58.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxref00133w4ucnch0o8b","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我们都知道，在Vue组件中，<code>data</code>部分的数据与视图之间是可以同步更新的，假如我们更新了<code>data</code>中的数据，那么视图上的数据就会被同步更新，这就是Vue所谓的数据驱动视图思想。</p>\n<p>当我们使用Vuex时，我们也可以通过在视图上通过 <code>$store.state.[DataKey]</code> 来获取Vuex中 <code>state</code> 的数据，且当 <code>state</code> 中的数据发生变化时，视图上的数据也是可以同步更新的，这似乎看起来很顺利。</p>\n<p>但是当我们想要通过将 <code>state</code> 中的数据绑定到Vue组件的 <code>data</code> 上，然后再在视图上去调用 <code>data</code> ，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      userInfo: <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么我们就会发现，当我们去改变 <code>state</code> 中的 <code>userInfo</code> 时，视图是不会更新的，相对应的 <code>data</code> 中的 <code>userInfo</code> 也不会被更改，因为这种调用方式是非常规的。</p>\n<p>当Vue在组件加载完毕前，会将 <code>data</code> 中的所有数据初始化完毕，之后便只会被动改变数据。然而等组件数据初始化完毕之后，即使 <code>state</code> 中的数据发生了改变， <code>data</code> 中的数据与其并非存在绑定关系，<code>data</code> 仅仅在数据初始化阶段去调用了 <code>state</code> 中的数据，所以 <code>data</code> 中的数据并不会根据 <code>state</code> 中的数据发生改变而改变。</p>\n<p>所以如果想在视图上实现与 <code>state</code> 中的数据保持同步更新的话，只能采用以下方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;$store.state.userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>那么如果我们必须想要在 <code>data</code> 上绑定 <code>state</code> 中的数据，让 <code>state</code> 去驱动 <code>data</code> 发生改变，那我们该如何做呢？</p>\n<p>我们可以尝试以下两中方法：</p>\n<h2 id=\"1-使用computed属性去获取state中的数据\"><a href=\"#1-使用computed属性去获取state中的数据\" class=\"headerlink\" title=\"1. 使用computed属性去获取state中的数据\"></a>1. 使用computed属性去获取state中的数据</h2><p>这种方式其实并非是去调用了 <code>data</code> 中的数据，而是为组件添加了一个计算 <code>computed</code> 属性。<code>computed</code> 通常用于复杂数据的计算，它实际上是一个函数，在函数内部进行预算后，返回一个运算结果，同时它有一个重要的特性：<strong>当在它内部需要进行预算的数据发生改变后，它重新进行数据运算并返回结果。</strong> 所以，我们可以用 <code>computed</code> 去返回 <code>state</code> 中的数据，当 <code>state</code> 中的数据发生改变后，<code>computed</code> 会感知到，并重新获取 <code>state</code> 中的数据，并返回新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    userInfo()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用watch监听state中的数据\"><a href=\"#2-使用watch监听state中的数据\" class=\"headerlink\" title=\"2. 使用watch监听state中的数据\"></a>2. 使用watch监听state中的数据</h2><p>这种方式就很好理解了，就是通过组件的 <code>watch</code> 属性，为 <code>state</code> 中的某一项数据添加一个监听，当数据发生改变的时候触发监听事件，在监听事件内部中去更改 <code>data</code> 中对应的数据，即可变相的让 <code>data</code> 中的数据去根据 <code>state</code> 中的数据发生改变而改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      userInfo: <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"string\">\"this.$store.state.userInfo\"</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.userInfo = <span class=\"keyword\">this</span>.$store.getters.getUserInfo; <span class=\"comment\">// 按照规范在这里应该去使用getters来获取数据</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我们都知道，在Vue组件中，<code>data</code>部分的数据与视图之间是可以同步更新的，假如我们更新了<code>data</code>中的数据，那么视图上的数据就会被同步更新，这就是Vue所谓的数据驱动视图思想。</p>\n<p>当我们使用Vuex时，我们也可以通过在视图上通过 <code>$store.state.[DataKey]</code> 来获取Vuex中 <code>state</code> 的数据，且当 <code>state</code> 中的数据发生变化时，视图上的数据也是可以同步更新的，这似乎看起来很顺利。</p>\n<p>但是当我们想要通过将 <code>state</code> 中的数据绑定到Vue组件的 <code>data</code> 上，然后再在视图上去调用 <code>data</code> ，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      userInfo: <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么我们就会发现，当我们去改变 <code>state</code> 中的 <code>userInfo</code> 时，视图是不会更新的，相对应的 <code>data</code> 中的 <code>userInfo</code> 也不会被更改，因为这种调用方式是非常规的。</p>\n<p>当Vue在组件加载完毕前，会将 <code>data</code> 中的所有数据初始化完毕，之后便只会被动改变数据。然而等组件数据初始化完毕之后，即使 <code>state</code> 中的数据发生了改变， <code>data</code> 中的数据与其并非存在绑定关系，<code>data</code> 仅仅在数据初始化阶段去调用了 <code>state</code> 中的数据，所以 <code>data</code> 中的数据并不会根据 <code>state</code> 中的数据发生改变而改变。</p>\n<p>所以如果想在视图上实现与 <code>state</code> 中的数据保持同步更新的话，只能采用以下方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;$store.state.userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>那么如果我们必须想要在 <code>data</code> 上绑定 <code>state</code> 中的数据，让 <code>state</code> 去驱动 <code>data</code> 发生改变，那我们该如何做呢？</p>\n<p>我们可以尝试以下两中方法：</p>\n<h2 id=\"1-使用computed属性去获取state中的数据\"><a href=\"#1-使用computed属性去获取state中的数据\" class=\"headerlink\" title=\"1. 使用computed属性去获取state中的数据\"></a>1. 使用computed属性去获取state中的数据</h2><p>这种方式其实并非是去调用了 <code>data</code> 中的数据，而是为组件添加了一个计算 <code>computed</code> 属性。<code>computed</code> 通常用于复杂数据的计算，它实际上是一个函数，在函数内部进行预算后，返回一个运算结果，同时它有一个重要的特性：<strong>当在它内部需要进行预算的数据发生改变后，它重新进行数据运算并返回结果。</strong> 所以，我们可以用 <code>computed</code> 去返回 <code>state</code> 中的数据，当 <code>state</code> 中的数据发生改变后，<code>computed</code> 会感知到，并重新获取 <code>state</code> 中的数据，并返回新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    userInfo()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用watch监听state中的数据\"><a href=\"#2-使用watch监听state中的数据\" class=\"headerlink\" title=\"2. 使用watch监听state中的数据\"></a>2. 使用watch监听state中的数据</h2><p>这种方式就很好理解了，就是通过组件的 <code>watch</code> 属性，为 <code>state</code> 中的某一项数据添加一个监听，当数据发生改变的时候触发监听事件，在监听事件内部中去更改 <code>data</code> 中对应的数据，即可变相的让 <code>data</code> 中的数据去根据 <code>state</code> 中的数据发生改变而改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      userInfo: <span class=\"keyword\">this</span>.$store.state.userInfo;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"string\">\"this.$store.state.userInfo\"</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.userInfo = <span class=\"keyword\">this</span>.$store.getters.getUserInfo; <span class=\"comment\">// 按照规范在这里应该去使用getters来获取数据</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"对Vue2.2中监听子组件事件的理解","date":"2019-02-17T13:44:44.000Z","_content":"[官方文档](https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6)\n\n## 解释\n所谓的 `监听子组件事件` ，就是当子组件内部触发了一个事件后，外部（也就是调用子组件的父级组件）应该能相应的感知到事件的触发，从而再出发一些列的操作。\n\n例如：子组件为一个按钮，当按钮被点击时，父级组件会感知，并触发想要触发的操作。\n\n## 实现思路\n**1.设定埋伏，准备捕捉子组件的操作**\n\n我们都知道，`v-on`操作可以用来监听某些预设好的事件，如input、change、click事件，同时也支持访问自定义的事件。所以，当我们调用已注册的组件，如`<blog-post>`组件，我们可以用`v-on`为组件预先绑定一个自定义的事件监听器，只要这个自定义事件被触发了，父级组件就会感知到，触发一个操作。具体的预先设置如下：\n```html\n<blog-post\n  ...\n  v-on:enlarge-text=\"postFontSize += 0.1\"\n></blog-post>\n```\n由此可见，我们监听的自定义事件命名为`enlarge-text`，捕捉到事件之后进行的操作为`postFontSize += 0.1`(postFontSize是Vue示例内部data部分的一个数据)。\n\n**2.子组件进行操作，告知父组件**\n\n我们再第一步设好了埋伏，创建了一个自定义事件，然后我们便需要在子组件中设置这个自定义事件是如何触发的，这里我们用到了`$emit`。\n\n`$emit`可以触发一个自定义事件，那么我们只要在子组件中使用`$emit('enlarge-text')`就可以告知父组件**子组件触发了相应的动作**。\n```html\nVue.component('blog-post', {\n  ...\n  template: `\n\t<button v-on:click=\"$emit('enlarge-text')\">\n\t  Enlarge text\n\t</button>\n  `\n})\n```\n如上，当子组件中的按钮被点击时，就触发了`$emit('enlarge-text')`，间接触发了`enlarge-text`自定义事件，然后触发了父组件调用子组件时设置的`v-on:enlarge-text`，最终触发了`postFontSize += 0.1`操作。\n\n> Note：要注意`$emit`只是用来触发一个自定义的事件，这个事件对应外部父组件调用子组件时，对子组件添加的`v-on`所监听的事件，`$emit`并不能触发任何函数操作，仅仅如同一个触发器。","source":"_posts/2019/对Vue2-2中监听子组件事件的理解.md","raw":"---\ntitle: 对Vue2.2中监听子组件事件的理解\ntags: [Vue]\ncategories:\n  - Front\n  - Vue\ndate: 2019-02-17 21:44:44\n---\n[官方文档](https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6)\n\n## 解释\n所谓的 `监听子组件事件` ，就是当子组件内部触发了一个事件后，外部（也就是调用子组件的父级组件）应该能相应的感知到事件的触发，从而再出发一些列的操作。\n\n例如：子组件为一个按钮，当按钮被点击时，父级组件会感知，并触发想要触发的操作。\n\n## 实现思路\n**1.设定埋伏，准备捕捉子组件的操作**\n\n我们都知道，`v-on`操作可以用来监听某些预设好的事件，如input、change、click事件，同时也支持访问自定义的事件。所以，当我们调用已注册的组件，如`<blog-post>`组件，我们可以用`v-on`为组件预先绑定一个自定义的事件监听器，只要这个自定义事件被触发了，父级组件就会感知到，触发一个操作。具体的预先设置如下：\n```html\n<blog-post\n  ...\n  v-on:enlarge-text=\"postFontSize += 0.1\"\n></blog-post>\n```\n由此可见，我们监听的自定义事件命名为`enlarge-text`，捕捉到事件之后进行的操作为`postFontSize += 0.1`(postFontSize是Vue示例内部data部分的一个数据)。\n\n**2.子组件进行操作，告知父组件**\n\n我们再第一步设好了埋伏，创建了一个自定义事件，然后我们便需要在子组件中设置这个自定义事件是如何触发的，这里我们用到了`$emit`。\n\n`$emit`可以触发一个自定义事件，那么我们只要在子组件中使用`$emit('enlarge-text')`就可以告知父组件**子组件触发了相应的动作**。\n```html\nVue.component('blog-post', {\n  ...\n  template: `\n\t<button v-on:click=\"$emit('enlarge-text')\">\n\t  Enlarge text\n\t</button>\n  `\n})\n```\n如上，当子组件中的按钮被点击时，就触发了`$emit('enlarge-text')`，间接触发了`enlarge-text`自定义事件，然后触发了父组件调用子组件时设置的`v-on:enlarge-text`，最终触发了`postFontSize += 0.1`操作。\n\n> Note：要注意`$emit`只是用来触发一个自定义的事件，这个事件对应外部父组件调用子组件时，对子组件添加的`v-on`所监听的事件，`$emit`并不能触发任何函数操作，仅仅如同一个触发器。","slug":"对Vue2-2中监听子组件事件的理解","published":1,"updated":"2019-11-09T13:46:41.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxreh00163w4ugozsamq4","content":"<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>所谓的 <code>监听子组件事件</code> ，就是当子组件内部触发了一个事件后，外部（也就是调用子组件的父级组件）应该能相应的感知到事件的触发，从而再出发一些列的操作。</p>\n<p>例如：子组件为一个按钮，当按钮被点击时，父级组件会感知，并触发想要触发的操作。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p><strong>1.设定埋伏，准备捕捉子组件的操作</strong></p>\n<p>我们都知道，<code>v-on</code>操作可以用来监听某些预设好的事件，如input、change、click事件，同时也支持访问自定义的事件。所以，当我们调用已注册的组件，如<code>&lt;blog-post&gt;</code>组件，我们可以用<code>v-on</code>为组件预先绑定一个自定义的事件监听器，只要这个自定义事件被触发了，父级组件就会感知到，触发一个操作。具体的预先设置如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += 0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由此可见，我们监听的自定义事件命名为<code>enlarge-text</code>，捕捉到事件之后进行的操作为<code>postFontSize += 0.1</code>(postFontSize是Vue示例内部data部分的一个数据)。</p>\n<p><strong>2.子组件进行操作，告知父组件</strong></p>\n<p>我们再第一步设好了埋伏，创建了一个自定义事件，然后我们便需要在子组件中设置这个自定义事件是如何触发的，这里我们用到了<code>$emit</code>。</p>\n<p><code>$emit</code>可以触发一个自定义事件，那么我们只要在子组件中使用<code>$emit(&#39;enlarge-text&#39;)</code>就可以告知父组件<strong>子组件触发了相应的动作</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text')\"</span>&gt;</span></span><br><span class=\"line\">\t  Enlarge text</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如上，当子组件中的按钮被点击时，就触发了<code>$emit(&#39;enlarge-text&#39;)</code>，间接触发了<code>enlarge-text</code>自定义事件，然后触发了父组件调用子组件时设置的<code>v-on:enlarge-text</code>，最终触发了<code>postFontSize += 0.1</code>操作。</p>\n<blockquote>\n<p>Note：要注意<code>$emit</code>只是用来触发一个自定义的事件，这个事件对应外部父组件调用子组件时，对子组件添加的<code>v-on</code>所监听的事件，<code>$emit</code>并不能触发任何函数操作，仅仅如同一个触发器。</p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>所谓的 <code>监听子组件事件</code> ，就是当子组件内部触发了一个事件后，外部（也就是调用子组件的父级组件）应该能相应的感知到事件的触发，从而再出发一些列的操作。</p>\n<p>例如：子组件为一个按钮，当按钮被点击时，父级组件会感知，并触发想要触发的操作。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p><strong>1.设定埋伏，准备捕捉子组件的操作</strong></p>\n<p>我们都知道，<code>v-on</code>操作可以用来监听某些预设好的事件，如input、change、click事件，同时也支持访问自定义的事件。所以，当我们调用已注册的组件，如<code>&lt;blog-post&gt;</code>组件，我们可以用<code>v-on</code>为组件预先绑定一个自定义的事件监听器，只要这个自定义事件被触发了，父级组件就会感知到，触发一个操作。具体的预先设置如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += 0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由此可见，我们监听的自定义事件命名为<code>enlarge-text</code>，捕捉到事件之后进行的操作为<code>postFontSize += 0.1</code>(postFontSize是Vue示例内部data部分的一个数据)。</p>\n<p><strong>2.子组件进行操作，告知父组件</strong></p>\n<p>我们再第一步设好了埋伏，创建了一个自定义事件，然后我们便需要在子组件中设置这个自定义事件是如何触发的，这里我们用到了<code>$emit</code>。</p>\n<p><code>$emit</code>可以触发一个自定义事件，那么我们只要在子组件中使用<code>$emit(&#39;enlarge-text&#39;)</code>就可以告知父组件<strong>子组件触发了相应的动作</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text')\"</span>&gt;</span></span><br><span class=\"line\">\t  Enlarge text</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如上，当子组件中的按钮被点击时，就触发了<code>$emit(&#39;enlarge-text&#39;)</code>，间接触发了<code>enlarge-text</code>自定义事件，然后触发了父组件调用子组件时设置的<code>v-on:enlarge-text</code>，最终触发了<code>postFontSize += 0.1</code>操作。</p>\n<blockquote>\n<p>Note：要注意<code>$emit</code>只是用来触发一个自定义的事件，这个事件对应外部父组件调用子组件时，对子组件添加的<code>v-on</code>所监听的事件，<code>$emit</code>并不能触发任何函数操作，仅仅如同一个触发器。</p>\n</blockquote>\n"},{"title":"腾讯面试总结","date":"2019-06-24T14:15:12.000Z","_content":"# 面试题目\n\n## 前聊\n\n1. 简单介绍一下你的情况？\n2. 实验室里写过什么项目？\n3. 你的停车位系统是什么？\n4. 你写项目用到了什么技术？\n5. 你了解过其他语言吗？\n\n## 问题\n\n1. Vue跟React的区别是什么？\n2. ES5跟ES6的区别？\n3. Promise函数的优点\n4. Promise函数跟async和await的区别\n5. 从用户输入url到页面渲染所经历的过程\n\t1. DNS的查找过程（×）\n\t2. 三次握手的过程\n\t3. 为什么要进行三次握手\n\t4. 不进行三次握手可以吗\n6. 前后台数据流的过程\n7. npm原理，有什么跟npm相似的包管理工具吗？\n8. 用户登录怎么做\n\t1. 服务器端怎么查找用户的信息\n\t2. 如何知晓TOKEN对应的用户？\n9. 你一般用Git做些什么？\n10. Git的常用指令有哪些，打Tag的指令是什么？（×）\n11. Git怎么处理分支冲突？\n12. 排序算法有哪些？介绍一下快速排序（×）\n13. 数据库... ...\n14. 平衡二叉树是个什么\n15. 了解Linux吗？要统计一个log文件下log的条数应该怎么操作？\n\n# 总结\n\n鹅厂的一轮前端面试题对后台的基础和掌握程度有所考察，让我一个前端有点瑟瑟发抖。HTTP协议、数据库、后台逻辑处理都有提问，数据结构完全阵亡，并且对前端工具也有所考核。\n\n以前没有考虑过会被提问那么多后台知识点，完全忽略了数据库，Git和Linux指令没有过全面了解，数据库也GG了。\n\nHTTP协议仍是重中之重，之前准备那么久的url到页面渲染的过程果然被提问了，这是一道危险题目，面试官会追问其中的细节，务必把每个细节都仔细了解，比较庆幸只提问了三次握手，没有详细询问四次挥手（否则有是emmmm）。\n\n数据结构第一次在面试中被问到，重点提问了二叉树和排序算法，然而完全没有准备。\n\n总之，知识库还需要补充Git指令、Linux指令、数据库的问题，数据结构还要继续深入（排序算法背也要背会！！！！！）\n\n> 什么时候能改了三秒钟记忆力的猫病啊（哀嚎）\n\n\n","source":"_posts/2019/腾讯面试总结.md","raw":"---\ntitle: 腾讯面试总结\ntags: [面试题]\ncategories:\n  - Life\ndate: 2019-06-24 22:15:12\n---\n# 面试题目\n\n## 前聊\n\n1. 简单介绍一下你的情况？\n2. 实验室里写过什么项目？\n3. 你的停车位系统是什么？\n4. 你写项目用到了什么技术？\n5. 你了解过其他语言吗？\n\n## 问题\n\n1. Vue跟React的区别是什么？\n2. ES5跟ES6的区别？\n3. Promise函数的优点\n4. Promise函数跟async和await的区别\n5. 从用户输入url到页面渲染所经历的过程\n\t1. DNS的查找过程（×）\n\t2. 三次握手的过程\n\t3. 为什么要进行三次握手\n\t4. 不进行三次握手可以吗\n6. 前后台数据流的过程\n7. npm原理，有什么跟npm相似的包管理工具吗？\n8. 用户登录怎么做\n\t1. 服务器端怎么查找用户的信息\n\t2. 如何知晓TOKEN对应的用户？\n9. 你一般用Git做些什么？\n10. Git的常用指令有哪些，打Tag的指令是什么？（×）\n11. Git怎么处理分支冲突？\n12. 排序算法有哪些？介绍一下快速排序（×）\n13. 数据库... ...\n14. 平衡二叉树是个什么\n15. 了解Linux吗？要统计一个log文件下log的条数应该怎么操作？\n\n# 总结\n\n鹅厂的一轮前端面试题对后台的基础和掌握程度有所考察，让我一个前端有点瑟瑟发抖。HTTP协议、数据库、后台逻辑处理都有提问，数据结构完全阵亡，并且对前端工具也有所考核。\n\n以前没有考虑过会被提问那么多后台知识点，完全忽略了数据库，Git和Linux指令没有过全面了解，数据库也GG了。\n\nHTTP协议仍是重中之重，之前准备那么久的url到页面渲染的过程果然被提问了，这是一道危险题目，面试官会追问其中的细节，务必把每个细节都仔细了解，比较庆幸只提问了三次握手，没有详细询问四次挥手（否则有是emmmm）。\n\n数据结构第一次在面试中被问到，重点提问了二叉树和排序算法，然而完全没有准备。\n\n总之，知识库还需要补充Git指令、Linux指令、数据库的问题，数据结构还要继续深入（排序算法背也要背会！！！！！）\n\n> 什么时候能改了三秒钟记忆力的猫病啊（哀嚎）\n\n\n","slug":"腾讯面试总结","published":1,"updated":"2019-11-09T14:16:13.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrej00193w4ucao81yb1","content":"<h1 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h1><h2 id=\"前聊\"><a href=\"#前聊\" class=\"headerlink\" title=\"前聊\"></a>前聊</h2><ol>\n<li>简单介绍一下你的情况？</li>\n<li>实验室里写过什么项目？</li>\n<li>你的停车位系统是什么？</li>\n<li>你写项目用到了什么技术？</li>\n<li>你了解过其他语言吗？</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>Vue跟React的区别是什么？</li>\n<li>ES5跟ES6的区别？</li>\n<li>Promise函数的优点</li>\n<li>Promise函数跟async和await的区别</li>\n<li>从用户输入url到页面渲染所经历的过程<ol>\n<li>DNS的查找过程（×）</li>\n<li>三次握手的过程</li>\n<li>为什么要进行三次握手</li>\n<li>不进行三次握手可以吗</li>\n</ol>\n</li>\n<li>前后台数据流的过程</li>\n<li>npm原理，有什么跟npm相似的包管理工具吗？</li>\n<li>用户登录怎么做<ol>\n<li>服务器端怎么查找用户的信息</li>\n<li>如何知晓TOKEN对应的用户？</li>\n</ol>\n</li>\n<li>你一般用Git做些什么？</li>\n<li>Git的常用指令有哪些，打Tag的指令是什么？（×）</li>\n<li>Git怎么处理分支冲突？</li>\n<li>排序算法有哪些？介绍一下快速排序（×）</li>\n<li>数据库… …</li>\n<li>平衡二叉树是个什么</li>\n<li>了解Linux吗？要统计一个log文件下log的条数应该怎么操作？</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>鹅厂的一轮前端面试题对后台的基础和掌握程度有所考察，让我一个前端有点瑟瑟发抖。HTTP协议、数据库、后台逻辑处理都有提问，数据结构完全阵亡，并且对前端工具也有所考核。</p>\n<p>以前没有考虑过会被提问那么多后台知识点，完全忽略了数据库，Git和Linux指令没有过全面了解，数据库也GG了。</p>\n<p>HTTP协议仍是重中之重，之前准备那么久的url到页面渲染的过程果然被提问了，这是一道危险题目，面试官会追问其中的细节，务必把每个细节都仔细了解，比较庆幸只提问了三次握手，没有详细询问四次挥手（否则有是emmmm）。</p>\n<p>数据结构第一次在面试中被问到，重点提问了二叉树和排序算法，然而完全没有准备。</p>\n<p>总之，知识库还需要补充Git指令、Linux指令、数据库的问题，数据结构还要继续深入（排序算法背也要背会！！！！！）</p>\n<blockquote>\n<p>什么时候能改了三秒钟记忆力的猫病啊（哀嚎）</p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"面试题目\"><a href=\"#面试题目\" class=\"headerlink\" title=\"面试题目\"></a>面试题目</h1><h2 id=\"前聊\"><a href=\"#前聊\" class=\"headerlink\" title=\"前聊\"></a>前聊</h2><ol>\n<li>简单介绍一下你的情况？</li>\n<li>实验室里写过什么项目？</li>\n<li>你的停车位系统是什么？</li>\n<li>你写项目用到了什么技术？</li>\n<li>你了解过其他语言吗？</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>Vue跟React的区别是什么？</li>\n<li>ES5跟ES6的区别？</li>\n<li>Promise函数的优点</li>\n<li>Promise函数跟async和await的区别</li>\n<li>从用户输入url到页面渲染所经历的过程<ol>\n<li>DNS的查找过程（×）</li>\n<li>三次握手的过程</li>\n<li>为什么要进行三次握手</li>\n<li>不进行三次握手可以吗</li>\n</ol>\n</li>\n<li>前后台数据流的过程</li>\n<li>npm原理，有什么跟npm相似的包管理工具吗？</li>\n<li>用户登录怎么做<ol>\n<li>服务器端怎么查找用户的信息</li>\n<li>如何知晓TOKEN对应的用户？</li>\n</ol>\n</li>\n<li>你一般用Git做些什么？</li>\n<li>Git的常用指令有哪些，打Tag的指令是什么？（×）</li>\n<li>Git怎么处理分支冲突？</li>\n<li>排序算法有哪些？介绍一下快速排序（×）</li>\n<li>数据库… …</li>\n<li>平衡二叉树是个什么</li>\n<li>了解Linux吗？要统计一个log文件下log的条数应该怎么操作？</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>鹅厂的一轮前端面试题对后台的基础和掌握程度有所考察，让我一个前端有点瑟瑟发抖。HTTP协议、数据库、后台逻辑处理都有提问，数据结构完全阵亡，并且对前端工具也有所考核。</p>\n<p>以前没有考虑过会被提问那么多后台知识点，完全忽略了数据库，Git和Linux指令没有过全面了解，数据库也GG了。</p>\n<p>HTTP协议仍是重中之重，之前准备那么久的url到页面渲染的过程果然被提问了，这是一道危险题目，面试官会追问其中的细节，务必把每个细节都仔细了解，比较庆幸只提问了三次握手，没有详细询问四次挥手（否则有是emmmm）。</p>\n<p>数据结构第一次在面试中被问到，重点提问了二叉树和排序算法，然而完全没有准备。</p>\n<p>总之，知识库还需要补充Git指令、Linux指令、数据库的问题，数据结构还要继续深入（排序算法背也要背会！！！！！）</p>\n<blockquote>\n<p>什么时候能改了三秒钟记忆力的猫病啊（哀嚎）</p>\n</blockquote>\n"},{"title":"Javascript设计模式——观察者模式与发布订阅模式的对比","date":"2019-01-12T14:00:57.000Z","_content":"# 1. 实现场景\n\n> 分析的例子来源于：https://www.zhihu.com/question/23486749 作者：无邪气\n\n存在有这样一个场景：当在一个数据中心中，用户需要从数据中心中取数据，等待数据中心将数据打包后，用户便可以获取数据。\n\n# 2. 观察者模式的实现\n\n## 2.1 UML类图\n\n![](http://markdown.img.esunr.xyz/观察者模式.png)\n\n## 2.2 具体实现\n\n在程序创建了一个任务中心后，再分别创建多个 DownloadTask 即创建多个下载任务，使用 `dataHub.addDownloadTask()` 来将下载任务添加到任务列表中，那么接下来当任务中心使用 `dataHub.notify()` 方法传入数据链接后，下载线程就会得到数据链接并实施具体的方法。\n\n> 客户端不会去主动调用下载线程（观察者）的 `finish()` 方法，而是交给数据中心（被观察对象）去调用。\n\n### 2.2.1 创建 DownloadTask 类作为观察者\n\nDownloadTask类即为该系统中的观察者，观察者有 `id`、`loaded`、`url` 属性，在其上面挂载了一个 `finish()` 方法，当被观察对象发出指令操作时，这个方法就会被触发。\n\n```javascript\nfunction DownloadTask(id) {\n  this.id = id;\n  this.loaded = false;\n  this.url = null;\n}\n\nDownloadTask.prototype.finish = function(url) {\n  this.loaded = true;\n  this.url = url;\n  console.log('Task ' + this.id + ' load data from ' + url);\n}\n```\n\n### 2.2.2 创建 DownloadTaskList 类作为管理器\n\nDownloadTaskList类主要负责提供一个任务队列和一些附加的管理方法，方便管理观察者：\n\n```javascript\nfunction DownloadTaskList() {\n  this.downloadTaskList = [];\n}\n\nDownloadTaskList.prototype.getCount = function() {\n  return this.downloadTaskList.length;\n};\n\nDownloadTaskList.prototype.get = function(index) {\n  return this.downloadTaskList[index];\n};\n\nDownloadTaskList.prototype.add = function(obj) {\n  return this.downloadTaskList.push(obj);\n};\n\nDownloadTaskList.prototype.remove = function(obj) {\n  const downloadTaskCount = this.downloadTasks.getCount();\n  while (i < downloadTaskCount) {\n    if (this.downloadTaskList[i] === obj) {\n      this.downloadTaskList.splice(i, 1);\n      break;\n    }\n    i++;\n  }\n};\n```\n\n### 2.2.3 创建 DataHub 类作为被观察对象\n\nDataHub类作为被观察对象，被观察对象通知观察者其实现原理就是在 `DataHub` 类的 `notify()` 方法中，去遍历数据中心中的下载队列（观察者队列）中的所有任务（观察者），在这些下载任务的实例（观察者）上调用其 `finish()` 方法，并传入参数 `url`。\n\n```javascript\nfunction DataHub() {\n  this.downloadTasks = new DownloadTaskList();\n}\n\nDataHub.prototype.addDownloadTask = function(downloadTask) {\n  this.downloadTasks.add(downloadTask);\n};\n\nDataHub.prototype.removeDownloadTask = function(downloadTask) {\n  this.downloadTasks.remove(downloadTask);\n};\n\nDataHub.prototype.notify = function(url) {\n  const downloadTaskCount = this.downloadTasks.getCount();\n  for (var i = 0; i < downloadTaskCount; i++) {\n    this.downloadTasks.get(i).finish(url);\n  }\n};\n```\n\n### 2.2.4 客户端\n```javascript\n// 创建一个数据中心\nvar dataHub = new DataHub();\n\n// 现在用户来取数据了，创建两个任务\nvar downloadTask1 = new DownloadTask(1);\nvar downloadTask2 = new DownloadTask(2);\n\n// 将任务添加到观察者队列中\ndataHub.addDownloadTask(downloadTask1);\ndataHub.addDownloadTask(downloadTask2);\n\n// 数据打包完成了\ndataHub.notify('http://somedomain.someaddress');\n```\n\n### 3.2.5 结果\n```\nTask 1 load data from http://somedomain.someaddress\nTask 2 load data from http://somedomain.someaddress\n```\n\n# 3. 发布订阅模式的实现\n\n## 3.1 UML类图\n\n![](http://markdown.img.esunr.xyz/发布订阅模式.png)\n\n## 3.2 具体实现\n### 3.2.1 定义 DataHub 类作为发布者\n\n创建 DataHub 作为事件的发布者，当发布者调用 `notify()` 方法后，会触发一个回调函数，在这个回调函数中会去调用 DownloadManager 对象下的 `publish()` 方法，这样就相当于做了一个事件的发布。\n\n```javascript\nfunction DataHub() {}\n\nDataHub.prototype.notify = function(url, callback) {\n  callback(url);\n}\n```\n\n### 3.2.2 定义 DownloadManager 类作为事件通道\n\nDownloadManager 对象是发布订阅模式中的数据处理中心，它负责了事件的订阅与发布，包括处理发布的消息数据。\n\nDownloadManager 类中有两个属性，一个是 `events` 存放了订阅事件以及对应事件的订阅者，`uId` 作为计数器，记录订阅者的ID。\n\n其中，`events` 的结构为：\n\n```javascript\n{ \n  \"订阅事件1\": [\n    {taskId: Number, handler: Function}, // 订阅者1_1\n    {taskId: Number, handler: Function}, // 订阅者1_2\n  ], \n  \"订阅事件2\": [\n    {taskId: Number, handler: Function}, // 订阅者2_1\n    {taskId: Number, handler: Function}, // 订阅者2_2\n  ]}\n}\n```\n\n```javascript\nfunction DownloadManager() {\n  this.events = {};\n  this.uId = -1;\n}\n```\n\n在 DownloadManager 的追加一个 publish 方法函数，用来给发布者发布某一事件：\n```javascript\n// 发布\nDownloadManager.prototype.publish = function(eventType, url) {\n  if (!this.events[eventType]) {\n    // 判断是否有订阅者订阅该事件,\n    return false;\n  }\n  // \n  var subscribers = this.events[eventType],\n    count = subscribers ? subscribers.length : 0;\n  // 循环遍历订阅事件队列中的订阅者\n  while (count--) {\n    var subscriber = subscribers[count];\n    subscriber.handler(eventType, subscriber.taskId, url);\n  }\n}\n```\n\n在 DownloadManager 的追加一个 subscribe 方法函数，用来给订阅者订阅某一事件：\n```javascript\n// 订阅\nDownloadManager.prototype.subscribe = function(eventType, handler) {\n  if (!this.events[eventType]) {\n    // 如果订阅的事件不存在，就在 events 对象中创建一个，让其值为一个空数组，用来存放订阅该事件的订阅者\n    this.events[eventType] = [];\n  }\n  var taskId = (++this.uId).toString();\n  // 将该订阅者放入对应的事件的订阅者队列中\n  this.events[eventType].push({\n    taskId: taskId,\n    handler: handler\n  });\n  return taskId;\n}\n```\n\n### 3.2.3 客户端函数\n\n客户端一定要遵循先设置订阅，后设置发布的原则。\n\n```javascript\n// 创建一个数据中心\nvar dataHub = new DataHub();\n\n// 创建一个下载事件管理器\nvar downloadManager = new DownloadManager();\n\n// 创建一个下载器\nvar dataLoader = function(eventType, taskId, url) {\n  console.log('Task ' + taskId + ' load data from ' + url);\n}\n\n// 用户来请求数据了，从 downloadManager 订阅事件\nvar downloadTask1 = downloadManager.subscribe('dataReady', dataLoader);\nvar downloadTask2 = downloadManager.subscribe('dataReady2', dataLoader);\n\n// 数据打包完成了\ndataHub.notify('http://somedomain.someaddress', function(url){\n  // 向 downloadManager 发布一个事件\n  downloadManager.publish('dataReady', url);\n});\n\ndataHub.notify('http://somedomain2.someaddress', function(url){\n  // 向 downloadManager 发布一个事件\n  downloadManager.publish('dataReady2', url);\n});\n```\n\n### 3.2.4 结果\n```\nTask 0 load data from http://somedomain.someaddress\nTask 1 load data from http://somedomain2.someaddress\n```\n\n\n# 4. 区别\n观察者模式不需要中间件，被观察对象可以直接将事件通知给观察者。\n\n然而发布订阅模式，则需要一个中间的发布订阅管理器，来进行发布事件与订阅事件的详细方法实现。\n\n\n\n","source":"_posts/2019/观察者模式与发布订阅模式的对比.md","raw":"---\ntitle: Javascript设计模式——观察者模式与发布订阅模式的对比\ndate: 2019-01-12 22:00:57\ntags: [JS, 设计模式]\ncategories: \n  - Front\n  - JS\n---\n# 1. 实现场景\n\n> 分析的例子来源于：https://www.zhihu.com/question/23486749 作者：无邪气\n\n存在有这样一个场景：当在一个数据中心中，用户需要从数据中心中取数据，等待数据中心将数据打包后，用户便可以获取数据。\n\n# 2. 观察者模式的实现\n\n## 2.1 UML类图\n\n![](http://markdown.img.esunr.xyz/观察者模式.png)\n\n## 2.2 具体实现\n\n在程序创建了一个任务中心后，再分别创建多个 DownloadTask 即创建多个下载任务，使用 `dataHub.addDownloadTask()` 来将下载任务添加到任务列表中，那么接下来当任务中心使用 `dataHub.notify()` 方法传入数据链接后，下载线程就会得到数据链接并实施具体的方法。\n\n> 客户端不会去主动调用下载线程（观察者）的 `finish()` 方法，而是交给数据中心（被观察对象）去调用。\n\n### 2.2.1 创建 DownloadTask 类作为观察者\n\nDownloadTask类即为该系统中的观察者，观察者有 `id`、`loaded`、`url` 属性，在其上面挂载了一个 `finish()` 方法，当被观察对象发出指令操作时，这个方法就会被触发。\n\n```javascript\nfunction DownloadTask(id) {\n  this.id = id;\n  this.loaded = false;\n  this.url = null;\n}\n\nDownloadTask.prototype.finish = function(url) {\n  this.loaded = true;\n  this.url = url;\n  console.log('Task ' + this.id + ' load data from ' + url);\n}\n```\n\n### 2.2.2 创建 DownloadTaskList 类作为管理器\n\nDownloadTaskList类主要负责提供一个任务队列和一些附加的管理方法，方便管理观察者：\n\n```javascript\nfunction DownloadTaskList() {\n  this.downloadTaskList = [];\n}\n\nDownloadTaskList.prototype.getCount = function() {\n  return this.downloadTaskList.length;\n};\n\nDownloadTaskList.prototype.get = function(index) {\n  return this.downloadTaskList[index];\n};\n\nDownloadTaskList.prototype.add = function(obj) {\n  return this.downloadTaskList.push(obj);\n};\n\nDownloadTaskList.prototype.remove = function(obj) {\n  const downloadTaskCount = this.downloadTasks.getCount();\n  while (i < downloadTaskCount) {\n    if (this.downloadTaskList[i] === obj) {\n      this.downloadTaskList.splice(i, 1);\n      break;\n    }\n    i++;\n  }\n};\n```\n\n### 2.2.3 创建 DataHub 类作为被观察对象\n\nDataHub类作为被观察对象，被观察对象通知观察者其实现原理就是在 `DataHub` 类的 `notify()` 方法中，去遍历数据中心中的下载队列（观察者队列）中的所有任务（观察者），在这些下载任务的实例（观察者）上调用其 `finish()` 方法，并传入参数 `url`。\n\n```javascript\nfunction DataHub() {\n  this.downloadTasks = new DownloadTaskList();\n}\n\nDataHub.prototype.addDownloadTask = function(downloadTask) {\n  this.downloadTasks.add(downloadTask);\n};\n\nDataHub.prototype.removeDownloadTask = function(downloadTask) {\n  this.downloadTasks.remove(downloadTask);\n};\n\nDataHub.prototype.notify = function(url) {\n  const downloadTaskCount = this.downloadTasks.getCount();\n  for (var i = 0; i < downloadTaskCount; i++) {\n    this.downloadTasks.get(i).finish(url);\n  }\n};\n```\n\n### 2.2.4 客户端\n```javascript\n// 创建一个数据中心\nvar dataHub = new DataHub();\n\n// 现在用户来取数据了，创建两个任务\nvar downloadTask1 = new DownloadTask(1);\nvar downloadTask2 = new DownloadTask(2);\n\n// 将任务添加到观察者队列中\ndataHub.addDownloadTask(downloadTask1);\ndataHub.addDownloadTask(downloadTask2);\n\n// 数据打包完成了\ndataHub.notify('http://somedomain.someaddress');\n```\n\n### 3.2.5 结果\n```\nTask 1 load data from http://somedomain.someaddress\nTask 2 load data from http://somedomain.someaddress\n```\n\n# 3. 发布订阅模式的实现\n\n## 3.1 UML类图\n\n![](http://markdown.img.esunr.xyz/发布订阅模式.png)\n\n## 3.2 具体实现\n### 3.2.1 定义 DataHub 类作为发布者\n\n创建 DataHub 作为事件的发布者，当发布者调用 `notify()` 方法后，会触发一个回调函数，在这个回调函数中会去调用 DownloadManager 对象下的 `publish()` 方法，这样就相当于做了一个事件的发布。\n\n```javascript\nfunction DataHub() {}\n\nDataHub.prototype.notify = function(url, callback) {\n  callback(url);\n}\n```\n\n### 3.2.2 定义 DownloadManager 类作为事件通道\n\nDownloadManager 对象是发布订阅模式中的数据处理中心，它负责了事件的订阅与发布，包括处理发布的消息数据。\n\nDownloadManager 类中有两个属性，一个是 `events` 存放了订阅事件以及对应事件的订阅者，`uId` 作为计数器，记录订阅者的ID。\n\n其中，`events` 的结构为：\n\n```javascript\n{ \n  \"订阅事件1\": [\n    {taskId: Number, handler: Function}, // 订阅者1_1\n    {taskId: Number, handler: Function}, // 订阅者1_2\n  ], \n  \"订阅事件2\": [\n    {taskId: Number, handler: Function}, // 订阅者2_1\n    {taskId: Number, handler: Function}, // 订阅者2_2\n  ]}\n}\n```\n\n```javascript\nfunction DownloadManager() {\n  this.events = {};\n  this.uId = -1;\n}\n```\n\n在 DownloadManager 的追加一个 publish 方法函数，用来给发布者发布某一事件：\n```javascript\n// 发布\nDownloadManager.prototype.publish = function(eventType, url) {\n  if (!this.events[eventType]) {\n    // 判断是否有订阅者订阅该事件,\n    return false;\n  }\n  // \n  var subscribers = this.events[eventType],\n    count = subscribers ? subscribers.length : 0;\n  // 循环遍历订阅事件队列中的订阅者\n  while (count--) {\n    var subscriber = subscribers[count];\n    subscriber.handler(eventType, subscriber.taskId, url);\n  }\n}\n```\n\n在 DownloadManager 的追加一个 subscribe 方法函数，用来给订阅者订阅某一事件：\n```javascript\n// 订阅\nDownloadManager.prototype.subscribe = function(eventType, handler) {\n  if (!this.events[eventType]) {\n    // 如果订阅的事件不存在，就在 events 对象中创建一个，让其值为一个空数组，用来存放订阅该事件的订阅者\n    this.events[eventType] = [];\n  }\n  var taskId = (++this.uId).toString();\n  // 将该订阅者放入对应的事件的订阅者队列中\n  this.events[eventType].push({\n    taskId: taskId,\n    handler: handler\n  });\n  return taskId;\n}\n```\n\n### 3.2.3 客户端函数\n\n客户端一定要遵循先设置订阅，后设置发布的原则。\n\n```javascript\n// 创建一个数据中心\nvar dataHub = new DataHub();\n\n// 创建一个下载事件管理器\nvar downloadManager = new DownloadManager();\n\n// 创建一个下载器\nvar dataLoader = function(eventType, taskId, url) {\n  console.log('Task ' + taskId + ' load data from ' + url);\n}\n\n// 用户来请求数据了，从 downloadManager 订阅事件\nvar downloadTask1 = downloadManager.subscribe('dataReady', dataLoader);\nvar downloadTask2 = downloadManager.subscribe('dataReady2', dataLoader);\n\n// 数据打包完成了\ndataHub.notify('http://somedomain.someaddress', function(url){\n  // 向 downloadManager 发布一个事件\n  downloadManager.publish('dataReady', url);\n});\n\ndataHub.notify('http://somedomain2.someaddress', function(url){\n  // 向 downloadManager 发布一个事件\n  downloadManager.publish('dataReady2', url);\n});\n```\n\n### 3.2.4 结果\n```\nTask 0 load data from http://somedomain.someaddress\nTask 1 load data from http://somedomain2.someaddress\n```\n\n\n# 4. 区别\n观察者模式不需要中间件，被观察对象可以直接将事件通知给观察者。\n\n然而发布订阅模式，则需要一个中间的发布订阅管理器，来进行发布事件与订阅事件的详细方法实现。\n\n\n\n","slug":"观察者模式与发布订阅模式的对比","published":1,"updated":"2019-11-09T14:03:23.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrek001c3w4uh6pfe2se","content":"<h1 id=\"1-实现场景\"><a href=\"#1-实现场景\" class=\"headerlink\" title=\"1. 实现场景\"></a>1. 实现场景</h1><blockquote>\n<p>分析的例子来源于：<a href=\"https://www.zhihu.com/question/23486749\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23486749</a> 作者：无邪气</p>\n</blockquote>\n<p>存在有这样一个场景：当在一个数据中心中，用户需要从数据中心中取数据，等待数据中心将数据打包后，用户便可以获取数据。</p>\n<h1 id=\"2-观察者模式的实现\"><a href=\"#2-观察者模式的实现\" class=\"headerlink\" title=\"2. 观察者模式的实现\"></a>2. 观察者模式的实现</h1><h2 id=\"2-1-UML类图\"><a href=\"#2-1-UML类图\" class=\"headerlink\" title=\"2.1 UML类图\"></a>2.1 UML类图</h2><p><img src=\"http://markdown.img.esunr.xyz/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<h2 id=\"2-2-具体实现\"><a href=\"#2-2-具体实现\" class=\"headerlink\" title=\"2.2 具体实现\"></a>2.2 具体实现</h2><p>在程序创建了一个任务中心后，再分别创建多个 DownloadTask 即创建多个下载任务，使用 <code>dataHub.addDownloadTask()</code> 来将下载任务添加到任务列表中，那么接下来当任务中心使用 <code>dataHub.notify()</code> 方法传入数据链接后，下载线程就会得到数据链接并实施具体的方法。</p>\n<blockquote>\n<p>客户端不会去主动调用下载线程（观察者）的 <code>finish()</code> 方法，而是交给数据中心（被观察对象）去调用。</p>\n</blockquote>\n<h3 id=\"2-2-1-创建-DownloadTask-类作为观察者\"><a href=\"#2-2-1-创建-DownloadTask-类作为观察者\" class=\"headerlink\" title=\"2.2.1 创建 DownloadTask 类作为观察者\"></a>2.2.1 创建 DownloadTask 类作为观察者</h3><p>DownloadTask类即为该系统中的观察者，观察者有 <code>id</code>、<code>loaded</code>、<code>url</code> 属性，在其上面挂载了一个 <code>finish()</code> 方法，当被观察对象发出指令操作时，这个方法就会被触发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadTask</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.url = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTask.prototype.finish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Task '</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">' load data from '</span> + url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-创建-DownloadTaskList-类作为管理器\"><a href=\"#2-2-2-创建-DownloadTaskList-类作为管理器\" class=\"headerlink\" title=\"2.2.2 创建 DownloadTaskList 类作为管理器\"></a>2.2.2 创建 DownloadTaskList 类作为管理器</h3><p>DownloadTaskList类主要负责提供一个任务队列和一些附加的管理方法，方便管理观察者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadTaskList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTaskList = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.getCount = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList.length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList.push(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadTaskCount = <span class=\"keyword\">this</span>.downloadTasks.getCount();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; downloadTaskCount) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.downloadTaskList[i] === obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.downloadTaskList.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-创建-DataHub-类作为被观察对象\"><a href=\"#2-2-3-创建-DataHub-类作为被观察对象\" class=\"headerlink\" title=\"2.2.3 创建 DataHub 类作为被观察对象\"></a>2.2.3 创建 DataHub 类作为被观察对象</h3><p>DataHub类作为被观察对象，被观察对象通知观察者其实现原理就是在 <code>DataHub</code> 类的 <code>notify()</code> 方法中，去遍历数据中心中的下载队列（观察者队列）中的所有任务（观察者），在这些下载任务的实例（观察者）上调用其 <code>finish()</code> 方法，并传入参数 <code>url</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DataHub</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks = <span class=\"keyword\">new</span> DownloadTaskList();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.addDownloadTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">downloadTask</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks.add(downloadTask);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.removeDownloadTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">downloadTask</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks.remove(downloadTask);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadTaskCount = <span class=\"keyword\">this</span>.downloadTasks.getCount();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; downloadTaskCount; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.downloadTasks.get(i).finish(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-4-客户端\"><a href=\"#2-2-4-客户端\" class=\"headerlink\" title=\"2.2.4 客户端\"></a>2.2.4 客户端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个数据中心</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataHub = <span class=\"keyword\">new</span> DataHub();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在用户来取数据了，创建两个任务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask1 = <span class=\"keyword\">new</span> DownloadTask(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask2 = <span class=\"keyword\">new</span> DownloadTask(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将任务添加到观察者队列中</span></span><br><span class=\"line\">dataHub.addDownloadTask(downloadTask1);</span><br><span class=\"line\">dataHub.addDownloadTask(downloadTask2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据打包完成了</span></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain.someaddress'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-5-结果\"><a href=\"#3-2-5-结果\" class=\"headerlink\" title=\"3.2.5 结果\"></a>3.2.5 结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task 1 load data from http://somedomain.someaddress</span><br><span class=\"line\">Task 2 load data from http://somedomain.someaddress</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-发布订阅模式的实现\"><a href=\"#3-发布订阅模式的实现\" class=\"headerlink\" title=\"3. 发布订阅模式的实现\"></a>3. 发布订阅模式的实现</h1><h2 id=\"3-1-UML类图\"><a href=\"#3-1-UML类图\" class=\"headerlink\" title=\"3.1 UML类图\"></a>3.1 UML类图</h2><p><img src=\"http://markdown.img.esunr.xyz/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<h2 id=\"3-2-具体实现\"><a href=\"#3-2-具体实现\" class=\"headerlink\" title=\"3.2 具体实现\"></a>3.2 具体实现</h2><h3 id=\"3-2-1-定义-DataHub-类作为发布者\"><a href=\"#3-2-1-定义-DataHub-类作为发布者\" class=\"headerlink\" title=\"3.2.1 定义 DataHub 类作为发布者\"></a>3.2.1 定义 DataHub 类作为发布者</h3><p>创建 DataHub 作为事件的发布者，当发布者调用 <code>notify()</code> 方法后，会触发一个回调函数，在这个回调函数中会去调用 DownloadManager 对象下的 <code>publish()</code> 方法，这样就相当于做了一个事件的发布。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DataHub</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">  callback(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-定义-DownloadManager-类作为事件通道\"><a href=\"#3-2-2-定义-DownloadManager-类作为事件通道\" class=\"headerlink\" title=\"3.2.2 定义 DownloadManager 类作为事件通道\"></a>3.2.2 定义 DownloadManager 类作为事件通道</h3><p>DownloadManager 对象是发布订阅模式中的数据处理中心，它负责了事件的订阅与发布，包括处理发布的消息数据。</p>\n<p>DownloadManager 类中有两个属性，一个是 <code>events</code> 存放了订阅事件以及对应事件的订阅者，<code>uId</code> 作为计数器，记录订阅者的ID。</p>\n<p>其中，<code>events</code> 的结构为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"string\">\"订阅事件1\"</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者1_1</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者1_2</span></span><br><span class=\"line\">  ], </span><br><span class=\"line\">  <span class=\"string\">\"订阅事件2\"</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者2_1</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者2_2</span></span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadManager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.uId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DownloadManager 的追加一个 publish 方法函数，用来给发布者发布某一事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发布</span></span><br><span class=\"line\">DownloadManager.prototype.publish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[eventType]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有订阅者订阅该事件,</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> subscribers = <span class=\"keyword\">this</span>.events[eventType],</span><br><span class=\"line\">    count = subscribers ? subscribers.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历订阅事件队列中的订阅者</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscriber = subscribers[count];</span><br><span class=\"line\">    subscriber.handler(eventType, subscriber.taskId, url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DownloadManager 的追加一个 subscribe 方法函数，用来给订阅者订阅某一事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅</span></span><br><span class=\"line\">DownloadManager.prototype.subscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[eventType]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果订阅的事件不存在，就在 events 对象中创建一个，让其值为一个空数组，用来存放订阅该事件的订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[eventType] = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> taskId = (++<span class=\"keyword\">this</span>.uId).toString();</span><br><span class=\"line\">  <span class=\"comment\">// 将该订阅者放入对应的事件的订阅者队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events[eventType].push(&#123;</span><br><span class=\"line\">    taskId: taskId,</span><br><span class=\"line\">    handler: handler</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> taskId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-客户端函数\"><a href=\"#3-2-3-客户端函数\" class=\"headerlink\" title=\"3.2.3 客户端函数\"></a>3.2.3 客户端函数</h3><p>客户端一定要遵循先设置订阅，后设置发布的原则。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个数据中心</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataHub = <span class=\"keyword\">new</span> DataHub();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个下载事件管理器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadManager = <span class=\"keyword\">new</span> DownloadManager();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个下载器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataLoader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, taskId, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Task '</span> + taskId + <span class=\"string\">' load data from '</span> + url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户来请求数据了，从 downloadManager 订阅事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask1 = downloadManager.subscribe(<span class=\"string\">'dataReady'</span>, dataLoader);</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask2 = downloadManager.subscribe(<span class=\"string\">'dataReady2'</span>, dataLoader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据打包完成了</span></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain.someaddress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 downloadManager 发布一个事件</span></span><br><span class=\"line\">  downloadManager.publish(<span class=\"string\">'dataReady'</span>, url);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain2.someaddress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 downloadManager 发布一个事件</span></span><br><span class=\"line\">  downloadManager.publish(<span class=\"string\">'dataReady2'</span>, url);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-4-结果\"><a href=\"#3-2-4-结果\" class=\"headerlink\" title=\"3.2.4 结果\"></a>3.2.4 结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task 0 load data from http://somedomain.someaddress</span><br><span class=\"line\">Task 1 load data from http://somedomain2.someaddress</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"4-区别\"><a href=\"#4-区别\" class=\"headerlink\" title=\"4. 区别\"></a>4. 区别</h1><p>观察者模式不需要中间件，被观察对象可以直接将事件通知给观察者。</p>\n<p>然而发布订阅模式，则需要一个中间的发布订阅管理器，来进行发布事件与订阅事件的详细方法实现。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-实现场景\"><a href=\"#1-实现场景\" class=\"headerlink\" title=\"1. 实现场景\"></a>1. 实现场景</h1><blockquote>\n<p>分析的例子来源于：<a href=\"https://www.zhihu.com/question/23486749\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23486749</a> 作者：无邪气</p>\n</blockquote>\n<p>存在有这样一个场景：当在一个数据中心中，用户需要从数据中心中取数据，等待数据中心将数据打包后，用户便可以获取数据。</p>\n<h1 id=\"2-观察者模式的实现\"><a href=\"#2-观察者模式的实现\" class=\"headerlink\" title=\"2. 观察者模式的实现\"></a>2. 观察者模式的实现</h1><h2 id=\"2-1-UML类图\"><a href=\"#2-1-UML类图\" class=\"headerlink\" title=\"2.1 UML类图\"></a>2.1 UML类图</h2><p><img src=\"http://markdown.img.esunr.xyz/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<h2 id=\"2-2-具体实现\"><a href=\"#2-2-具体实现\" class=\"headerlink\" title=\"2.2 具体实现\"></a>2.2 具体实现</h2><p>在程序创建了一个任务中心后，再分别创建多个 DownloadTask 即创建多个下载任务，使用 <code>dataHub.addDownloadTask()</code> 来将下载任务添加到任务列表中，那么接下来当任务中心使用 <code>dataHub.notify()</code> 方法传入数据链接后，下载线程就会得到数据链接并实施具体的方法。</p>\n<blockquote>\n<p>客户端不会去主动调用下载线程（观察者）的 <code>finish()</code> 方法，而是交给数据中心（被观察对象）去调用。</p>\n</blockquote>\n<h3 id=\"2-2-1-创建-DownloadTask-类作为观察者\"><a href=\"#2-2-1-创建-DownloadTask-类作为观察者\" class=\"headerlink\" title=\"2.2.1 创建 DownloadTask 类作为观察者\"></a>2.2.1 创建 DownloadTask 类作为观察者</h3><p>DownloadTask类即为该系统中的观察者，观察者有 <code>id</code>、<code>loaded</code>、<code>url</code> 属性，在其上面挂载了一个 <code>finish()</code> 方法，当被观察对象发出指令操作时，这个方法就会被触发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadTask</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.url = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTask.prototype.finish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Task '</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">' load data from '</span> + url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-创建-DownloadTaskList-类作为管理器\"><a href=\"#2-2-2-创建-DownloadTaskList-类作为管理器\" class=\"headerlink\" title=\"2.2.2 创建 DownloadTaskList 类作为管理器\"></a>2.2.2 创建 DownloadTaskList 类作为管理器</h3><p>DownloadTaskList类主要负责提供一个任务队列和一些附加的管理方法，方便管理观察者：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadTaskList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTaskList = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.getCount = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList.length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList[index];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.downloadTaskList.push(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DownloadTaskList.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadTaskCount = <span class=\"keyword\">this</span>.downloadTasks.getCount();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; downloadTaskCount) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.downloadTaskList[i] === obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.downloadTaskList.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-创建-DataHub-类作为被观察对象\"><a href=\"#2-2-3-创建-DataHub-类作为被观察对象\" class=\"headerlink\" title=\"2.2.3 创建 DataHub 类作为被观察对象\"></a>2.2.3 创建 DataHub 类作为被观察对象</h3><p>DataHub类作为被观察对象，被观察对象通知观察者其实现原理就是在 <code>DataHub</code> 类的 <code>notify()</code> 方法中，去遍历数据中心中的下载队列（观察者队列）中的所有任务（观察者），在这些下载任务的实例（观察者）上调用其 <code>finish()</code> 方法，并传入参数 <code>url</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DataHub</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks = <span class=\"keyword\">new</span> DownloadTaskList();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.addDownloadTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">downloadTask</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks.add(downloadTask);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.removeDownloadTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">downloadTask</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.downloadTasks.remove(downloadTask);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadTaskCount = <span class=\"keyword\">this</span>.downloadTasks.getCount();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; downloadTaskCount; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.downloadTasks.get(i).finish(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-4-客户端\"><a href=\"#2-2-4-客户端\" class=\"headerlink\" title=\"2.2.4 客户端\"></a>2.2.4 客户端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个数据中心</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataHub = <span class=\"keyword\">new</span> DataHub();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在用户来取数据了，创建两个任务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask1 = <span class=\"keyword\">new</span> DownloadTask(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask2 = <span class=\"keyword\">new</span> DownloadTask(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将任务添加到观察者队列中</span></span><br><span class=\"line\">dataHub.addDownloadTask(downloadTask1);</span><br><span class=\"line\">dataHub.addDownloadTask(downloadTask2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据打包完成了</span></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain.someaddress'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-5-结果\"><a href=\"#3-2-5-结果\" class=\"headerlink\" title=\"3.2.5 结果\"></a>3.2.5 结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task 1 load data from http://somedomain.someaddress</span><br><span class=\"line\">Task 2 load data from http://somedomain.someaddress</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-发布订阅模式的实现\"><a href=\"#3-发布订阅模式的实现\" class=\"headerlink\" title=\"3. 发布订阅模式的实现\"></a>3. 发布订阅模式的实现</h1><h2 id=\"3-1-UML类图\"><a href=\"#3-1-UML类图\" class=\"headerlink\" title=\"3.1 UML类图\"></a>3.1 UML类图</h2><p><img src=\"http://markdown.img.esunr.xyz/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<h2 id=\"3-2-具体实现\"><a href=\"#3-2-具体实现\" class=\"headerlink\" title=\"3.2 具体实现\"></a>3.2 具体实现</h2><h3 id=\"3-2-1-定义-DataHub-类作为发布者\"><a href=\"#3-2-1-定义-DataHub-类作为发布者\" class=\"headerlink\" title=\"3.2.1 定义 DataHub 类作为发布者\"></a>3.2.1 定义 DataHub 类作为发布者</h3><p>创建 DataHub 作为事件的发布者，当发布者调用 <code>notify()</code> 方法后，会触发一个回调函数，在这个回调函数中会去调用 DownloadManager 对象下的 <code>publish()</code> 方法，这样就相当于做了一个事件的发布。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DataHub</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataHub.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">  callback(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-定义-DownloadManager-类作为事件通道\"><a href=\"#3-2-2-定义-DownloadManager-类作为事件通道\" class=\"headerlink\" title=\"3.2.2 定义 DownloadManager 类作为事件通道\"></a>3.2.2 定义 DownloadManager 类作为事件通道</h3><p>DownloadManager 对象是发布订阅模式中的数据处理中心，它负责了事件的订阅与发布，包括处理发布的消息数据。</p>\n<p>DownloadManager 类中有两个属性，一个是 <code>events</code> 存放了订阅事件以及对应事件的订阅者，<code>uId</code> 作为计数器，记录订阅者的ID。</p>\n<p>其中，<code>events</code> 的结构为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"string\">\"订阅事件1\"</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者1_1</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者1_2</span></span><br><span class=\"line\">  ], </span><br><span class=\"line\">  <span class=\"string\">\"订阅事件2\"</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者2_1</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">taskId</span>: <span class=\"built_in\">Number</span>, <span class=\"attr\">handler</span>: <span class=\"built_in\">Function</span>&#125;, <span class=\"comment\">// 订阅者2_2</span></span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DownloadManager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.uId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DownloadManager 的追加一个 publish 方法函数，用来给发布者发布某一事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发布</span></span><br><span class=\"line\">DownloadManager.prototype.publish = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[eventType]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有订阅者订阅该事件,</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> subscribers = <span class=\"keyword\">this</span>.events[eventType],</span><br><span class=\"line\">    count = subscribers ? subscribers.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历订阅事件队列中的订阅者</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscriber = subscribers[count];</span><br><span class=\"line\">    subscriber.handler(eventType, subscriber.taskId, url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DownloadManager 的追加一个 subscribe 方法函数，用来给订阅者订阅某一事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅</span></span><br><span class=\"line\">DownloadManager.prototype.subscribe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[eventType]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果订阅的事件不存在，就在 events 对象中创建一个，让其值为一个空数组，用来存放订阅该事件的订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[eventType] = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> taskId = (++<span class=\"keyword\">this</span>.uId).toString();</span><br><span class=\"line\">  <span class=\"comment\">// 将该订阅者放入对应的事件的订阅者队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.events[eventType].push(&#123;</span><br><span class=\"line\">    taskId: taskId,</span><br><span class=\"line\">    handler: handler</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> taskId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-客户端函数\"><a href=\"#3-2-3-客户端函数\" class=\"headerlink\" title=\"3.2.3 客户端函数\"></a>3.2.3 客户端函数</h3><p>客户端一定要遵循先设置订阅，后设置发布的原则。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个数据中心</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataHub = <span class=\"keyword\">new</span> DataHub();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个下载事件管理器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadManager = <span class=\"keyword\">new</span> DownloadManager();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个下载器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataLoader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, taskId, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Task '</span> + taskId + <span class=\"string\">' load data from '</span> + url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户来请求数据了，从 downloadManager 订阅事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask1 = downloadManager.subscribe(<span class=\"string\">'dataReady'</span>, dataLoader);</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadTask2 = downloadManager.subscribe(<span class=\"string\">'dataReady2'</span>, dataLoader);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据打包完成了</span></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain.someaddress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 downloadManager 发布一个事件</span></span><br><span class=\"line\">  downloadManager.publish(<span class=\"string\">'dataReady'</span>, url);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">dataHub.notify(<span class=\"string\">'http://somedomain2.someaddress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 downloadManager 发布一个事件</span></span><br><span class=\"line\">  downloadManager.publish(<span class=\"string\">'dataReady2'</span>, url);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-4-结果\"><a href=\"#3-2-4-结果\" class=\"headerlink\" title=\"3.2.4 结果\"></a>3.2.4 结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task 0 load data from http://somedomain.someaddress</span><br><span class=\"line\">Task 1 load data from http://somedomain2.someaddress</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"4-区别\"><a href=\"#4-区别\" class=\"headerlink\" title=\"4. 区别\"></a>4. 区别</h1><p>观察者模式不需要中间件，被观察对象可以直接将事件通知给观察者。</p>\n<p>然而发布订阅模式，则需要一个中间的发布订阅管理器，来进行发布事件与订阅事件的详细方法实现。</p>\n"},{"title":"Canvas快速使用教程","date":"2019-05-03T13:55:41.000Z","_content":"# Canvas概述\n\n## 1. 与Flas的区别\nCanvas 和Flash的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素。Canvas更流畅，手机端也嗷嗷流畅。\n\n\n## 2. 创建Canvas画布标签\n\n显示默认提醒消息：如果浏览器不支持Canvas，Canvas会被默认渲染为普通标签显示文字\n\n```html\n<canvas width=\"200px\" height=\"200px\">对不起您的浏览器不支持画布！</canvas>\n```\n\n注意：Canvas有一个默认宽高，大概为`300 x 150`，如果我们用CSS样式去设置Canvas的宽高，会导致画布扭曲，必须在Canvas标签内部，以属性的方式去添加宽高值。\n\n## 3. 用Javascript操作2D画布\n\n首先要获取到画布对象：\n```html\n<canvas id=\"myCanvas\" width=\"800px\" height=\"500px\">对不起您的浏览器不支持画布！</canvas>\n\n<script>\n  var myCanvas = document.querySelector(\"#myCanvas\")\n</script>\n```\n\n获取到画布后，使用画布对象上的 `.getContext()` 方法新建一个画布\n```javascript\n// 设置上下文，就相当于打开ps之后让你新建画布\nvar ctx = myCanvas.getContext('2d');\n```\n\n之后就可以对画布进行详细的样式操作（要在绘制动作前设置样式），如设置背景颜色：\n```javascript\nctx.fillStyle = \"pink\"\n```\n\n设置完样式之后就可以进行绘制操作，如绘制成一个矩形（Rect）\n```javascript\nctx.fillRect(100, 100, 300, 200)\n// fillRect方法中的参数为设置绘制点的坐标，单位为px\n```\n\n## 4. API\n方法：\n```\nfillRect(a, b, c, d) 绘制一个填充矩形，abcd分别为四个坐标\n```\n\n属性：\n```\nfillStyle 设置填充颜色；\n```\n\n# 笔触、填充\n\n## 1. 简述\n笔触也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。\n\n笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。\n\n## 3. 绘制路径\n\n使用 `beginPath()` 代表开始绘制；`moveTo(x, y)` 代表将笔触移动到某一坐标；`lineTo(x, y)` 代表直线绘制到某一点；使用 `stroke()` 能将绘制的图像显示出来。\n\n如下可以绘制出一条折线：\n\n```javascript\nctx.beginPath();\nctx.moveTo(100, 100);\nctx.lineTo(300, 300);\nctx.lineTo(600, 300);\nctx.stroke();\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpbjrdg2j20es086q2s.jpg)\n\n使用 `closePath()` 可以将最后一个绘制点【该绘制点是被用`moveTo(x, y)`打断绘制前的那个点】与第一个绘制点连接：\n\n```javascript\n  ctx.beginPath();\n  ctx.moveTo(100, 100);\n  ctx.lineTo(300, 300);\n  ctx.lineTo(600, 300);\n+ ctx.closePath();\n  ctx.stroke();\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpe43stnj20eq07jjr9.jpg)\n\n连续使用 `moveTo()` 可以让开始新的绘制点：\n```javascript\nctx.beginPath();\nctx.moveTo(100, 100);\nctx.lineTo(300, 300);\nctx.lineTo(600, 300);\n\nctx.moveTo(600, 400);\nctx.lineTo(700, 400);\nctx.stroke();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpg9p7m3j20h009dwed.jpg)\n\n## 4. 绘制样式\n\n在绘制前可以对绘制的线段进行样式设置：\n\n```javascript\nctx.lineWidth = \"10\";\nctx.strokeStyle = \"red\";\n... ...\nctx.stock();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpw1q9aqj20hk0a9a9y.jpg)\n\n\n在绘制之后，使用 `fill()` 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 `fillStyle` 属性可以来设置填充颜色：\n\n```javascript\n... ...\nctx.stock();\nctx.fillStyle = \"skyblue\"\nctx.fill();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lq0n8juzj20hh09wmx4.jpg)\n\n使用了 `fill()` 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。\n\n## 6. 快速绘制\n\n`strokeReact(x, y, w, h)`快速绘制一个矩形\n```javascript\nctx.fillStyle = \"lightseagreen\"\nctx.strokeReact(100, 100, 300, 200);\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lqaiu2eoj20b706xt8j.jpg)\n\nfilRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：\n\n```javascript\nctx.move(100，100);\nctx.lineTo(400，100);\nctx.lineTo(400，300);\nctx.lineTo(100，300);\nctx.closePath（);\nctx.fill();\n```\n\n## 6. 绘制复杂图像\n\n```javascript\nfor (var i = 0; i <= 500; i += 10) {\n  ctx.beginPath();\n  ctx.moveTo(i, i);\n  ctx.lineTo(i + 200, i);\n  ctx.lineTo(i, i + 300);\n  ctx.closePath();\n  ctx.stroke();\n}\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lqfwcsqoj20js0edmxi.jpg)\n\n## 7. API\n\n方法:\n```\nbeginPath() 代表开始绘制\n\nmoveTo(x, y) 代表将笔触移动到某一坐标\n\nlineTo(x, y) 代表直线绘制到某一点\n\nstroke() 能将绘制的图像显示出来\n\nfill() 可以填充封闭图像\n```\n\n属性：\n```\nlineWidth 设置绘制线的宽度\n\nstrokeStyle 设置绘制线的颜色样式\n\nfillStyle 设置填充色的样式\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpnbvtz1j20ny0budhr.jpg)\n\n\n\n\n\n\n# 弧\n\n## 1. 绘制弧线\n使用 `arc(x, y, r, startRad, endRad, bollen)` 绘制弧线，arc属于笔触，需要使用`beginPath()`和`stroke()`来设置开始与绘制动作。\n\n```javascript\nctx.beginPath();\nctx.arc(200, 200, 100, 0, 1, true);\nctx.stroke();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2ly5tu2fnj20bj08jjrg.jpg)\n\n整圆就是 `ctx.arc(200, 200, 100, 0, Math.PI*2, true);`\n\n绘制笑脸的方法：\n\n```html\n<canvas id=\"myCanvas\" width=\"800px\" height=\"500px\">对不起您的浏览器不支持画布！</canvas>\n\n<script>\n  // 得到画布\n  var myCanvas = document.querySelector(\"#myCanvas\")\n  // 上下文，就相当于打开ps之后让你新建画布\n  var ctx = myCanvas.getContext('2d');\n  // 开始绘制路径\n  ctx.beginPath();\n  ctx.arc(200, 200, 200, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(90, 140, 30, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(300, 140, 30, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(200, 200, 100, 0.6, 2.5, false);\n  ctx.stroke();\n</script>\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lyb1ahmfj20bc0bt0sz.jpg)\n\n## 2. API\n方法：\n```\narc(x, y, r, startRad, endRad, bollen) \n绘制弧度，xy为圆心坐标，r为绘制半径，startRad为初始角度，endRad为最终角度，bollen设置为true为逆时针绘制false为顺时针绘制\n```\n\n\n\n\n\n# 绘制渐变\n## 1. 创建渐变色\n使用 `createLinearrGradient(x1, y1, x2, y2)` 创建一个渐变对象，用 `addColorStop(rate, color)` 添加渐变颜色，将画布的 `fillStyle` 属性设置为这个渐变对象，即可以填充渐变颜色。\n\n如绘制一个矩形，矩形内的填充色为从`blue`渐变到`red`\n```javascript\nvar lingrad = ctx.createLinearGradient(100, 100, 400, 400);\nlingrad.addColorStop(0, 'red');\nlingrad.addColorStop(1, 'blue');\n\nctx.fillStyle = lingrad;\nctx.fillRect(100, 100, 300, 300);\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lzazsgdcj20es0erglz.jpg)\n\n## 2. API\n\n方法：\n```\ncreateLinearrGradient(x1, y1, x2, y2) \n创建一个渐变对象，(x1, y1)是渐变的起始坐标，(x2, y2)是渐变的结束坐标\n\naddColorStop(rate, color)\n添加渐变颜色，rate为一个int值，初始值为0，colr为一个颜色\n```\n\n\n\n\n\n\n\n# 文字\n\n## 1. 添加文字\n使用 `fillText(content, x, y)` 来设置文字，注意(x, y)为文字基线的位置\n```javascript\nctx.fillText(\"你好\", 100, 100);\n```\n\n## 2. 调整样式\n通过 `font` 属性来设置字体、字号\n```javascript\nctx.font = \"宋体\"\n```\n`font` 的级联样式 `ctx.font = \"font-size font-family\"`\n\n\n\n\n\n\n\n# 使用图片\n## 1. 添加图片\n添加一个图片首先要创建一个`img`的实例，设置实例的`src`，监听这个实例的load事件，当图片加载完成后，利用 `drawImage(img, x, y)` 绘制出图片，如下实例：\n```javascript\nvar img = new Image();\nimg.src = \"images/0.jpg\";\nimg.onload = function(){\n  ctx.drawImage(img, 100, 100);\n}\n```\n\n## 2. API\n```\ndrawImage(img, x, y, w, h) \nimg为一个图片示例，xy为图片左上角坐标，w为图片宽度，h为图片高度\n\ndrawImage(img, X, Y, W, H, x, y, w, h) \nimg为一个图片示例，XYWH可以设置图片的切片位置\n```\n\n\n# 运动\n## 1. 原理\ncanvas中元素不能运动，因为上屏幕之后就再也得不到它了，没有任何变量可以持有。\n\n所以必须通过重绘一个新的矩形，利用视觉暂留，形成运动。\n\n清屏 → 更新 → 渲染 → 清屏 → 更新 → 渲染 → ...\n\n清屏：\n```javascript\nctx.clearRect(0, 0, 800, 600)\n```\n\n## 2. 面向对象制变成作运动函数\n\n```javascript\nfunction Circle(x, y, r, color) {\n  this.x = x;\n  this.y = y;\n  this.r = r;\n  this.color = color;\n}\nCircle.prototype.render = function () {\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n  ctx.fillStyle = this.color;\n  ctx.fill();\n}\nCircle.prototype.update = function () {\n  this.x += 10;\n}\n\nvar yuan = new Circle(100, 100, 60, \"blue\");\n\nsetInterval(function () {\n  ctx.clearRect(0, 0, 800, 600)\n  yuan.update();\n  yuan.render();\n}, 20)\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2m0noi2byg20jo0czwf3.gif)\n\n## 3. 使用ES6来详细来面向对象编程编写动画函数\n\n```javascript\n// 接口\nclass Actor {\n  constructor() {\n    actorsArr.push(this);\n  }\n  render() {\n    throw new Error(\"所有演员必须重写render函数\")\n  }\n  update() {\n    // 留空为非必须定义项\n  }\n}\n\n// 圆类\nclass Circle extends Actor {\n  constructor(x, y, r, color) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.color = color;\n  }\n  render() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n  update() {\n    this.x++;\n  }\n}\n\n// 所有演员的数组\nvar actorsArr = []\n\nvar yuan = new Circle(100, 100, 50, \"red\");\nsetInterval(() => {\n  ctx.clearRect(0, 0, 800, 600);\n  for (var i = 0; i < actorsArr.length; i++) {\n    actorsArr[i].update();\n    actorsArr[i].render();\n  }\n}, 20);\n```","source":"_posts/2019/Canvas快速入门教程.md","raw":"---\ntitle: Canvas快速使用教程\ntags: [快速使用, HTML5]\ncategories:\n  - [Front, JS]\n  - [Front, HTML]\ndate: 2019-05-03 21:55:41\n---\n# Canvas概述\n\n## 1. 与Flas的区别\nCanvas 和Flash的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素。Canvas更流畅，手机端也嗷嗷流畅。\n\n\n## 2. 创建Canvas画布标签\n\n显示默认提醒消息：如果浏览器不支持Canvas，Canvas会被默认渲染为普通标签显示文字\n\n```html\n<canvas width=\"200px\" height=\"200px\">对不起您的浏览器不支持画布！</canvas>\n```\n\n注意：Canvas有一个默认宽高，大概为`300 x 150`，如果我们用CSS样式去设置Canvas的宽高，会导致画布扭曲，必须在Canvas标签内部，以属性的方式去添加宽高值。\n\n## 3. 用Javascript操作2D画布\n\n首先要获取到画布对象：\n```html\n<canvas id=\"myCanvas\" width=\"800px\" height=\"500px\">对不起您的浏览器不支持画布！</canvas>\n\n<script>\n  var myCanvas = document.querySelector(\"#myCanvas\")\n</script>\n```\n\n获取到画布后，使用画布对象上的 `.getContext()` 方法新建一个画布\n```javascript\n// 设置上下文，就相当于打开ps之后让你新建画布\nvar ctx = myCanvas.getContext('2d');\n```\n\n之后就可以对画布进行详细的样式操作（要在绘制动作前设置样式），如设置背景颜色：\n```javascript\nctx.fillStyle = \"pink\"\n```\n\n设置完样式之后就可以进行绘制操作，如绘制成一个矩形（Rect）\n```javascript\nctx.fillRect(100, 100, 300, 200)\n// fillRect方法中的参数为设置绘制点的坐标，单位为px\n```\n\n## 4. API\n方法：\n```\nfillRect(a, b, c, d) 绘制一个填充矩形，abcd分别为四个坐标\n```\n\n属性：\n```\nfillStyle 设置填充颜色；\n```\n\n# 笔触、填充\n\n## 1. 简述\n笔触也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。\n\n笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。\n\n## 3. 绘制路径\n\n使用 `beginPath()` 代表开始绘制；`moveTo(x, y)` 代表将笔触移动到某一坐标；`lineTo(x, y)` 代表直线绘制到某一点；使用 `stroke()` 能将绘制的图像显示出来。\n\n如下可以绘制出一条折线：\n\n```javascript\nctx.beginPath();\nctx.moveTo(100, 100);\nctx.lineTo(300, 300);\nctx.lineTo(600, 300);\nctx.stroke();\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpbjrdg2j20es086q2s.jpg)\n\n使用 `closePath()` 可以将最后一个绘制点【该绘制点是被用`moveTo(x, y)`打断绘制前的那个点】与第一个绘制点连接：\n\n```javascript\n  ctx.beginPath();\n  ctx.moveTo(100, 100);\n  ctx.lineTo(300, 300);\n  ctx.lineTo(600, 300);\n+ ctx.closePath();\n  ctx.stroke();\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpe43stnj20eq07jjr9.jpg)\n\n连续使用 `moveTo()` 可以让开始新的绘制点：\n```javascript\nctx.beginPath();\nctx.moveTo(100, 100);\nctx.lineTo(300, 300);\nctx.lineTo(600, 300);\n\nctx.moveTo(600, 400);\nctx.lineTo(700, 400);\nctx.stroke();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpg9p7m3j20h009dwed.jpg)\n\n## 4. 绘制样式\n\n在绘制前可以对绘制的线段进行样式设置：\n\n```javascript\nctx.lineWidth = \"10\";\nctx.strokeStyle = \"red\";\n... ...\nctx.stock();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpw1q9aqj20hk0a9a9y.jpg)\n\n\n在绘制之后，使用 `fill()` 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 `fillStyle` 属性可以来设置填充颜色：\n\n```javascript\n... ...\nctx.stock();\nctx.fillStyle = \"skyblue\"\nctx.fill();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lq0n8juzj20hh09wmx4.jpg)\n\n使用了 `fill()` 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。\n\n## 6. 快速绘制\n\n`strokeReact(x, y, w, h)`快速绘制一个矩形\n```javascript\nctx.fillStyle = \"lightseagreen\"\nctx.strokeReact(100, 100, 300, 200);\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lqaiu2eoj20b706xt8j.jpg)\n\nfilRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：\n\n```javascript\nctx.move(100，100);\nctx.lineTo(400，100);\nctx.lineTo(400，300);\nctx.lineTo(100，300);\nctx.closePath（);\nctx.fill();\n```\n\n## 6. 绘制复杂图像\n\n```javascript\nfor (var i = 0; i <= 500; i += 10) {\n  ctx.beginPath();\n  ctx.moveTo(i, i);\n  ctx.lineTo(i + 200, i);\n  ctx.lineTo(i, i + 300);\n  ctx.closePath();\n  ctx.stroke();\n}\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lqfwcsqoj20js0edmxi.jpg)\n\n## 7. API\n\n方法:\n```\nbeginPath() 代表开始绘制\n\nmoveTo(x, y) 代表将笔触移动到某一坐标\n\nlineTo(x, y) 代表直线绘制到某一点\n\nstroke() 能将绘制的图像显示出来\n\nfill() 可以填充封闭图像\n```\n\n属性：\n```\nlineWidth 设置绘制线的宽度\n\nstrokeStyle 设置绘制线的颜色样式\n\nfillStyle 设置填充色的样式\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lpnbvtz1j20ny0budhr.jpg)\n\n\n\n\n\n\n# 弧\n\n## 1. 绘制弧线\n使用 `arc(x, y, r, startRad, endRad, bollen)` 绘制弧线，arc属于笔触，需要使用`beginPath()`和`stroke()`来设置开始与绘制动作。\n\n```javascript\nctx.beginPath();\nctx.arc(200, 200, 100, 0, 1, true);\nctx.stroke();\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2ly5tu2fnj20bj08jjrg.jpg)\n\n整圆就是 `ctx.arc(200, 200, 100, 0, Math.PI*2, true);`\n\n绘制笑脸的方法：\n\n```html\n<canvas id=\"myCanvas\" width=\"800px\" height=\"500px\">对不起您的浏览器不支持画布！</canvas>\n\n<script>\n  // 得到画布\n  var myCanvas = document.querySelector(\"#myCanvas\")\n  // 上下文，就相当于打开ps之后让你新建画布\n  var ctx = myCanvas.getContext('2d');\n  // 开始绘制路径\n  ctx.beginPath();\n  ctx.arc(200, 200, 200, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(90, 140, 30, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(300, 140, 30, 0, Math.PI * 2, true);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(200, 200, 100, 0.6, 2.5, false);\n  ctx.stroke();\n</script>\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lyb1ahmfj20bc0bt0sz.jpg)\n\n## 2. API\n方法：\n```\narc(x, y, r, startRad, endRad, bollen) \n绘制弧度，xy为圆心坐标，r为绘制半径，startRad为初始角度，endRad为最终角度，bollen设置为true为逆时针绘制false为顺时针绘制\n```\n\n\n\n\n\n# 绘制渐变\n## 1. 创建渐变色\n使用 `createLinearrGradient(x1, y1, x2, y2)` 创建一个渐变对象，用 `addColorStop(rate, color)` 添加渐变颜色，将画布的 `fillStyle` 属性设置为这个渐变对象，即可以填充渐变颜色。\n\n如绘制一个矩形，矩形内的填充色为从`blue`渐变到`red`\n```javascript\nvar lingrad = ctx.createLinearGradient(100, 100, 400, 400);\nlingrad.addColorStop(0, 'red');\nlingrad.addColorStop(1, 'blue');\n\nctx.fillStyle = lingrad;\nctx.fillRect(100, 100, 300, 300);\n```\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2lzazsgdcj20es0erglz.jpg)\n\n## 2. API\n\n方法：\n```\ncreateLinearrGradient(x1, y1, x2, y2) \n创建一个渐变对象，(x1, y1)是渐变的起始坐标，(x2, y2)是渐变的结束坐标\n\naddColorStop(rate, color)\n添加渐变颜色，rate为一个int值，初始值为0，colr为一个颜色\n```\n\n\n\n\n\n\n\n# 文字\n\n## 1. 添加文字\n使用 `fillText(content, x, y)` 来设置文字，注意(x, y)为文字基线的位置\n```javascript\nctx.fillText(\"你好\", 100, 100);\n```\n\n## 2. 调整样式\n通过 `font` 属性来设置字体、字号\n```javascript\nctx.font = \"宋体\"\n```\n`font` 的级联样式 `ctx.font = \"font-size font-family\"`\n\n\n\n\n\n\n\n# 使用图片\n## 1. 添加图片\n添加一个图片首先要创建一个`img`的实例，设置实例的`src`，监听这个实例的load事件，当图片加载完成后，利用 `drawImage(img, x, y)` 绘制出图片，如下实例：\n```javascript\nvar img = new Image();\nimg.src = \"images/0.jpg\";\nimg.onload = function(){\n  ctx.drawImage(img, 100, 100);\n}\n```\n\n## 2. API\n```\ndrawImage(img, x, y, w, h) \nimg为一个图片示例，xy为图片左上角坐标，w为图片宽度，h为图片高度\n\ndrawImage(img, X, Y, W, H, x, y, w, h) \nimg为一个图片示例，XYWH可以设置图片的切片位置\n```\n\n\n# 运动\n## 1. 原理\ncanvas中元素不能运动，因为上屏幕之后就再也得不到它了，没有任何变量可以持有。\n\n所以必须通过重绘一个新的矩形，利用视觉暂留，形成运动。\n\n清屏 → 更新 → 渲染 → 清屏 → 更新 → 渲染 → ...\n\n清屏：\n```javascript\nctx.clearRect(0, 0, 800, 600)\n```\n\n## 2. 面向对象制变成作运动函数\n\n```javascript\nfunction Circle(x, y, r, color) {\n  this.x = x;\n  this.y = y;\n  this.r = r;\n  this.color = color;\n}\nCircle.prototype.render = function () {\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n  ctx.fillStyle = this.color;\n  ctx.fill();\n}\nCircle.prototype.update = function () {\n  this.x += 10;\n}\n\nvar yuan = new Circle(100, 100, 60, \"blue\");\n\nsetInterval(function () {\n  ctx.clearRect(0, 0, 800, 600)\n  yuan.update();\n  yuan.render();\n}, 20)\n```\n\n![](https://ws1.sinaimg.cn/large/a71efaafly1g2m0noi2byg20jo0czwf3.gif)\n\n## 3. 使用ES6来详细来面向对象编程编写动画函数\n\n```javascript\n// 接口\nclass Actor {\n  constructor() {\n    actorsArr.push(this);\n  }\n  render() {\n    throw new Error(\"所有演员必须重写render函数\")\n  }\n  update() {\n    // 留空为非必须定义项\n  }\n}\n\n// 圆类\nclass Circle extends Actor {\n  constructor(x, y, r, color) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.color = color;\n  }\n  render() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n  update() {\n    this.x++;\n  }\n}\n\n// 所有演员的数组\nvar actorsArr = []\n\nvar yuan = new Circle(100, 100, 50, \"red\");\nsetInterval(() => {\n  ctx.clearRect(0, 0, 800, 600);\n  for (var i = 0; i < actorsArr.length; i++) {\n    actorsArr[i].update();\n    actorsArr[i].render();\n  }\n}, 20);\n```","slug":"Canvas快速入门教程","published":1,"updated":"2019-11-09T13:57:19.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrf7003j3w4uabno0xgj","content":"<h1 id=\"Canvas概述\"><a href=\"#Canvas概述\" class=\"headerlink\" title=\"Canvas概述\"></a>Canvas概述</h1><h2 id=\"1-与Flas的区别\"><a href=\"#1-与Flas的区别\" class=\"headerlink\" title=\"1. 与Flas的区别\"></a>1. 与Flas的区别</h2><p>Canvas 和Flash的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素。Canvas更流畅，手机端也嗷嗷流畅。</p>\n<h2 id=\"2-创建Canvas画布标签\"><a href=\"#2-创建Canvas画布标签\" class=\"headerlink\" title=\"2. 创建Canvas画布标签\"></a>2. 创建Canvas画布标签</h2><p>显示默认提醒消息：如果浏览器不支持Canvas，Canvas会被默认渲染为普通标签显示文字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：Canvas有一个默认宽高，大概为<code>300 x 150</code>，如果我们用CSS样式去设置Canvas的宽高，会导致画布扭曲，必须在Canvas标签内部，以属性的方式去添加宽高值。</p>\n<h2 id=\"3-用Javascript操作2D画布\"><a href=\"#3-用Javascript操作2D画布\" class=\"headerlink\" title=\"3. 用Javascript操作2D画布\"></a>3. 用Javascript操作2D画布</h2><p>首先要获取到画布对象：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#myCanvas\"</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>获取到画布后，使用画布对象上的 <code>.getContext()</code> 方法新建一个画布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置上下文，就相当于打开ps之后让你新建画布</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = myCanvas.getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以对画布进行详细的样式操作（要在绘制动作前设置样式），如设置背景颜色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"pink\"</span></span><br></pre></td></tr></table></figure>\n\n<p>设置完样式之后就可以进行绘制操作，如绘制成一个矩形（Rect）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"comment\">// fillRect方法中的参数为设置绘制点的坐标，单位为px</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-API\"><a href=\"#4-API\" class=\"headerlink\" title=\"4. API\"></a>4. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fillRect(a, b, c, d) 绘制一个填充矩形，abcd分别为四个坐标</span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fillStyle 设置填充颜色；</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"笔触、填充\"><a href=\"#笔触、填充\" class=\"headerlink\" title=\"笔触、填充\"></a>笔触、填充</h1><h2 id=\"1-简述\"><a href=\"#1-简述\" class=\"headerlink\" title=\"1. 简述\"></a>1. 简述</h2><p>笔触也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。</p>\n<p>笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。</p>\n<h2 id=\"3-绘制路径\"><a href=\"#3-绘制路径\" class=\"headerlink\" title=\"3. 绘制路径\"></a>3. 绘制路径</h2><p>使用 <code>beginPath()</code> 代表开始绘制；<code>moveTo(x, y)</code> 代表将笔触移动到某一坐标；<code>lineTo(x, y)</code> 代表直线绘制到某一点；使用 <code>stroke()</code> 能将绘制的图像显示出来。</p>\n<p>如下可以绘制出一条折线：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpbjrdg2j20es086q2s.jpg\" alt=\"\"></p>\n<p>使用 <code>closePath()</code> 可以将最后一个绘制点【该绘制点是被用<code>moveTo(x, y)</code>打断绘制前的那个点】与第一个绘制点连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">  ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">+ ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpe43stnj20eq07jjr9.jpg\" alt=\"\"></p>\n<p>连续使用 <code>moveTo()</code> 可以让开始新的绘制点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">600</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">700</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpg9p7m3j20h009dwed.jpg\" alt=\"\"></p>\n<h2 id=\"4-绘制样式\"><a href=\"#4-绘制样式\" class=\"headerlink\" title=\"4. 绘制样式\"></a>4. 绘制样式</h2><p>在绘制前可以对绘制的线段进行样式设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.lineWidth = <span class=\"string\">\"10\"</span>;</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">ctx.stock();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpw1q9aqj20hk0a9a9y.jpg\" alt=\"\"></p>\n<p>在绘制之后，使用 <code>fill()</code> 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 <code>fillStyle</code> 属性可以来设置填充颜色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... ...</span><br><span class=\"line\">ctx.stock();</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"skyblue\"</span></span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lq0n8juzj20hh09wmx4.jpg\" alt=\"\"></p>\n<p>使用了 <code>fill()</code> 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。</p>\n<h2 id=\"6-快速绘制\"><a href=\"#6-快速绘制\" class=\"headerlink\" title=\"6. 快速绘制\"></a>6. 快速绘制</h2><p><code>strokeReact(x, y, w, h)</code>快速绘制一个矩形</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"lightseagreen\"</span></span><br><span class=\"line\">ctx.strokeReact(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lqaiu2eoj20b706xt8j.jpg\" alt=\"\"></p>\n<p>filRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.move(<span class=\"number\">100</span>，<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">400</span>，<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">400</span>，<span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">100</span>，<span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.closePath（);</span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-绘制复杂图像\"><a href=\"#6-绘制复杂图像\" class=\"headerlink\" title=\"6. 绘制复杂图像\"></a>6. 绘制复杂图像</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">500</span>; i += <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(i, i);</span><br><span class=\"line\">  ctx.lineTo(i + <span class=\"number\">200</span>, i);</span><br><span class=\"line\">  ctx.lineTo(i, i + <span class=\"number\">300</span>);</span><br><span class=\"line\">  ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lqfwcsqoj20js0edmxi.jpg\" alt=\"\"></p>\n<h2 id=\"7-API\"><a href=\"#7-API\" class=\"headerlink\" title=\"7. API\"></a>7. API</h2><p>方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beginPath() 代表开始绘制</span><br><span class=\"line\"></span><br><span class=\"line\">moveTo(x, y) 代表将笔触移动到某一坐标</span><br><span class=\"line\"></span><br><span class=\"line\">lineTo(x, y) 代表直线绘制到某一点</span><br><span class=\"line\"></span><br><span class=\"line\">stroke() 能将绘制的图像显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">fill() 可以填充封闭图像</span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineWidth 设置绘制线的宽度</span><br><span class=\"line\"></span><br><span class=\"line\">strokeStyle 设置绘制线的颜色样式</span><br><span class=\"line\"></span><br><span class=\"line\">fillStyle 设置填充色的样式</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpnbvtz1j20ny0budhr.jpg\" alt=\"\"></p>\n<h1 id=\"弧\"><a href=\"#弧\" class=\"headerlink\" title=\"弧\"></a>弧</h1><h2 id=\"1-绘制弧线\"><a href=\"#1-绘制弧线\" class=\"headerlink\" title=\"1. 绘制弧线\"></a>1. 绘制弧线</h2><p>使用 <code>arc(x, y, r, startRad, endRad, bollen)</code> 绘制弧线，arc属于笔触，需要使用<code>beginPath()</code>和<code>stroke()</code>来设置开始与绘制动作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2ly5tu2fnj20bj08jjrg.jpg\" alt=\"\"></p>\n<p>整圆就是 <code>ctx.arc(200, 200, 100, 0, Math.PI*2, true);</code></p>\n<p>绘制笑脸的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 得到画布</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#myCanvas\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 上下文，就相当于打开ps之后让你新建画布</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> ctx = myCanvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 开始绘制路径</span></span></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">90</span>, <span class=\"number\">140</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">300</span>, <span class=\"number\">140</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"actionscript\">  ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">0.6</span>, <span class=\"number\">2.5</span>, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lyb1ahmfj20bc0bt0sz.jpg\" alt=\"\"></p>\n<h2 id=\"2-API\"><a href=\"#2-API\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arc(x, y, r, startRad, endRad, bollen) </span><br><span class=\"line\">绘制弧度，xy为圆心坐标，r为绘制半径，startRad为初始角度，endRad为最终角度，bollen设置为true为逆时针绘制false为顺时针绘制</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"绘制渐变\"><a href=\"#绘制渐变\" class=\"headerlink\" title=\"绘制渐变\"></a>绘制渐变</h1><h2 id=\"1-创建渐变色\"><a href=\"#1-创建渐变色\" class=\"headerlink\" title=\"1. 创建渐变色\"></a>1. 创建渐变色</h2><p>使用 <code>createLinearrGradient(x1, y1, x2, y2)</code> 创建一个渐变对象，用 <code>addColorStop(rate, color)</code> 添加渐变颜色，将画布的 <code>fillStyle</code> 属性设置为这个渐变对象，即可以填充渐变颜色。</p>\n<p>如绘制一个矩形，矩形内的填充色为从<code>blue</code>渐变到<code>red</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lingrad = ctx.createLinearGradient(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">lingrad.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">lingrad.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'blue'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.fillStyle = lingrad;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lzazsgdcj20es0erglz.jpg\" alt=\"\"></p>\n<h2 id=\"2-API-1\"><a href=\"#2-API-1\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createLinearrGradient(x1, y1, x2, y2) </span><br><span class=\"line\">创建一个渐变对象，(x1, y1)是渐变的起始坐标，(x2, y2)是渐变的结束坐标</span><br><span class=\"line\"></span><br><span class=\"line\">addColorStop(rate, color)</span><br><span class=\"line\">添加渐变颜色，rate为一个int值，初始值为0，colr为一个颜色</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><h2 id=\"1-添加文字\"><a href=\"#1-添加文字\" class=\"headerlink\" title=\"1. 添加文字\"></a>1. 添加文字</h2><p>使用 <code>fillText(content, x, y)</code> 来设置文字，注意(x, y)为文字基线的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillText(<span class=\"string\">\"你好\"</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-调整样式\"><a href=\"#2-调整样式\" class=\"headerlink\" title=\"2. 调整样式\"></a>2. 调整样式</h2><p>通过 <code>font</code> 属性来设置字体、字号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.font = <span class=\"string\">\"宋体\"</span></span><br></pre></td></tr></table></figure>\n<p><code>font</code> 的级联样式 <code>ctx.font = &quot;font-size font-family&quot;</code></p>\n<h1 id=\"使用图片\"><a href=\"#使用图片\" class=\"headerlink\" title=\"使用图片\"></a>使用图片</h1><h2 id=\"1-添加图片\"><a href=\"#1-添加图片\" class=\"headerlink\" title=\"1. 添加图片\"></a>1. 添加图片</h2><p>添加一个图片首先要创建一个<code>img</code>的实例，设置实例的<code>src</code>，监听这个实例的load事件，当图片加载完成后，利用 <code>drawImage(img, x, y)</code> 绘制出图片，如下实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src = <span class=\"string\">\"images/0.jpg\"</span>;</span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ctx.drawImage(img, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-API-2\"><a href=\"#2-API-2\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawImage(img, x, y, w, h) </span><br><span class=\"line\">img为一个图片示例，xy为图片左上角坐标，w为图片宽度，h为图片高度</span><br><span class=\"line\"></span><br><span class=\"line\">drawImage(img, X, Y, W, H, x, y, w, h) </span><br><span class=\"line\">img为一个图片示例，XYWH可以设置图片的切片位置</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h1><h2 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h2><p>canvas中元素不能运动，因为上屏幕之后就再也得不到它了，没有任何变量可以持有。</p>\n<p>所以必须通过重绘一个新的矩形，利用视觉暂留，形成运动。</p>\n<p>清屏 → 更新 → 渲染 → 清屏 → 更新 → 渲染 → …</p>\n<p>清屏：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-面向对象制变成作运动函数\"><a href=\"#2-面向对象制变成作运动函数\" class=\"headerlink\" title=\"2. 面向对象制变成作运动函数\"></a>2. 面向对象制变成作运动函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">x, y, r, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">  ctx.fill();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x += <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, <span class=\"string\">\"blue\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br><span class=\"line\">  yuan.update();</span><br><span class=\"line\">  yuan.render();</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2m0noi2byg20jo0czwf3.gif\" alt=\"\"></p>\n<h2 id=\"3-使用ES6来详细来面向对象编程编写动画函数\"><a href=\"#3-使用ES6来详细来面向对象编程编写动画函数\" class=\"headerlink\" title=\"3. 使用ES6来详细来面向对象编程编写动画函数\"></a>3. 使用ES6来详细来面向对象编程编写动画函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    actorsArr.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"所有演员必须重写render函数\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留空为非必须定义项</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 圆类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, r, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有演员的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> actorsArr = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; actorsArr.length; i++) &#123;</span><br><span class=\"line\">    actorsArr[i].update();</span><br><span class=\"line\">    actorsArr[i].render();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Canvas概述\"><a href=\"#Canvas概述\" class=\"headerlink\" title=\"Canvas概述\"></a>Canvas概述</h1><h2 id=\"1-与Flas的区别\"><a href=\"#1-与Flas的区别\" class=\"headerlink\" title=\"1. 与Flas的区别\"></a>1. 与Flas的区别</h2><p>Canvas 和Flash的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素。Canvas更流畅，手机端也嗷嗷流畅。</p>\n<h2 id=\"2-创建Canvas画布标签\"><a href=\"#2-创建Canvas画布标签\" class=\"headerlink\" title=\"2. 创建Canvas画布标签\"></a>2. 创建Canvas画布标签</h2><p>显示默认提醒消息：如果浏览器不支持Canvas，Canvas会被默认渲染为普通标签显示文字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：Canvas有一个默认宽高，大概为<code>300 x 150</code>，如果我们用CSS样式去设置Canvas的宽高，会导致画布扭曲，必须在Canvas标签内部，以属性的方式去添加宽高值。</p>\n<h2 id=\"3-用Javascript操作2D画布\"><a href=\"#3-用Javascript操作2D画布\" class=\"headerlink\" title=\"3. 用Javascript操作2D画布\"></a>3. 用Javascript操作2D画布</h2><p>首先要获取到画布对象：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#myCanvas\"</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>获取到画布后，使用画布对象上的 <code>.getContext()</code> 方法新建一个画布</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置上下文，就相当于打开ps之后让你新建画布</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = myCanvas.getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以对画布进行详细的样式操作（要在绘制动作前设置样式），如设置背景颜色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"pink\"</span></span><br></pre></td></tr></table></figure>\n\n<p>设置完样式之后就可以进行绘制操作，如绘制成一个矩形（Rect）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"comment\">// fillRect方法中的参数为设置绘制点的坐标，单位为px</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-API\"><a href=\"#4-API\" class=\"headerlink\" title=\"4. API\"></a>4. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fillRect(a, b, c, d) 绘制一个填充矩形，abcd分别为四个坐标</span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fillStyle 设置填充颜色；</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"笔触、填充\"><a href=\"#笔触、填充\" class=\"headerlink\" title=\"笔触、填充\"></a>笔触、填充</h1><h2 id=\"1-简述\"><a href=\"#1-简述\" class=\"headerlink\" title=\"1. 简述\"></a>1. 简述</h2><p>笔触也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。</p>\n<p>笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。</p>\n<h2 id=\"3-绘制路径\"><a href=\"#3-绘制路径\" class=\"headerlink\" title=\"3. 绘制路径\"></a>3. 绘制路径</h2><p>使用 <code>beginPath()</code> 代表开始绘制；<code>moveTo(x, y)</code> 代表将笔触移动到某一坐标；<code>lineTo(x, y)</code> 代表直线绘制到某一点；使用 <code>stroke()</code> 能将绘制的图像显示出来。</p>\n<p>如下可以绘制出一条折线：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpbjrdg2j20es086q2s.jpg\" alt=\"\"></p>\n<p>使用 <code>closePath()</code> 可以将最后一个绘制点【该绘制点是被用<code>moveTo(x, y)</code>打断绘制前的那个点】与第一个绘制点连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">  ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">  ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">+ ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpe43stnj20eq07jjr9.jpg\" alt=\"\"></p>\n<p>连续使用 <code>moveTo()</code> 可以让开始新的绘制点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">600</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.moveTo(<span class=\"number\">600</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">700</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpg9p7m3j20h009dwed.jpg\" alt=\"\"></p>\n<h2 id=\"4-绘制样式\"><a href=\"#4-绘制样式\" class=\"headerlink\" title=\"4. 绘制样式\"></a>4. 绘制样式</h2><p>在绘制前可以对绘制的线段进行样式设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.lineWidth = <span class=\"string\">\"10\"</span>;</span><br><span class=\"line\">ctx.strokeStyle = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">ctx.stock();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpw1q9aqj20hk0a9a9y.jpg\" alt=\"\"></p>\n<p>在绘制之后，使用 <code>fill()</code> 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 <code>fillStyle</code> 属性可以来设置填充颜色：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... ...</span><br><span class=\"line\">ctx.stock();</span><br><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"skyblue\"</span></span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lq0n8juzj20hh09wmx4.jpg\" alt=\"\"></p>\n<p>使用了 <code>fill()</code> 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。</p>\n<h2 id=\"6-快速绘制\"><a href=\"#6-快速绘制\" class=\"headerlink\" title=\"6. 快速绘制\"></a>6. 快速绘制</h2><p><code>strokeReact(x, y, w, h)</code>快速绘制一个矩形</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle = <span class=\"string\">\"lightseagreen\"</span></span><br><span class=\"line\">ctx.strokeReact(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lqaiu2eoj20b706xt8j.jpg\" alt=\"\"></p>\n<p>filRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.move(<span class=\"number\">100</span>，<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">400</span>，<span class=\"number\">100</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">400</span>，<span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.lineTo(<span class=\"number\">100</span>，<span class=\"number\">300</span>);</span><br><span class=\"line\">ctx.closePath（);</span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-绘制复杂图像\"><a href=\"#6-绘制复杂图像\" class=\"headerlink\" title=\"6. 绘制复杂图像\"></a>6. 绘制复杂图像</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">500</span>; i += <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.moveTo(i, i);</span><br><span class=\"line\">  ctx.lineTo(i + <span class=\"number\">200</span>, i);</span><br><span class=\"line\">  ctx.lineTo(i, i + <span class=\"number\">300</span>);</span><br><span class=\"line\">  ctx.closePath();</span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lqfwcsqoj20js0edmxi.jpg\" alt=\"\"></p>\n<h2 id=\"7-API\"><a href=\"#7-API\" class=\"headerlink\" title=\"7. API\"></a>7. API</h2><p>方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beginPath() 代表开始绘制</span><br><span class=\"line\"></span><br><span class=\"line\">moveTo(x, y) 代表将笔触移动到某一坐标</span><br><span class=\"line\"></span><br><span class=\"line\">lineTo(x, y) 代表直线绘制到某一点</span><br><span class=\"line\"></span><br><span class=\"line\">stroke() 能将绘制的图像显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">fill() 可以填充封闭图像</span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lineWidth 设置绘制线的宽度</span><br><span class=\"line\"></span><br><span class=\"line\">strokeStyle 设置绘制线的颜色样式</span><br><span class=\"line\"></span><br><span class=\"line\">fillStyle 设置填充色的样式</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lpnbvtz1j20ny0budhr.jpg\" alt=\"\"></p>\n<h1 id=\"弧\"><a href=\"#弧\" class=\"headerlink\" title=\"弧\"></a>弧</h1><h2 id=\"1-绘制弧线\"><a href=\"#1-绘制弧线\" class=\"headerlink\" title=\"1. 绘制弧线\"></a>1. 绘制弧线</h2><p>使用 <code>arc(x, y, r, startRad, endRad, bollen)</code> 绘制弧线，arc属于笔触，需要使用<code>beginPath()</code>和<code>stroke()</code>来设置开始与绘制动作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2ly5tu2fnj20bj08jjrg.jpg\" alt=\"\"></p>\n<p>整圆就是 <code>ctx.arc(200, 200, 100, 0, Math.PI*2, true);</code></p>\n<p>绘制笑脸的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"800px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500px\"</span>&gt;</span>对不起您的浏览器不支持画布！<span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 得到画布</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> myCanvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#myCanvas\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 上下文，就相当于打开ps之后让你新建画布</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> ctx = myCanvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 开始绘制路径</span></span></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">90</span>, <span class=\"number\">140</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">  ctx.arc(<span class=\"number\">300</span>, <span class=\"number\">140</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\"><span class=\"actionscript\">  ctx.arc(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">0.6</span>, <span class=\"number\">2.5</span>, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\">  ctx.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lyb1ahmfj20bc0bt0sz.jpg\" alt=\"\"></p>\n<h2 id=\"2-API\"><a href=\"#2-API\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arc(x, y, r, startRad, endRad, bollen) </span><br><span class=\"line\">绘制弧度，xy为圆心坐标，r为绘制半径，startRad为初始角度，endRad为最终角度，bollen设置为true为逆时针绘制false为顺时针绘制</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"绘制渐变\"><a href=\"#绘制渐变\" class=\"headerlink\" title=\"绘制渐变\"></a>绘制渐变</h1><h2 id=\"1-创建渐变色\"><a href=\"#1-创建渐变色\" class=\"headerlink\" title=\"1. 创建渐变色\"></a>1. 创建渐变色</h2><p>使用 <code>createLinearrGradient(x1, y1, x2, y2)</code> 创建一个渐变对象，用 <code>addColorStop(rate, color)</code> 添加渐变颜色，将画布的 <code>fillStyle</code> 属性设置为这个渐变对象，即可以填充渐变颜色。</p>\n<p>如绘制一个矩形，矩形内的填充色为从<code>blue</code>渐变到<code>red</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lingrad = ctx.createLinearGradient(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">lingrad.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">lingrad.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">'blue'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.fillStyle = lingrad;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2lzazsgdcj20es0erglz.jpg\" alt=\"\"></p>\n<h2 id=\"2-API-1\"><a href=\"#2-API-1\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createLinearrGradient(x1, y1, x2, y2) </span><br><span class=\"line\">创建一个渐变对象，(x1, y1)是渐变的起始坐标，(x2, y2)是渐变的结束坐标</span><br><span class=\"line\"></span><br><span class=\"line\">addColorStop(rate, color)</span><br><span class=\"line\">添加渐变颜色，rate为一个int值，初始值为0，colr为一个颜色</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h1><h2 id=\"1-添加文字\"><a href=\"#1-添加文字\" class=\"headerlink\" title=\"1. 添加文字\"></a>1. 添加文字</h2><p>使用 <code>fillText(content, x, y)</code> 来设置文字，注意(x, y)为文字基线的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillText(<span class=\"string\">\"你好\"</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-调整样式\"><a href=\"#2-调整样式\" class=\"headerlink\" title=\"2. 调整样式\"></a>2. 调整样式</h2><p>通过 <code>font</code> 属性来设置字体、字号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.font = <span class=\"string\">\"宋体\"</span></span><br></pre></td></tr></table></figure>\n<p><code>font</code> 的级联样式 <code>ctx.font = &quot;font-size font-family&quot;</code></p>\n<h1 id=\"使用图片\"><a href=\"#使用图片\" class=\"headerlink\" title=\"使用图片\"></a>使用图片</h1><h2 id=\"1-添加图片\"><a href=\"#1-添加图片\" class=\"headerlink\" title=\"1. 添加图片\"></a>1. 添加图片</h2><p>添加一个图片首先要创建一个<code>img</code>的实例，设置实例的<code>src</code>，监听这个实例的load事件，当图片加载完成后，利用 <code>drawImage(img, x, y)</code> 绘制出图片，如下实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src = <span class=\"string\">\"images/0.jpg\"</span>;</span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ctx.drawImage(img, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-API-2\"><a href=\"#2-API-2\" class=\"headerlink\" title=\"2. API\"></a>2. API</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawImage(img, x, y, w, h) </span><br><span class=\"line\">img为一个图片示例，xy为图片左上角坐标，w为图片宽度，h为图片高度</span><br><span class=\"line\"></span><br><span class=\"line\">drawImage(img, X, Y, W, H, x, y, w, h) </span><br><span class=\"line\">img为一个图片示例，XYWH可以设置图片的切片位置</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h1><h2 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h2><p>canvas中元素不能运动，因为上屏幕之后就再也得不到它了，没有任何变量可以持有。</p>\n<p>所以必须通过重绘一个新的矩形，利用视觉暂留，形成运动。</p>\n<p>清屏 → 更新 → 渲染 → 清屏 → 更新 → 渲染 → …</p>\n<p>清屏：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-面向对象制变成作运动函数\"><a href=\"#2-面向对象制变成作运动函数\" class=\"headerlink\" title=\"2. 面向对象制变成作运动函数\"></a>2. 面向对象制变成作运动函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Circle</span>(<span class=\"params\">x, y, r, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ctx.beginPath();</span><br><span class=\"line\">  ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">  ctx.fill();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Circle.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x += <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, <span class=\"string\">\"blue\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>)</span><br><span class=\"line\">  yuan.update();</span><br><span class=\"line\">  yuan.render();</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ws1.sinaimg.cn/large/a71efaafly1g2m0noi2byg20jo0czwf3.gif\" alt=\"\"></p>\n<h2 id=\"3-使用ES6来详细来面向对象编程编写动画函数\"><a href=\"#3-使用ES6来详细来面向对象编程编写动画函数\" class=\"headerlink\" title=\"3. 使用ES6来详细来面向对象编程编写动画函数\"></a>3. 使用ES6来详细来面向对象编程编写动画函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    actorsArr.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"所有演员必须重写render函数\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留空为非必须定义项</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 圆类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, r, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有演员的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> actorsArr = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; actorsArr.length; i++) &#123;</span><br><span class=\"line\">    actorsArr[i].update();</span><br><span class=\"line\">    actorsArr[i].render();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>"},{"title":"BeeGo快速使用指南","date":"2019-09-26T06:03:52.000Z","_content":"\n# 1. 安装与使用\n\ntest test\n\n## 1.1 安装Bee\n\n```\ngo get github.com/astaxie/beego\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n```\n\n## 1.2 创建一个Bee项目\n\n创建一个标准的 Bee 项目：\n\n```sh\nbee new myproject\n```\n\n创建一个 api 应用：\n\n```\nbee api apiproject\n```\n\n创建一个标准的 Bee 项目的目录结构：\n\n```\n├─conf\n├─controllers\n├─models\n├─routers\n├─static\n│  ├─css\n│  ├─img\n│  └─js\n├─tests\n└─views\n```\n\n## 1.3 启动\n\n在本地以开发模式启动应用：\n\n```sh\n$ bee run\n```\n\n# 2. Router\n\n## 2.1 默认访问\n\n在 `mian.go` 中引入路由系统：\n\n```diff\n// main.go\npackage main\n\nimport (\n+   _ \"Bee-Study/quickstart/routers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc main() {\n\tbeego.Run()\n}\n```\n\n首先在 Controller 层创建对应的 Controller 逻辑：\n\n```go\n// controllers/default.go\npackage controllers\n\nimport (\n\t\"github.com/astaxie/beego\"\n)\n\ntype MainController struct {\n\tbeego.Controller\n}\n\nfunc (c *MainController) Get() {\n\tc.Ctx.WriteString(\"hello\")\n}\n```\n\n然后将路由文件创建于 routers 目录下：\n\n```go\n// routers/router.go\npackage routers\n\nimport (\n\t\"Bee-Study/quickstart/controllers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc init() {\n    beego.Router(\"/\", &controllers.MainController{})\n}\n```\n\n当我们访问 `localhost:prot/` 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 `MainController` 的 `Get()` 方法，输出 `hello`。\n\n## 2.2 不同路由匹配不同方法\n\n由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 `Get()` 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 `beego.Router` 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：\n\n```go\n// router.go\nbeego.Router(\"/test\", &controllers.MainController{}, \"get:handleTest\")\n```\n\n```go\n// controller.go\nfunc (c *MainController) handleTest(){\n    // do something\n}\n```\n\n# 3. Controller\n\n## 3.1 创建一个 Controller \n\nController 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 `main.go` 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。\n\n创建一个 Controller 我们要继承一个 `beego.Controller` 对象：\n\n```go\ntype MainController struct {\n\tbeego.Controller\n}\n```\n\n之后我们可以复写其 `Get()` 方法：\n\n```go\nfunc (c *MainController) Get() {\n\tc.Data[\"Website\"] = \"beego.me\"\n\tc.Data[\"Email\"] = \"astaxie@gmail.com\"\n\tc.TplName = \"index.tpl\"\n}\n```\n\n## 3.2 Controller 对象\n\n一个 `beeg.Controller` 类型的实例上挂载了如下的常用属性：\n\n- **Data：** 向 Template 中传入的数据\n\n- **TplName：**  vies 文件目录下的模板名称\n\n- **Ctx：** 上下文对象\n\n  - **Ctx.WriteString(content)：** 返回内容\n\n- **Redirect(url, code)：** 重定向 \n\n  > c.Redirect(“/register”, 302)\n\n- **GetString(key)：** 获取 post 数据\n\n  > name := c.GetString(“userName”)\n\n- **GetFile(key)：**获取文件\n\n  ```go\n  f, h, err := c.GetFile(“uploadname”)\n  defer f.Close()\n  if err !- nil{\n      return\n  }else{\n      c.SaveToFile(\"uploadname\", \"./static/img\" + h.Filename)\n  }\n  ```\n\n# 4. ORM\n\n## 4.1 创建一个Model\n\nBee 自带一个ORM框架，如果未下载需要手动安装：\n\n```sh\n$ go get github.com/astaxie/beego/orm\n```\n\n如果我们要连接 Mysql 数据库，则需要另外安装驱动：\n\n```sh\n$ go get github.com/go-sql-driver/mysql\n```\n\n之后我们在 `/models/model.go` 文件中需要引入 orm 与 mysql 驱动：\n\n```go\n// model.go\nimport (\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n之后定义一个数据库模型：\n\n```go\n// model.go\ntype User struct {\n\tId   int\n\tName string\n\tPwd  string\n}\n```\n\n创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：\n\n```go\n// model.go\nfunc init() {\n    // 连接数据库 参数：别名、数据库类型、连接uri\n\t_ = orm.RegisterDataBase(\"default\", \"mysql\", \"root:root@tcp(localhost:3306)/beego_study?charset=utf8\")\n    // 注册 Model\n\torm.RegisterModel(new(User))\n\t// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程\n\t_ = orm.RunSyncdb(\"default\", false, true)\n}\n```\n\n最后不要忘记在 `mian.go` 中加载 models：\n\n```go\n// mian.go\nimport (\n\t_ \"Bee-Study/quickstart/models\"\n    // ... ...\n)\n```\n\n## 4.2 ORM 的基本操作\n\n示例中的 `User` 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 `model.go` 文件中的 `User` 对象，其引入方式为 `models.User`。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。\n\n> 对数据库的操作都是在 Controller 层完成的。\n\n### 4.2.1 插入\n\n```go\no := orm.NewOrm()\nvar user User\nuser.Name = \"slene\"\nuser.Pwd= true\n\nid, err := o.Insert(&user)\nif err == nil {\n    // fmt.Println(id)\n    beego.Info(\"插入失败\",err)\n    return\n}\n```\n\n### 4.2.2 查询\n\n```go\no := orm.NewOrm()\nuser := User{}\nerr := o.Read(&user)\n```\n\n也可以指定字段查询：\n\n```go\nuser := User{Name: \"slene\"}\n// 或者：user.name = \"slene\"\nerr = o.Read(&user, \"Name\")\n```\n\n同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：\n\n```go\no := orm.NewOrm()\n// 获取 QuerySeter 对象，user 为表名\nqs := o.QueryTable(\"user\")\n\n// 也可以直接使用对象作为表名\nuser := new(User)\nqs = o.QueryTable(user) // 返回 QuerySeter\n```\n\n- qs.Filter：用来过滤查询结果，起到 **包含条件** 的作用\n\n- qs.Exclude：用来过滤查询结果，起到 **排除条件** 的作用\n\n- qs.All：返回对应的结果集对象\n\n  ```go\n  var users []*User\n  num, err := o.QueryTable(\"user\").Filter(\"name\", \"slene\").All(&users)\n  fmt.Printf(\"Returned Rows Num: %s, %s\", num, err)\n  ```\n\n- 更多用法查看 [官方文档](https://beego.me/docs/mvc/model/query.md)\n\n### 4.2.3 更新\n\n```go\no := orm.NewOrm()\nuser := User{Id: 1}\nif o.Read(&user) == nil {\n    user.Name = \"MyName\"\n    if num, err := o.Update(&user); err == nil {\n        fmt.Println(num)\n    }\n}\n```\n\n也可以指定更新的字段：\n\n```go\n// 只更新 Name\no.Update(&user, \"Name\")\n// 指定多个字段\n// o.Update(&user, \"Field1\", \"Field2\", ...)\n...\n```\n\n### 4.2.4 删除\n\n```go\no := orm.NewOrm()\nif num, err := o.Delete(&User{Id: 1}); err == nil {\n    fmt.Println(num)\n}\n```\n\n## 4.3 模型创建详解\n\n我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。\n\n### 4.3.1 字段的命名规范\n\n首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：\n\n- 创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。\n- `RunSyncdb()` 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。\n\n如结构：\n\n```go\ntype User struct{\n    Name String\n    Age int\n    BirthDay time.Time\n}\n```\n\n生成的表为：\n\n| 字段      | 类型   |\n| --------- | ------ |\n| name      | string |\n| age       | int32  |\n| birth_day | time   |\n\n### 4.3.2 字段的属性设置\n\n在设置了字段类型后，可以在后面通过 `orm:`  来追字段的属性。\n\n设置主键：`pk`\n\n设置自增：`auto`\n\n如设置一个自增的主键：\n\n```go\nId int `orm: \"pk;auto\"`\n```\n\n当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。\n\n设置默认值 `orm:\"default(11)\"`\n\n设置长度 `orm:\"size(100)\"`\n\n设置允许为空 `orm:\"null\"`，数据库默认是非空，设置 `null` 之后就可以变为`ALLOW NULL`\n\n设置唯一： `orm:”unique”`\n\n设置浮点数精度 `orm:\"digits(12);decimals(4)\"`  总共12位，四位是小数位\n\n设置时间： `orm:\"auto_now_add;type(datetime)\"`\n\n**auto_now 每次 model 保存时都会对时间自动更新**\n\n**auto_now_add 第一次保存时才设置时间**\n\n设置时间的格式：type\n\n### 4.3.3 一对多关系的创建\n\n如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：\n\n```go\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n}\n\ntype ArticleType struct{\n    Id int\n    TypeName string\n    Articles[] *Articles `orm:\"reverse(many)\"`\n}\n```\n\n当查询时，我们需要使用 `RelatedSel()` 指定连接的表，如：\n\n```go\no := orm.NewOrm()\nvar articles[]models.Article\no.QueryTable(\"Article\").RelatedSel(\"ArticleType\").Filter(\"Article__TypeName\", \"文章类型\").All(&articles)\n```\n\n当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：\n\n```go\ntypeName := ”文章类型“\nvar artiType model.ArticleType\nartiType.TypeName = typeName\nerr = o.Read(&artiType, \"TypeName\")\nif err != nil{\n    beego.Info(\"类型不存在\")\n    return\n}\narticle.ArticleType = &artiType\narticle.Content = \"... ...\"\n// 插入数据\n_,err = o.Insert(&article)\n// ... ...\n```\n\n### 4.3.3 多对多关系的创建\n\n同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：\n\n```go\ntype User struct{\n    Id int\n    Name String\n    Articles[]*Article `orm:\"rel(m2m)\"`\n}\n\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n    User[] *Users `orm:\"reverse(many)\"`\n}\n```\n\n这样创建完成后，会自动多出一张关系表 user_articles：\n\n| 字段       | 类型       |\n| ---------- | ---------- |\n| id         | bigint(20) |\n| user_id    | int(11)    |\n| article_id | int(11)    |\n\n","source":"_posts/2019/BeeGo快速使用指南.md","raw":"---\ntitle: BeeGo快速使用指南\ndate: 2019-09-26 14:03:52\ntags: [BeeGo, ORM, 快速使用]\ncategories: [Back, GoLang]\n---\n\n# 1. 安装与使用\n\ntest test\n\n## 1.1 安装Bee\n\n```\ngo get github.com/astaxie/beego\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n```\n\n## 1.2 创建一个Bee项目\n\n创建一个标准的 Bee 项目：\n\n```sh\nbee new myproject\n```\n\n创建一个 api 应用：\n\n```\nbee api apiproject\n```\n\n创建一个标准的 Bee 项目的目录结构：\n\n```\n├─conf\n├─controllers\n├─models\n├─routers\n├─static\n│  ├─css\n│  ├─img\n│  └─js\n├─tests\n└─views\n```\n\n## 1.3 启动\n\n在本地以开发模式启动应用：\n\n```sh\n$ bee run\n```\n\n# 2. Router\n\n## 2.1 默认访问\n\n在 `mian.go` 中引入路由系统：\n\n```diff\n// main.go\npackage main\n\nimport (\n+   _ \"Bee-Study/quickstart/routers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc main() {\n\tbeego.Run()\n}\n```\n\n首先在 Controller 层创建对应的 Controller 逻辑：\n\n```go\n// controllers/default.go\npackage controllers\n\nimport (\n\t\"github.com/astaxie/beego\"\n)\n\ntype MainController struct {\n\tbeego.Controller\n}\n\nfunc (c *MainController) Get() {\n\tc.Ctx.WriteString(\"hello\")\n}\n```\n\n然后将路由文件创建于 routers 目录下：\n\n```go\n// routers/router.go\npackage routers\n\nimport (\n\t\"Bee-Study/quickstart/controllers\"\n\t\"github.com/astaxie/beego\"\n)\n\nfunc init() {\n    beego.Router(\"/\", &controllers.MainController{})\n}\n```\n\n当我们访问 `localhost:prot/` 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 `MainController` 的 `Get()` 方法，输出 `hello`。\n\n## 2.2 不同路由匹配不同方法\n\n由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 `Get()` 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 `beego.Router` 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：\n\n```go\n// router.go\nbeego.Router(\"/test\", &controllers.MainController{}, \"get:handleTest\")\n```\n\n```go\n// controller.go\nfunc (c *MainController) handleTest(){\n    // do something\n}\n```\n\n# 3. Controller\n\n## 3.1 创建一个 Controller \n\nController 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 `main.go` 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。\n\n创建一个 Controller 我们要继承一个 `beego.Controller` 对象：\n\n```go\ntype MainController struct {\n\tbeego.Controller\n}\n```\n\n之后我们可以复写其 `Get()` 方法：\n\n```go\nfunc (c *MainController) Get() {\n\tc.Data[\"Website\"] = \"beego.me\"\n\tc.Data[\"Email\"] = \"astaxie@gmail.com\"\n\tc.TplName = \"index.tpl\"\n}\n```\n\n## 3.2 Controller 对象\n\n一个 `beeg.Controller` 类型的实例上挂载了如下的常用属性：\n\n- **Data：** 向 Template 中传入的数据\n\n- **TplName：**  vies 文件目录下的模板名称\n\n- **Ctx：** 上下文对象\n\n  - **Ctx.WriteString(content)：** 返回内容\n\n- **Redirect(url, code)：** 重定向 \n\n  > c.Redirect(“/register”, 302)\n\n- **GetString(key)：** 获取 post 数据\n\n  > name := c.GetString(“userName”)\n\n- **GetFile(key)：**获取文件\n\n  ```go\n  f, h, err := c.GetFile(“uploadname”)\n  defer f.Close()\n  if err !- nil{\n      return\n  }else{\n      c.SaveToFile(\"uploadname\", \"./static/img\" + h.Filename)\n  }\n  ```\n\n# 4. ORM\n\n## 4.1 创建一个Model\n\nBee 自带一个ORM框架，如果未下载需要手动安装：\n\n```sh\n$ go get github.com/astaxie/beego/orm\n```\n\n如果我们要连接 Mysql 数据库，则需要另外安装驱动：\n\n```sh\n$ go get github.com/go-sql-driver/mysql\n```\n\n之后我们在 `/models/model.go` 文件中需要引入 orm 与 mysql 驱动：\n\n```go\n// model.go\nimport (\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n之后定义一个数据库模型：\n\n```go\n// model.go\ntype User struct {\n\tId   int\n\tName string\n\tPwd  string\n}\n```\n\n创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：\n\n```go\n// model.go\nfunc init() {\n    // 连接数据库 参数：别名、数据库类型、连接uri\n\t_ = orm.RegisterDataBase(\"default\", \"mysql\", \"root:root@tcp(localhost:3306)/beego_study?charset=utf8\")\n    // 注册 Model\n\torm.RegisterModel(new(User))\n\t// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程\n\t_ = orm.RunSyncdb(\"default\", false, true)\n}\n```\n\n最后不要忘记在 `mian.go` 中加载 models：\n\n```go\n// mian.go\nimport (\n\t_ \"Bee-Study/quickstart/models\"\n    // ... ...\n)\n```\n\n## 4.2 ORM 的基本操作\n\n示例中的 `User` 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 `model.go` 文件中的 `User` 对象，其引入方式为 `models.User`。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。\n\n> 对数据库的操作都是在 Controller 层完成的。\n\n### 4.2.1 插入\n\n```go\no := orm.NewOrm()\nvar user User\nuser.Name = \"slene\"\nuser.Pwd= true\n\nid, err := o.Insert(&user)\nif err == nil {\n    // fmt.Println(id)\n    beego.Info(\"插入失败\",err)\n    return\n}\n```\n\n### 4.2.2 查询\n\n```go\no := orm.NewOrm()\nuser := User{}\nerr := o.Read(&user)\n```\n\n也可以指定字段查询：\n\n```go\nuser := User{Name: \"slene\"}\n// 或者：user.name = \"slene\"\nerr = o.Read(&user, \"Name\")\n```\n\n同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：\n\n```go\no := orm.NewOrm()\n// 获取 QuerySeter 对象，user 为表名\nqs := o.QueryTable(\"user\")\n\n// 也可以直接使用对象作为表名\nuser := new(User)\nqs = o.QueryTable(user) // 返回 QuerySeter\n```\n\n- qs.Filter：用来过滤查询结果，起到 **包含条件** 的作用\n\n- qs.Exclude：用来过滤查询结果，起到 **排除条件** 的作用\n\n- qs.All：返回对应的结果集对象\n\n  ```go\n  var users []*User\n  num, err := o.QueryTable(\"user\").Filter(\"name\", \"slene\").All(&users)\n  fmt.Printf(\"Returned Rows Num: %s, %s\", num, err)\n  ```\n\n- 更多用法查看 [官方文档](https://beego.me/docs/mvc/model/query.md)\n\n### 4.2.3 更新\n\n```go\no := orm.NewOrm()\nuser := User{Id: 1}\nif o.Read(&user) == nil {\n    user.Name = \"MyName\"\n    if num, err := o.Update(&user); err == nil {\n        fmt.Println(num)\n    }\n}\n```\n\n也可以指定更新的字段：\n\n```go\n// 只更新 Name\no.Update(&user, \"Name\")\n// 指定多个字段\n// o.Update(&user, \"Field1\", \"Field2\", ...)\n...\n```\n\n### 4.2.4 删除\n\n```go\no := orm.NewOrm()\nif num, err := o.Delete(&User{Id: 1}); err == nil {\n    fmt.Println(num)\n}\n```\n\n## 4.3 模型创建详解\n\n我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。\n\n### 4.3.1 字段的命名规范\n\n首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：\n\n- 创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。\n- `RunSyncdb()` 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。\n\n如结构：\n\n```go\ntype User struct{\n    Name String\n    Age int\n    BirthDay time.Time\n}\n```\n\n生成的表为：\n\n| 字段      | 类型   |\n| --------- | ------ |\n| name      | string |\n| age       | int32  |\n| birth_day | time   |\n\n### 4.3.2 字段的属性设置\n\n在设置了字段类型后，可以在后面通过 `orm:`  来追字段的属性。\n\n设置主键：`pk`\n\n设置自增：`auto`\n\n如设置一个自增的主键：\n\n```go\nId int `orm: \"pk;auto\"`\n```\n\n当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。\n\n设置默认值 `orm:\"default(11)\"`\n\n设置长度 `orm:\"size(100)\"`\n\n设置允许为空 `orm:\"null\"`，数据库默认是非空，设置 `null` 之后就可以变为`ALLOW NULL`\n\n设置唯一： `orm:”unique”`\n\n设置浮点数精度 `orm:\"digits(12);decimals(4)\"`  总共12位，四位是小数位\n\n设置时间： `orm:\"auto_now_add;type(datetime)\"`\n\n**auto_now 每次 model 保存时都会对时间自动更新**\n\n**auto_now_add 第一次保存时才设置时间**\n\n设置时间的格式：type\n\n### 4.3.3 一对多关系的创建\n\n如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：\n\n```go\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n}\n\ntype ArticleType struct{\n    Id int\n    TypeName string\n    Articles[] *Articles `orm:\"reverse(many)\"`\n}\n```\n\n当查询时，我们需要使用 `RelatedSel()` 指定连接的表，如：\n\n```go\no := orm.NewOrm()\nvar articles[]models.Article\no.QueryTable(\"Article\").RelatedSel(\"ArticleType\").Filter(\"Article__TypeName\", \"文章类型\").All(&articles)\n```\n\n当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：\n\n```go\ntypeName := ”文章类型“\nvar artiType model.ArticleType\nartiType.TypeName = typeName\nerr = o.Read(&artiType, \"TypeName\")\nif err != nil{\n    beego.Info(\"类型不存在\")\n    return\n}\narticle.ArticleType = &artiType\narticle.Content = \"... ...\"\n// 插入数据\n_,err = o.Insert(&article)\n// ... ...\n```\n\n### 4.3.3 多对多关系的创建\n\n同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：\n\n```go\ntype User struct{\n    Id int\n    Name String\n    Articles[]*Article `orm:\"rel(m2m)\"`\n}\n\ntype Article struct{\n    Id int\n    Content string\n    ArticleType *ArticleType `orm:\"rel(fk)\"`\n    User[] *Users `orm:\"reverse(many)\"`\n}\n```\n\n这样创建完成后，会自动多出一张关系表 user_articles：\n\n| 字段       | 类型       |\n| ---------- | ---------- |\n| id         | bigint(20) |\n| user_id    | int(11)    |\n| article_id | int(11)    |\n\n","slug":"BeeGo快速使用指南","published":1,"updated":"2019-11-09T13:58:39.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrf8003k3w4u1ngidmcc","content":"<h1 id=\"1-安装与使用\"><a href=\"#1-安装与使用\" class=\"headerlink\" title=\"1. 安装与使用\"></a>1. 安装与使用</h1><p>test test</p>\n<h2 id=\"1-1-安装Bee\"><a href=\"#1-1-安装Bee\" class=\"headerlink\" title=\"1.1 安装Bee\"></a>1.1 安装Bee</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-创建一个Bee项目\"><a href=\"#1-2-创建一个Bee项目\" class=\"headerlink\" title=\"1.2 创建一个Bee项目\"></a>1.2 创建一个Bee项目</h2><p>创建一个标准的 Bee 项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee new myproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 api 应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee api apiproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个标准的 Bee 项目的目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─conf</span><br><span class=\"line\">├─controllers</span><br><span class=\"line\">├─models</span><br><span class=\"line\">├─routers</span><br><span class=\"line\">├─static</span><br><span class=\"line\">│  ├─css</span><br><span class=\"line\">│  ├─img</span><br><span class=\"line\">│  └─js</span><br><span class=\"line\">├─tests</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-启动\"><a href=\"#1-3-启动\" class=\"headerlink\" title=\"1.3 启动\"></a>1.3 启动</h2><p>在本地以开发模式启动应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bee run</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Router\"><a href=\"#2-Router\" class=\"headerlink\" title=\"2. Router\"></a>2. Router</h1><h2 id=\"2-1-默认访问\"><a href=\"#2-1-默认访问\" class=\"headerlink\" title=\"2.1 默认访问\"></a>2.1 默认访问</h2><p>在 <code>mian.go</code> 中引入路由系统：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\"><span class=\"addition\">+   _ \"Bee-Study/quickstart/routers\"</span></span><br><span class=\"line\">\t\"github.com/astaxie/beego\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 Controller 层创建对应的 Controller 逻辑：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controllers/default.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Ctx.WriteString(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将路由文件创建于 routers 目录下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routers/router.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"Bee-Study/quickstart/controllers\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们访问 <code>localhost:prot/</code> 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 <code>MainController</code> 的 <code>Get()</code> 方法，输出 <code>hello</code>。</p>\n<h2 id=\"2-2-不同路由匹配不同方法\"><a href=\"#2-2-不同路由匹配不同方法\" class=\"headerlink\" title=\"2.2 不同路由匹配不同方法\"></a>2.2 不同路由匹配不同方法</h2><p>由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 <code>Get()</code> 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 <code>beego.Router</code> 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.go</span></span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/test\"</span>, &amp;controllers.MainController&#123;&#125;, <span class=\"string\">\"get:handleTest\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">handleTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Controller\"><a href=\"#3-Controller\" class=\"headerlink\" title=\"3. Controller\"></a>3. Controller</h1><h2 id=\"3-1-创建一个-Controller\"><a href=\"#3-1-创建一个-Controller\" class=\"headerlink\" title=\"3.1 创建一个 Controller\"></a>3.1 创建一个 Controller</h2><p>Controller 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 <code>main.go</code> 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。</p>\n<p>创建一个 Controller 我们要继承一个 <code>beego.Controller</code> 对象：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以复写其 <code>Get()</code> 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Website\"</span>] = <span class=\"string\">\"beego.me\"</span></span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Email\"</span>] = <span class=\"string\">\"astaxie@gmail.com\"</span></span><br><span class=\"line\">\tc.TplName = <span class=\"string\">\"index.tpl\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Controller-对象\"><a href=\"#3-2-Controller-对象\" class=\"headerlink\" title=\"3.2 Controller 对象\"></a>3.2 Controller 对象</h2><p>一个 <code>beeg.Controller</code> 类型的实例上挂载了如下的常用属性：</p>\n<ul>\n<li><p><strong>Data：</strong> 向 Template 中传入的数据</p>\n</li>\n<li><p><strong>TplName：</strong>  vies 文件目录下的模板名称</p>\n</li>\n<li><p><strong>Ctx：</strong> 上下文对象</p>\n<ul>\n<li><strong>Ctx.WriteString(content)：</strong> 返回内容</li>\n</ul>\n</li>\n<li><p><strong>Redirect(url, code)：</strong> 重定向 </p>\n<blockquote>\n<p>c.Redirect(“/register”, 302)</p>\n</blockquote>\n</li>\n<li><p><strong>GetString(key)：</strong> 获取 post 数据</p>\n<blockquote>\n<p>name := c.GetString(“userName”)</p>\n</blockquote>\n</li>\n<li><p><strong>GetFile(key)：</strong>获取文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, h, err := c.GetFile(“uploadname”)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err !- <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    c.SaveToFile(<span class=\"string\">\"uploadname\"</span>, <span class=\"string\">\"./static/img\"</span> + h.Filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"4-ORM\"><a href=\"#4-ORM\" class=\"headerlink\" title=\"4. ORM\"></a>4. ORM</h1><h2 id=\"4-1-创建一个Model\"><a href=\"#4-1-创建一个Model\" class=\"headerlink\" title=\"4.1 创建一个Model\"></a>4.1 创建一个Model</h2><p>Bee 自带一个ORM框架，如果未下载需要手动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要连接 Mysql 数据库，则需要另外安装驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>之后我们在 <code>/models/model.go</code> 文件中需要引入 orm 与 mysql 驱动：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego/orm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>之后定义一个数据库模型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPwd  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接数据库 参数：别名、数据库类型、连接uri</span></span><br><span class=\"line\">\t_ = orm.RegisterDataBase(<span class=\"string\">\"default\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"root:root@tcp(localhost:3306)/beego_study?charset=utf8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 注册 Model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(User))</span><br><span class=\"line\">\t<span class=\"comment\">// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程</span></span><br><span class=\"line\">\t_ = orm.RunSyncdb(<span class=\"string\">\"default\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后不要忘记在 <code>mian.go</code> 中加载 models：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mian.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">\"Bee-Study/quickstart/models\"</span></span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ORM-的基本操作\"><a href=\"#4-2-ORM-的基本操作\" class=\"headerlink\" title=\"4.2 ORM 的基本操作\"></a>4.2 ORM 的基本操作</h2><p>示例中的 <code>User</code> 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 <code>model.go</code> 文件中的 <code>User</code> 对象，其引入方式为 <code>models.User</code>。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。</p>\n<blockquote>\n<p>对数据库的操作都是在 Controller 层完成的。</p>\n</blockquote>\n<h3 id=\"4-2-1-插入\"><a href=\"#4-2-1-插入\" class=\"headerlink\" title=\"4.2.1 插入\"></a>4.2.1 插入</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">user.Name = <span class=\"string\">\"slene\"</span></span><br><span class=\"line\">user.Pwd= <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">id, err := o.Insert(&amp;user)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fmt.Println(id)</span></span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"插入失败\"</span>,err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2-查询\"><a href=\"#4-2-2-查询\" class=\"headerlink\" title=\"4.2.2 查询\"></a>4.2.2 查询</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;&#125;</span><br><span class=\"line\">err := o.Read(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定字段查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user := User&#123;Name: <span class=\"string\">\"slene\"</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者：user.name = \"slene\"</span></span><br><span class=\"line\">err = o.Read(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"comment\">// 获取 QuerySeter 对象，user 为表名</span></span><br><span class=\"line\">qs := o.QueryTable(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接使用对象作为表名</span></span><br><span class=\"line\">user := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">qs = o.QueryTable(user) <span class=\"comment\">// 返回 QuerySeter</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>qs.Filter：用来过滤查询结果，起到 <strong>包含条件</strong> 的作用</p>\n</li>\n<li><p>qs.Exclude：用来过滤查询结果，起到 <strong>排除条件</strong> 的作用</p>\n</li>\n<li><p>qs.All：返回对应的结果集对象</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users []*User</span><br><span class=\"line\">num, err := o.QueryTable(<span class=\"string\">\"user\"</span>).Filter(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"slene\"</span>).All(&amp;users)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"Returned Rows Num: %s, %s\"</span>, num, err)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多用法查看 <a href=\"https://beego.me/docs/mvc/model/query.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"4-2-3-更新\"><a href=\"#4-2-3-更新\" class=\"headerlink\" title=\"4.2.3 更新\"></a>4.2.3 更新</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> o.Read(&amp;user) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    user.Name = <span class=\"string\">\"MyName\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num, err := o.Update(&amp;user); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定更新的字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只更新 Name</span></span><br><span class=\"line\">o.Update(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 指定多个字段</span></span><br><span class=\"line\"><span class=\"comment\">// o.Update(&amp;user, \"Field1\", \"Field2\", ...)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-4-删除\"><a href=\"#4-2-4-删除\" class=\"headerlink\" title=\"4.2.4 删除\"></a>4.2.4 删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">if</span> num, err := o.Delete(&amp;User&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-模型创建详解\"><a href=\"#4-3-模型创建详解\" class=\"headerlink\" title=\"4.3 模型创建详解\"></a>4.3 模型创建详解</h2><p>我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。</p>\n<h3 id=\"4-3-1-字段的命名规范\"><a href=\"#4-3-1-字段的命名规范\" class=\"headerlink\" title=\"4.3.1 字段的命名规范\"></a>4.3.1 字段的命名规范</h3><p>首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：</p>\n<ul>\n<li>创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。</li>\n<li><code>RunSyncdb()</code> 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。</li>\n</ul>\n<p>如结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">    BirthDay time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的表为：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>age</td>\n<td>int32</td>\n</tr>\n<tr>\n<td>birth_day</td>\n<td>time</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-2-字段的属性设置\"><a href=\"#4-3-2-字段的属性设置\" class=\"headerlink\" title=\"4.3.2 字段的属性设置\"></a>4.3.2 字段的属性设置</h3><p>在设置了字段类型后，可以在后面通过 <code>orm:</code>  来追字段的属性。</p>\n<p>设置主键：<code>pk</code></p>\n<p>设置自增：<code>auto</code></p>\n<p>如设置一个自增的主键：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id <span class=\"keyword\">int</span> <span class=\"string\">`orm: \"pk;auto\"`</span></span><br></pre></td></tr></table></figure>\n\n<p>当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。</p>\n<p>设置默认值 <code>orm:&quot;default(11)&quot;</code></p>\n<p>设置长度 <code>orm:&quot;size(100)&quot;</code></p>\n<p>设置允许为空 <code>orm:&quot;null&quot;</code>，数据库默认是非空，设置 <code>null</code> 之后就可以变为<code>ALLOW NULL</code></p>\n<p>设置唯一： <code>orm:”unique”</code></p>\n<p>设置浮点数精度 <code>orm:&quot;digits(12);decimals(4)&quot;</code>  总共12位，四位是小数位</p>\n<p>设置时间： <code>orm:&quot;auto_now_add;type(datetime)&quot;</code></p>\n<p><strong>auto_now 每次 model 保存时都会对时间自动更新</strong></p>\n<p><strong>auto_now_add 第一次保存时才设置时间</strong></p>\n<p>设置时间的格式：type</p>\n<h3 id=\"4-3-3-一对多关系的创建\"><a href=\"#4-3-3-一对多关系的创建\" class=\"headerlink\" title=\"4.3.3 一对多关系的创建\"></a>4.3.3 一对多关系的创建</h3><p>如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ArticleType <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    TypeName <span class=\"keyword\">string</span></span><br><span class=\"line\">    Articles[] *Articles <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当查询时，我们需要使用 <code>RelatedSel()</code> 指定连接的表，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> articles[]models.Article</span><br><span class=\"line\">o.QueryTable(<span class=\"string\">\"Article\"</span>).RelatedSel(<span class=\"string\">\"ArticleType\"</span>).Filter(<span class=\"string\">\"Article__TypeName\"</span>, <span class=\"string\">\"文章类型\"</span>).All(&amp;articles)</span><br></pre></td></tr></table></figure>\n\n<p>当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName := ”文章类型“</span><br><span class=\"line\"><span class=\"keyword\">var</span> artiType model.ArticleType</span><br><span class=\"line\">artiType.TypeName = typeName</span><br><span class=\"line\">err = o.Read(&amp;artiType, <span class=\"string\">\"TypeName\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"类型不存在\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.ArticleType = &amp;artiType</span><br><span class=\"line\">article.Content = <span class=\"string\">\"... ...\"</span></span><br><span class=\"line\"><span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">_,err = o.Insert(&amp;article)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-3-多对多关系的创建\"><a href=\"#4-3-3-多对多关系的创建\" class=\"headerlink\" title=\"4.3.3 多对多关系的创建\"></a>4.3.3 多对多关系的创建</h3><p>同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Articles[]*Article <span class=\"string\">`orm:\"rel(m2m)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">    User[] *Users <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样创建完成后，会自动多出一张关系表 user_articles：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>bigint(20)</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>article_id</td>\n<td>int(11)</td>\n</tr>\n</tbody></table>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-安装与使用\"><a href=\"#1-安装与使用\" class=\"headerlink\" title=\"1. 安装与使用\"></a>1. 安装与使用</h1><p>test test</p>\n<h2 id=\"1-1-安装Bee\"><a href=\"#1-1-安装Bee\" class=\"headerlink\" title=\"1.1 安装Bee\"></a>1.1 安装Bee</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-创建一个Bee项目\"><a href=\"#1-2-创建一个Bee项目\" class=\"headerlink\" title=\"1.2 创建一个Bee项目\"></a>1.2 创建一个Bee项目</h2><p>创建一个标准的 Bee 项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee new myproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 api 应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee api apiproject</span><br></pre></td></tr></table></figure>\n\n<p>创建一个标准的 Bee 项目的目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─conf</span><br><span class=\"line\">├─controllers</span><br><span class=\"line\">├─models</span><br><span class=\"line\">├─routers</span><br><span class=\"line\">├─static</span><br><span class=\"line\">│  ├─css</span><br><span class=\"line\">│  ├─img</span><br><span class=\"line\">│  └─js</span><br><span class=\"line\">├─tests</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-启动\"><a href=\"#1-3-启动\" class=\"headerlink\" title=\"1.3 启动\"></a>1.3 启动</h2><p>在本地以开发模式启动应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bee run</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Router\"><a href=\"#2-Router\" class=\"headerlink\" title=\"2. Router\"></a>2. Router</h1><h2 id=\"2-1-默认访问\"><a href=\"#2-1-默认访问\" class=\"headerlink\" title=\"2.1 默认访问\"></a>2.1 默认访问</h2><p>在 <code>mian.go</code> 中引入路由系统：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\"><span class=\"addition\">+   _ \"Bee-Study/quickstart/routers\"</span></span><br><span class=\"line\">\t\"github.com/astaxie/beego\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 Controller 层创建对应的 Controller 逻辑：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controllers/default.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Ctx.WriteString(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将路由文件创建于 routers 目录下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// routers/router.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"Bee-Study/quickstart/controllers\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们访问 <code>localhost:prot/</code> 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 <code>MainController</code> 的 <code>Get()</code> 方法，输出 <code>hello</code>。</p>\n<h2 id=\"2-2-不同路由匹配不同方法\"><a href=\"#2-2-不同路由匹配不同方法\" class=\"headerlink\" title=\"2.2 不同路由匹配不同方法\"></a>2.2 不同路由匹配不同方法</h2><p>由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 <code>Get()</code> 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 <code>beego.Router</code> 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.go</span></span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/test\"</span>, &amp;controllers.MainController&#123;&#125;, <span class=\"string\">\"get:handleTest\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// controller.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">handleTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Controller\"><a href=\"#3-Controller\" class=\"headerlink\" title=\"3. Controller\"></a>3. Controller</h1><h2 id=\"3-1-创建一个-Controller\"><a href=\"#3-1-创建一个-Controller\" class=\"headerlink\" title=\"3.1 创建一个 Controller\"></a>3.1 创建一个 Controller</h2><p>Controller 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 <code>main.go</code> 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。</p>\n<p>创建一个 Controller 我们要继承一个 <code>beego.Controller</code> 对象：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MainController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以复写其 <code>Get()</code> 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *MainController)</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Website\"</span>] = <span class=\"string\">\"beego.me\"</span></span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"Email\"</span>] = <span class=\"string\">\"astaxie@gmail.com\"</span></span><br><span class=\"line\">\tc.TplName = <span class=\"string\">\"index.tpl\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Controller-对象\"><a href=\"#3-2-Controller-对象\" class=\"headerlink\" title=\"3.2 Controller 对象\"></a>3.2 Controller 对象</h2><p>一个 <code>beeg.Controller</code> 类型的实例上挂载了如下的常用属性：</p>\n<ul>\n<li><p><strong>Data：</strong> 向 Template 中传入的数据</p>\n</li>\n<li><p><strong>TplName：</strong>  vies 文件目录下的模板名称</p>\n</li>\n<li><p><strong>Ctx：</strong> 上下文对象</p>\n<ul>\n<li><strong>Ctx.WriteString(content)：</strong> 返回内容</li>\n</ul>\n</li>\n<li><p><strong>Redirect(url, code)：</strong> 重定向 </p>\n<blockquote>\n<p>c.Redirect(“/register”, 302)</p>\n</blockquote>\n</li>\n<li><p><strong>GetString(key)：</strong> 获取 post 数据</p>\n<blockquote>\n<p>name := c.GetString(“userName”)</p>\n</blockquote>\n</li>\n<li><p><strong>GetFile(key)：</strong>获取文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, h, err := c.GetFile(“uploadname”)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err !- <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    c.SaveToFile(<span class=\"string\">\"uploadname\"</span>, <span class=\"string\">\"./static/img\"</span> + h.Filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"4-ORM\"><a href=\"#4-ORM\" class=\"headerlink\" title=\"4. ORM\"></a>4. ORM</h1><h2 id=\"4-1-创建一个Model\"><a href=\"#4-1-创建一个Model\" class=\"headerlink\" title=\"4.1 创建一个Model\"></a>4.1 创建一个Model</h2><p>Bee 自带一个ORM框架，如果未下载需要手动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要连接 Mysql 数据库，则需要另外安装驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>之后我们在 <code>/models/model.go</code> 文件中需要引入 orm 与 mysql 驱动：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/astaxie/beego/orm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>之后定义一个数据库模型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPwd  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接数据库 参数：别名、数据库类型、连接uri</span></span><br><span class=\"line\">\t_ = orm.RegisterDataBase(<span class=\"string\">\"default\"</span>, <span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"root:root@tcp(localhost:3306)/beego_study?charset=utf8\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 注册 Model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(User))</span><br><span class=\"line\">\t<span class=\"comment\">// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程</span></span><br><span class=\"line\">\t_ = orm.RunSyncdb(<span class=\"string\">\"default\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后不要忘记在 <code>mian.go</code> 中加载 models：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mian.go</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">\"Bee-Study/quickstart/models\"</span></span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ORM-的基本操作\"><a href=\"#4-2-ORM-的基本操作\" class=\"headerlink\" title=\"4.2 ORM 的基本操作\"></a>4.2 ORM 的基本操作</h2><p>示例中的 <code>User</code> 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 <code>model.go</code> 文件中的 <code>User</code> 对象，其引入方式为 <code>models.User</code>。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。</p>\n<blockquote>\n<p>对数据库的操作都是在 Controller 层完成的。</p>\n</blockquote>\n<h3 id=\"4-2-1-插入\"><a href=\"#4-2-1-插入\" class=\"headerlink\" title=\"4.2.1 插入\"></a>4.2.1 插入</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> user User</span><br><span class=\"line\">user.Name = <span class=\"string\">\"slene\"</span></span><br><span class=\"line\">user.Pwd= <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">id, err := o.Insert(&amp;user)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fmt.Println(id)</span></span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"插入失败\"</span>,err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2-查询\"><a href=\"#4-2-2-查询\" class=\"headerlink\" title=\"4.2.2 查询\"></a>4.2.2 查询</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;&#125;</span><br><span class=\"line\">err := o.Read(&amp;user)</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定字段查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user := User&#123;Name: <span class=\"string\">\"slene\"</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者：user.name = \"slene\"</span></span><br><span class=\"line\">err = o.Read(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"comment\">// 获取 QuerySeter 对象，user 为表名</span></span><br><span class=\"line\">qs := o.QueryTable(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接使用对象作为表名</span></span><br><span class=\"line\">user := <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">qs = o.QueryTable(user) <span class=\"comment\">// 返回 QuerySeter</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>qs.Filter：用来过滤查询结果，起到 <strong>包含条件</strong> 的作用</p>\n</li>\n<li><p>qs.Exclude：用来过滤查询结果，起到 <strong>排除条件</strong> 的作用</p>\n</li>\n<li><p>qs.All：返回对应的结果集对象</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users []*User</span><br><span class=\"line\">num, err := o.QueryTable(<span class=\"string\">\"user\"</span>).Filter(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"slene\"</span>).All(&amp;users)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"Returned Rows Num: %s, %s\"</span>, num, err)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多用法查看 <a href=\"https://beego.me/docs/mvc/model/query.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"4-2-3-更新\"><a href=\"#4-2-3-更新\" class=\"headerlink\" title=\"4.2.3 更新\"></a>4.2.3 更新</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\">user := User&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> o.Read(&amp;user) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    user.Name = <span class=\"string\">\"MyName\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num, err := o.Update(&amp;user); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定更新的字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只更新 Name</span></span><br><span class=\"line\">o.Update(&amp;user, <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 指定多个字段</span></span><br><span class=\"line\"><span class=\"comment\">// o.Update(&amp;user, \"Field1\", \"Field2\", ...)</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-4-删除\"><a href=\"#4-2-4-删除\" class=\"headerlink\" title=\"4.2.4 删除\"></a>4.2.4 删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">if</span> num, err := o.Delete(&amp;User&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-模型创建详解\"><a href=\"#4-3-模型创建详解\" class=\"headerlink\" title=\"4.3 模型创建详解\"></a>4.3 模型创建详解</h2><p>我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。</p>\n<h3 id=\"4-3-1-字段的命名规范\"><a href=\"#4-3-1-字段的命名规范\" class=\"headerlink\" title=\"4.3.1 字段的命名规范\"></a>4.3.1 字段的命名规范</h3><p>首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：</p>\n<ul>\n<li>创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。</li>\n<li><code>RunSyncdb()</code> 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。</li>\n</ul>\n<p>如结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Age <span class=\"keyword\">int</span></span><br><span class=\"line\">    BirthDay time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的表为：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>age</td>\n<td>int32</td>\n</tr>\n<tr>\n<td>birth_day</td>\n<td>time</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-2-字段的属性设置\"><a href=\"#4-3-2-字段的属性设置\" class=\"headerlink\" title=\"4.3.2 字段的属性设置\"></a>4.3.2 字段的属性设置</h3><p>在设置了字段类型后，可以在后面通过 <code>orm:</code>  来追字段的属性。</p>\n<p>设置主键：<code>pk</code></p>\n<p>设置自增：<code>auto</code></p>\n<p>如设置一个自增的主键：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id <span class=\"keyword\">int</span> <span class=\"string\">`orm: \"pk;auto\"`</span></span><br></pre></td></tr></table></figure>\n\n<p>当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。</p>\n<p>设置默认值 <code>orm:&quot;default(11)&quot;</code></p>\n<p>设置长度 <code>orm:&quot;size(100)&quot;</code></p>\n<p>设置允许为空 <code>orm:&quot;null&quot;</code>，数据库默认是非空，设置 <code>null</code> 之后就可以变为<code>ALLOW NULL</code></p>\n<p>设置唯一： <code>orm:”unique”</code></p>\n<p>设置浮点数精度 <code>orm:&quot;digits(12);decimals(4)&quot;</code>  总共12位，四位是小数位</p>\n<p>设置时间： <code>orm:&quot;auto_now_add;type(datetime)&quot;</code></p>\n<p><strong>auto_now 每次 model 保存时都会对时间自动更新</strong></p>\n<p><strong>auto_now_add 第一次保存时才设置时间</strong></p>\n<p>设置时间的格式：type</p>\n<h3 id=\"4-3-3-一对多关系的创建\"><a href=\"#4-3-3-一对多关系的创建\" class=\"headerlink\" title=\"4.3.3 一对多关系的创建\"></a>4.3.3 一对多关系的创建</h3><p>如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ArticleType <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    TypeName <span class=\"keyword\">string</span></span><br><span class=\"line\">    Articles[] *Articles <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当查询时，我们需要使用 <code>RelatedSel()</code> 指定连接的表，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o := orm.NewOrm()</span><br><span class=\"line\"><span class=\"keyword\">var</span> articles[]models.Article</span><br><span class=\"line\">o.QueryTable(<span class=\"string\">\"Article\"</span>).RelatedSel(<span class=\"string\">\"ArticleType\"</span>).Filter(<span class=\"string\">\"Article__TypeName\"</span>, <span class=\"string\">\"文章类型\"</span>).All(&amp;articles)</span><br></pre></td></tr></table></figure>\n\n<p>当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName := ”文章类型“</span><br><span class=\"line\"><span class=\"keyword\">var</span> artiType model.ArticleType</span><br><span class=\"line\">artiType.TypeName = typeName</span><br><span class=\"line\">err = o.Read(&amp;artiType, <span class=\"string\">\"TypeName\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    beego.Info(<span class=\"string\">\"类型不存在\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">article.ArticleType = &amp;artiType</span><br><span class=\"line\">article.Content = <span class=\"string\">\"... ...\"</span></span><br><span class=\"line\"><span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">_,err = o.Insert(&amp;article)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-3-多对多关系的创建\"><a href=\"#4-3-3-多对多关系的创建\" class=\"headerlink\" title=\"4.3.3 多对多关系的创建\"></a>4.3.3 多对多关系的创建</h3><p>同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Name String</span><br><span class=\"line\">    Articles[]*Article <span class=\"string\">`orm:\"rel(m2m)\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">int</span></span><br><span class=\"line\">    Content <span class=\"keyword\">string</span></span><br><span class=\"line\">    ArticleType *ArticleType <span class=\"string\">`orm:\"rel(fk)\"`</span></span><br><span class=\"line\">    User[] *Users <span class=\"string\">`orm:\"reverse(many)\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样创建完成后，会自动多出一张关系表 user_articles：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>bigint(20)</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>article_id</td>\n<td>int(11)</td>\n</tr>\n</tbody></table>\n"},{"title":"Gulp快速使用指南","date":"2019-07-22T13:30:36.000Z","_content":"> Gulp学习版本为3.9.1\n\n# 1. Gulp特点\n\n- 任务化\n- 基于流\n  - 输入流\n  - 输出流\n\n# 2. API\n- `gulp.src(globs[, options])` 输入文件：输入流\n- `gulp.dest(path[, options])` 输出文件：输出流\n- `gulp.task(name[, deps], fn)` 任务化\n- `gulp.watch(glob[, opts], tasks)` 监视\n\n# 3. 目录结构\n\n```\n|- dist\n|- src\n    |- js\n    |- css\n    |- less\n|- index.html\n|- gulpfile.js\n|- package.json\n    {\n        \"name\": \"gulp_study\",\n        \"version\": \"1.0.0\"\n    }\n```\n\n# 4. 安装gulp\n\n* 全局安装：\n\n```\nnpm install gulp -g\n```\n\n* 局部安装：\n\n```\nnpm install gulp -S\n```\n\n* 配置编码\n\n```js\n// gulpfile.js\nvar gulp = require('gulp')\n// 注册任务\ngulp.task('任务名', function(){\n    // 配置任务的操作\n})\n\ngulp.task('default', [])\n```\n\n之后我们可以使用 `gulp 任务名` 来执行某个特定的任务，或者使用 `gulp` 来执行默认的任务序列**（gulp4 已弃用）**\n\n# 5. 常用的gulp插件\n\n*   sass的编译（`gulp-sass`）\n\n*   less编译 （`gulp-less`）\n\n*   重命名（为压缩的文件加'.min'）（`gulp-rename`）\n\n*   自动添加css前缀（`gulp-autoprefixer`）\n\n*   压缩css（`gulp-minify-css`）\n\n*   js代码校验（`gulp-jshint`）\n\n*   合并js/css文件（`gulp-concat`）\n\n*   压缩js代码（`gulp-uglify`）\n\n*   压缩图片（`gulp-imagemin`）\n\n*   自动刷新页面（`gulp-livereload`，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）\n\n*   图片缓存，只有图片替换了才压缩（`gulp-cache`）\n\n*   更改提醒（`gulp-notify`）\n\n# 6. 合并压缩js任务\n\n## 6.1 配置任务\n\n我们在 `src/js` 文件夹中创建两个js文件，分别对应了两个方法，我们想要将这两个js文件合并为一个文件，需要在 `gulpfile.js` 文件中定义任务流：\n\n```js\ngulp.task('js', function() {\n    // 深度遍历\n    // return gulp.src('src/js/**/*.js') \n    // 浅度遍历\n    return gulp.src('src/js/*.js') // 找到目标文件，将数据读取到gulp的内存中\n})\n```\n\n## 6.2 下载和使用插件\n\n1. 安装插件\n\n当gulp读取文件到内存中后，会进行一系列操作，这些操作会用到gulp插件：\n\n```\ncnpm install gulp-concat gulp-uglify gulp-rename --save-dev\n```\n\n2. 引入插件\n\n引入插件：\n\n```js\n// gulpfile.js\nvar concat = require('gulp-concat')\nvar uglify = require('gulp-uglify')\nvar rename = require('gulp-rename')\n```\n\n3. 注册任务\n\n在引入插件之后我们便可以执行链式调用来配置任务了，每一个操作用 `pipe` 方法来进行连接：\n\n```js\n// gulpfile.js\ngulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n        .pipe(concat('build.js')) // 临时合并文件\n        .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n        .pipe(uglify())\n        .pipe(rename({ suffix: '.min' })) // 重命名\n        .pipe(gulp.dest('dist/js/'))\n})\n```\n\n## 6.3 执行任务\n\n调用已注册的任务，我们可以得到一个已经合并的文件 `build.js` 和一个合并并压缩的文件 `build.min.js`\n\n```sh\ngulp js\n```\n\n> gulp会自动忽略为调用的函数方法\n\n# 7. 合并压缩css任务\n\n1. 下载插件\n\n```sh\nnpm install gulp-less gulp-clean-css --save-dev\n```\n\n2. 引入和使用插件\n\n```js\n// gulpfile.js\nvar gulp = require('gulp')\nvar concat = require('gulp-concat')\nvar rename = require('gulp-rename')\nvar less = require('gulp-less')\nvar cssClean = require('gulp-clean-css')\n\n// 注册转换less的任务\ngulp.task('less', function () {\n    return gulp.src('src/less/*.less')\n        .pipe(less()) // 编译less文件为css文件\n        .pipe(gulp.dest('src/css')) // 将less编译为css文件后存放到css文件夹中，等待后续统一合并\n})\n\n// 合并压缩css文件\ngulp.task('css', function () {\n    return gulp.src('src/css/*.css')\n        .pipe(concat('build.css'))\n        .pipe(rename({ suffix: '.min' }))\n        .pipe(cssClean({ compatibility: 'ie8' })) // 压缩、设置兼容到ie8\n        .pipe(gulp.dest('dist/css/'))\n})\n\ngulp.task('default', [])\n```\n\n3. 执行任务\n\n```sh\n> gulp less\n[15:18:39] Using gulpfile D:\\test\\gulp_study\\gulpfile.js\n[15:18:39] Starting 'less'...\n[15:18:39] Finished 'less' after 43 ms\n\n> gulp css\n[15:18:46] Using gulpfile D:\\test\\gulp_study\\gulpfile.js\n[15:18:46] Starting 'css'...\n[15:18:46] Finished 'css' after 48 ms\n```\n\n\n\n# 8. 线性执行任务\n\n```js\n// gulpfile.js\n... ...\ngulp.task('default', ['js', 'less', 'css'])\n```\n\n在用这种方式时，gulp的每个编译任务是移异步进行的，如果将编写任务中的 `return` 去掉，则编译过程是同步进行的，如：\n\n```diff\n  gulp.task('js', function () {\n-   return gulp.src('src/js/*.js')\n+   gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n  })\n```\n\n> 但是我们不推荐这么做（占内存，速度慢）\n\n当我们需要逐个执行任务的时候，可以在设置任务的第二个参数位置，去设置它的依赖任务，如我们如果需要设置先执行 `less` 任务，再执行 `css` 任务，那么 `css` 任务的依赖任务就是 `less` 任务，我们可以进行如下设置：\n\n```js\n// gulpfile.js\ngulp.task('css', ['less'], function () {\n  return gulp.src('src/css/*.css')\n    // ... ...\n})\n```\n\n\n\n\n\n\n# 9. html压缩\n\n1. 下载插件\n\n```sh\nnpm install gulp-html --save-dev\n```\n\n2. 引入和使用插件\n\n```js\n// glupfile.js\nvar htmlMin = require('gulp-html')\n// ... ...\n\n// 注册压缩html的任务\ngulp.task('html', function () {\n  return gulp.src('index.html')\n    .pipe(htmlMin({ collapseWhitespace: true })) // 压缩html\n    .pipe(gulp.dest('dist/')) // 输出\n})\n```\n\n3. 执行任务\n\n```sh\ngulp html\n```\n\n> 注意路径问题，压缩输出的 html 换到了另外的一个路径下，这个所以导出 html 前，必须将路径配置到 `dist` 目录下。\n\n# 10. 半自动进行项目构建\n\n1. 下载插件\n   \n```sh\nnpm install gulp-livereload --save-dev\n```\n\n2. 配置编码\n\n```js\n// 监视任务\ngulp.task('watch', ['default'], function () {\n  // 开启监听\n  livereload.listen();\n  // 确认监听的目标以及绑定相应的任务\n  gulp.watch('src/js/*.js', ['js']);\n  gulp.watch(['src/css/*.css', 'src/less/*.less'], ['css'])\n})\n```\n\n在设置完监听任务后，需要在监听的任务中再额外增加一个 `pipe(livereload())` 方法，如：\n\n```diff\n  gulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n+     .pipe(livereload())\n  })\n```\n\n3. 执行任务\n\n```sh\ngulp watch\n```\n\n之后当我们编辑监听中的代码时，就可以自动打包编译，之后再**手动刷新**浏览器后就可以浏览效果，如果想要**自动刷新**看下一节全自动构建项目。\n\n\n# 11. 全自动构建项目\n\n1. 安装插件\n\n```\nnpm install gulp-connect --save-dev\n```\n\n2. 引入并使用插件\n\n```js\nvar connect = require('gulp-connect')\n// ... ...\n\n// gulpfile.js\n// 注册监视任务（全自动）\ngulp.task('server', ['default'], function () {\n  // 配置服务器选项\n  connect.server({\n    root: 'dist/',\n    livereload: true, // 实时刷新\n    port: 5000\n  })\n  // 确认监听的目标以及绑定相应的任务\n  gulp.watch('src/js/*.js', ['js']);\n  gulp.watch(['src/css/*.css', 'src/less/*.less'], ['css'])\n})\n```\n\n相似的，在设置完全自动监听的任务后，需要在监听的任务中再额外增加一个 `.pipe(connect.reload())` 方法，如：\n\n```diff\n  gulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n+     .pipe(connect.reload())\n  })\n```\n\n3. 执行任务\n\n```sh\ngulp server\n```\n\n## 12. 扩展\n\n### 12.1 使用 open 模块自动打开浏览器\n\n```\nnpm install open --save-dev\n```\n\n```js\n// gulpfile.js\nvar open = require('open')\n\n... ...\n\n// 注册监视任务（全自动）\ngulp.task('server', ['default'], function () {\n  ... ...\n  open('http://localhost:5000')\n})\n```\n\n## 12.2 使用 gulp-load-plugins 插件\n\n1. 下载：\n\n```\ncnpm install gulp-load-plugins --save-dev\n```\n\n2. 引入：\n\n```js\nvar $ = require('gulp-load-plugins')\n```\n\n3. 之后我们便可以直接使用 `$` 对象来调用所有的插件方法：\n\n```js\nvar gulp = require('gulp')\n// var concat = require('gulp-concat')\n// var uglify = require('gulp-uglify')\n// var rename = require('gulp-rename')\n// var less = require('gulp-less')\n// var cssClean = require('gulp-clean-css')\n// var htmlMin = require('gulp-htmlmin')\n// var livereload = require('gulp-livereload')\n// var connect = require('gulp-connect')\n// var open = require('open')\nvar $ = require('gulp-load-plugins')\n\n// 注册压缩html的任务\ngulp.task('js', function () {\n  return gulp.src('src/js/*.js')\n    .pipe($.concat('build.js')) // 临时合并文件\n    .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n    .pipe($.uglify())\n    .pipe($.rename({ suffix: '.min' })) // 重命名\n    .pipe(gulp.dest('dist/js/'))\n    .pipe($.livereload())\n    .pipe($.connect.reload())\n})\n```\n\n4. 命名规则：\n\n使用 `$` 对象引入的 gulp 插件必须有其对应的命名方法，其规则为：\n- 忽略连接符前的 gulp，直接写插件名称，如：`gulp-concat` 插件对应的引入方法为 `$.concat`\n- 如果有多个连接符，则采用驼峰命名，如：`gulp-clean-css` 插件对应的引入方法为 `$.cleanCss`","source":"_posts/2019/Gulp快速使用指南.md","raw":"---\ntitle: Gulp快速使用指南\ndate: 2019-07-22 21:30:36\ntags: [快速使用, Gulp]\ncategories: [Front, 构建工具]\n---\n> Gulp学习版本为3.9.1\n\n# 1. Gulp特点\n\n- 任务化\n- 基于流\n  - 输入流\n  - 输出流\n\n# 2. API\n- `gulp.src(globs[, options])` 输入文件：输入流\n- `gulp.dest(path[, options])` 输出文件：输出流\n- `gulp.task(name[, deps], fn)` 任务化\n- `gulp.watch(glob[, opts], tasks)` 监视\n\n# 3. 目录结构\n\n```\n|- dist\n|- src\n    |- js\n    |- css\n    |- less\n|- index.html\n|- gulpfile.js\n|- package.json\n    {\n        \"name\": \"gulp_study\",\n        \"version\": \"1.0.0\"\n    }\n```\n\n# 4. 安装gulp\n\n* 全局安装：\n\n```\nnpm install gulp -g\n```\n\n* 局部安装：\n\n```\nnpm install gulp -S\n```\n\n* 配置编码\n\n```js\n// gulpfile.js\nvar gulp = require('gulp')\n// 注册任务\ngulp.task('任务名', function(){\n    // 配置任务的操作\n})\n\ngulp.task('default', [])\n```\n\n之后我们可以使用 `gulp 任务名` 来执行某个特定的任务，或者使用 `gulp` 来执行默认的任务序列**（gulp4 已弃用）**\n\n# 5. 常用的gulp插件\n\n*   sass的编译（`gulp-sass`）\n\n*   less编译 （`gulp-less`）\n\n*   重命名（为压缩的文件加'.min'）（`gulp-rename`）\n\n*   自动添加css前缀（`gulp-autoprefixer`）\n\n*   压缩css（`gulp-minify-css`）\n\n*   js代码校验（`gulp-jshint`）\n\n*   合并js/css文件（`gulp-concat`）\n\n*   压缩js代码（`gulp-uglify`）\n\n*   压缩图片（`gulp-imagemin`）\n\n*   自动刷新页面（`gulp-livereload`，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）\n\n*   图片缓存，只有图片替换了才压缩（`gulp-cache`）\n\n*   更改提醒（`gulp-notify`）\n\n# 6. 合并压缩js任务\n\n## 6.1 配置任务\n\n我们在 `src/js` 文件夹中创建两个js文件，分别对应了两个方法，我们想要将这两个js文件合并为一个文件，需要在 `gulpfile.js` 文件中定义任务流：\n\n```js\ngulp.task('js', function() {\n    // 深度遍历\n    // return gulp.src('src/js/**/*.js') \n    // 浅度遍历\n    return gulp.src('src/js/*.js') // 找到目标文件，将数据读取到gulp的内存中\n})\n```\n\n## 6.2 下载和使用插件\n\n1. 安装插件\n\n当gulp读取文件到内存中后，会进行一系列操作，这些操作会用到gulp插件：\n\n```\ncnpm install gulp-concat gulp-uglify gulp-rename --save-dev\n```\n\n2. 引入插件\n\n引入插件：\n\n```js\n// gulpfile.js\nvar concat = require('gulp-concat')\nvar uglify = require('gulp-uglify')\nvar rename = require('gulp-rename')\n```\n\n3. 注册任务\n\n在引入插件之后我们便可以执行链式调用来配置任务了，每一个操作用 `pipe` 方法来进行连接：\n\n```js\n// gulpfile.js\ngulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n        .pipe(concat('build.js')) // 临时合并文件\n        .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n        .pipe(uglify())\n        .pipe(rename({ suffix: '.min' })) // 重命名\n        .pipe(gulp.dest('dist/js/'))\n})\n```\n\n## 6.3 执行任务\n\n调用已注册的任务，我们可以得到一个已经合并的文件 `build.js` 和一个合并并压缩的文件 `build.min.js`\n\n```sh\ngulp js\n```\n\n> gulp会自动忽略为调用的函数方法\n\n# 7. 合并压缩css任务\n\n1. 下载插件\n\n```sh\nnpm install gulp-less gulp-clean-css --save-dev\n```\n\n2. 引入和使用插件\n\n```js\n// gulpfile.js\nvar gulp = require('gulp')\nvar concat = require('gulp-concat')\nvar rename = require('gulp-rename')\nvar less = require('gulp-less')\nvar cssClean = require('gulp-clean-css')\n\n// 注册转换less的任务\ngulp.task('less', function () {\n    return gulp.src('src/less/*.less')\n        .pipe(less()) // 编译less文件为css文件\n        .pipe(gulp.dest('src/css')) // 将less编译为css文件后存放到css文件夹中，等待后续统一合并\n})\n\n// 合并压缩css文件\ngulp.task('css', function () {\n    return gulp.src('src/css/*.css')\n        .pipe(concat('build.css'))\n        .pipe(rename({ suffix: '.min' }))\n        .pipe(cssClean({ compatibility: 'ie8' })) // 压缩、设置兼容到ie8\n        .pipe(gulp.dest('dist/css/'))\n})\n\ngulp.task('default', [])\n```\n\n3. 执行任务\n\n```sh\n> gulp less\n[15:18:39] Using gulpfile D:\\test\\gulp_study\\gulpfile.js\n[15:18:39] Starting 'less'...\n[15:18:39] Finished 'less' after 43 ms\n\n> gulp css\n[15:18:46] Using gulpfile D:\\test\\gulp_study\\gulpfile.js\n[15:18:46] Starting 'css'...\n[15:18:46] Finished 'css' after 48 ms\n```\n\n\n\n# 8. 线性执行任务\n\n```js\n// gulpfile.js\n... ...\ngulp.task('default', ['js', 'less', 'css'])\n```\n\n在用这种方式时，gulp的每个编译任务是移异步进行的，如果将编写任务中的 `return` 去掉，则编译过程是同步进行的，如：\n\n```diff\n  gulp.task('js', function () {\n-   return gulp.src('src/js/*.js')\n+   gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n  })\n```\n\n> 但是我们不推荐这么做（占内存，速度慢）\n\n当我们需要逐个执行任务的时候，可以在设置任务的第二个参数位置，去设置它的依赖任务，如我们如果需要设置先执行 `less` 任务，再执行 `css` 任务，那么 `css` 任务的依赖任务就是 `less` 任务，我们可以进行如下设置：\n\n```js\n// gulpfile.js\ngulp.task('css', ['less'], function () {\n  return gulp.src('src/css/*.css')\n    // ... ...\n})\n```\n\n\n\n\n\n\n# 9. html压缩\n\n1. 下载插件\n\n```sh\nnpm install gulp-html --save-dev\n```\n\n2. 引入和使用插件\n\n```js\n// glupfile.js\nvar htmlMin = require('gulp-html')\n// ... ...\n\n// 注册压缩html的任务\ngulp.task('html', function () {\n  return gulp.src('index.html')\n    .pipe(htmlMin({ collapseWhitespace: true })) // 压缩html\n    .pipe(gulp.dest('dist/')) // 输出\n})\n```\n\n3. 执行任务\n\n```sh\ngulp html\n```\n\n> 注意路径问题，压缩输出的 html 换到了另外的一个路径下，这个所以导出 html 前，必须将路径配置到 `dist` 目录下。\n\n# 10. 半自动进行项目构建\n\n1. 下载插件\n   \n```sh\nnpm install gulp-livereload --save-dev\n```\n\n2. 配置编码\n\n```js\n// 监视任务\ngulp.task('watch', ['default'], function () {\n  // 开启监听\n  livereload.listen();\n  // 确认监听的目标以及绑定相应的任务\n  gulp.watch('src/js/*.js', ['js']);\n  gulp.watch(['src/css/*.css', 'src/less/*.less'], ['css'])\n})\n```\n\n在设置完监听任务后，需要在监听的任务中再额外增加一个 `pipe(livereload())` 方法，如：\n\n```diff\n  gulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n+     .pipe(livereload())\n  })\n```\n\n3. 执行任务\n\n```sh\ngulp watch\n```\n\n之后当我们编辑监听中的代码时，就可以自动打包编译，之后再**手动刷新**浏览器后就可以浏览效果，如果想要**自动刷新**看下一节全自动构建项目。\n\n\n# 11. 全自动构建项目\n\n1. 安装插件\n\n```\nnpm install gulp-connect --save-dev\n```\n\n2. 引入并使用插件\n\n```js\nvar connect = require('gulp-connect')\n// ... ...\n\n// gulpfile.js\n// 注册监视任务（全自动）\ngulp.task('server', ['default'], function () {\n  // 配置服务器选项\n  connect.server({\n    root: 'dist/',\n    livereload: true, // 实时刷新\n    port: 5000\n  })\n  // 确认监听的目标以及绑定相应的任务\n  gulp.watch('src/js/*.js', ['js']);\n  gulp.watch(['src/css/*.css', 'src/less/*.less'], ['css'])\n})\n```\n\n相似的，在设置完全自动监听的任务后，需要在监听的任务中再额外增加一个 `.pipe(connect.reload())` 方法，如：\n\n```diff\n  gulp.task('js', function () {\n    return gulp.src('src/js/*.js')\n      .pipe(concat('build.js')) // 临时合并文件\n      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n      .pipe(uglify())\n      .pipe(rename({ suffix: '.min' })) // 重命名\n      .pipe(gulp.dest('dist/js/'))\n+     .pipe(connect.reload())\n  })\n```\n\n3. 执行任务\n\n```sh\ngulp server\n```\n\n## 12. 扩展\n\n### 12.1 使用 open 模块自动打开浏览器\n\n```\nnpm install open --save-dev\n```\n\n```js\n// gulpfile.js\nvar open = require('open')\n\n... ...\n\n// 注册监视任务（全自动）\ngulp.task('server', ['default'], function () {\n  ... ...\n  open('http://localhost:5000')\n})\n```\n\n## 12.2 使用 gulp-load-plugins 插件\n\n1. 下载：\n\n```\ncnpm install gulp-load-plugins --save-dev\n```\n\n2. 引入：\n\n```js\nvar $ = require('gulp-load-plugins')\n```\n\n3. 之后我们便可以直接使用 `$` 对象来调用所有的插件方法：\n\n```js\nvar gulp = require('gulp')\n// var concat = require('gulp-concat')\n// var uglify = require('gulp-uglify')\n// var rename = require('gulp-rename')\n// var less = require('gulp-less')\n// var cssClean = require('gulp-clean-css')\n// var htmlMin = require('gulp-htmlmin')\n// var livereload = require('gulp-livereload')\n// var connect = require('gulp-connect')\n// var open = require('open')\nvar $ = require('gulp-load-plugins')\n\n// 注册压缩html的任务\ngulp.task('js', function () {\n  return gulp.src('src/js/*.js')\n    .pipe($.concat('build.js')) // 临时合并文件\n    .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地\n    .pipe($.uglify())\n    .pipe($.rename({ suffix: '.min' })) // 重命名\n    .pipe(gulp.dest('dist/js/'))\n    .pipe($.livereload())\n    .pipe($.connect.reload())\n})\n```\n\n4. 命名规则：\n\n使用 `$` 对象引入的 gulp 插件必须有其对应的命名方法，其规则为：\n- 忽略连接符前的 gulp，直接写插件名称，如：`gulp-concat` 插件对应的引入方法为 `$.concat`\n- 如果有多个连接符，则采用驼峰命名，如：`gulp-clean-css` 插件对应的引入方法为 `$.cleanCss`","slug":"Gulp快速使用指南","published":1,"updated":"2019-11-09T13:59:16.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfa003m3w4uda4m38xc","content":"<blockquote>\n<p>Gulp学习版本为3.9.1</p>\n</blockquote>\n<h1 id=\"1-Gulp特点\"><a href=\"#1-Gulp特点\" class=\"headerlink\" title=\"1. Gulp特点\"></a>1. Gulp特点</h1><ul>\n<li>任务化</li>\n<li>基于流<ul>\n<li>输入流</li>\n<li>输出流</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-API\"><a href=\"#2-API\" class=\"headerlink\" title=\"2. API\"></a>2. API</h1><ul>\n<li><code>gulp.src(globs[, options])</code> 输入文件：输入流</li>\n<li><code>gulp.dest(path[, options])</code> 输出文件：输出流</li>\n<li><code>gulp.task(name[, deps], fn)</code> 任务化</li>\n<li><code>gulp.watch(glob[, opts], tasks)</code> 监视</li>\n</ul>\n<h1 id=\"3-目录结构\"><a href=\"#3-目录结构\" class=\"headerlink\" title=\"3. 目录结构\"></a>3. 目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- dist</span><br><span class=\"line\">|- src</span><br><span class=\"line\">    |- js</span><br><span class=\"line\">    |- css</span><br><span class=\"line\">    |- less</span><br><span class=\"line\">|- index.html</span><br><span class=\"line\">|- gulpfile.js</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;gulp_study&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-安装gulp\"><a href=\"#4-安装gulp\" class=\"headerlink\" title=\"4. 安装gulp\"></a>4. 安装gulp</h1><ul>\n<li>全局安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>局部安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -S</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置编码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'任务名'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置任务的操作</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [])</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以使用 <code>gulp 任务名</code> 来执行某个特定的任务，或者使用 <code>gulp</code> 来执行默认的任务序列<strong>（gulp4 已弃用）</strong></p>\n<h1 id=\"5-常用的gulp插件\"><a href=\"#5-常用的gulp插件\" class=\"headerlink\" title=\"5. 常用的gulp插件\"></a>5. 常用的gulp插件</h1><ul>\n<li><p>sass的编译（<code>gulp-sass</code>）</p>\n</li>\n<li><p>less编译 （<code>gulp-less</code>）</p>\n</li>\n<li><p>重命名（为压缩的文件加’.min’）（<code>gulp-rename</code>）</p>\n</li>\n<li><p>自动添加css前缀（<code>gulp-autoprefixer</code>）</p>\n</li>\n<li><p>压缩css（<code>gulp-minify-css</code>）</p>\n</li>\n<li><p>js代码校验（<code>gulp-jshint</code>）</p>\n</li>\n<li><p>合并js/css文件（<code>gulp-concat</code>）</p>\n</li>\n<li><p>压缩js代码（<code>gulp-uglify</code>）</p>\n</li>\n<li><p>压缩图片（<code>gulp-imagemin</code>）</p>\n</li>\n<li><p>自动刷新页面（<code>gulp-livereload</code>，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）</p>\n</li>\n<li><p>图片缓存，只有图片替换了才压缩（<code>gulp-cache</code>）</p>\n</li>\n<li><p>更改提醒（<code>gulp-notify</code>）</p>\n</li>\n</ul>\n<h1 id=\"6-合并压缩js任务\"><a href=\"#6-合并压缩js任务\" class=\"headerlink\" title=\"6. 合并压缩js任务\"></a>6. 合并压缩js任务</h1><h2 id=\"6-1-配置任务\"><a href=\"#6-1-配置任务\" class=\"headerlink\" title=\"6.1 配置任务\"></a>6.1 配置任务</h2><p>我们在 <code>src/js</code> 文件夹中创建两个js文件，分别对应了两个方法，我们想要将这两个js文件合并为一个文件，需要在 <code>gulpfile.js</code> 文件中定义任务流：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 深度遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// return gulp.src('src/js/**/*.js') </span></span><br><span class=\"line\">    <span class=\"comment\">// 浅度遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) <span class=\"comment\">// 找到目标文件，将数据读取到gulp的内存中</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-下载和使用插件\"><a href=\"#6-2-下载和使用插件\" class=\"headerlink\" title=\"6.2 下载和使用插件\"></a>6.2 下载和使用插件</h2><ol>\n<li>安装插件</li>\n</ol>\n<p>当gulp读取文件到内存中后，会进行一系列操作，这些操作会用到gulp插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入插件</li>\n</ol>\n<p>引入插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>注册任务</li>\n</ol>\n<p>在引入插件之后我们便可以执行链式调用来配置任务了，每一个操作用 <code>pipe</code> 方法来进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'build.js'</span>)) <span class=\"comment\">// 临时合并文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>)) <span class=\"comment\">// 临时输出文件到本地</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;)) <span class=\"comment\">// 重命名</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-3-执行任务\"><a href=\"#6-3-执行任务\" class=\"headerlink\" title=\"6.3 执行任务\"></a>6.3 执行任务</h2><p>调用已注册的任务，我们可以得到一个已经合并的文件 <code>build.js</code> 和一个合并并压缩的文件 <code>build.min.js</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>gulp会自动忽略为调用的函数方法</p>\n</blockquote>\n<h1 id=\"7-合并压缩css任务\"><a href=\"#7-合并压缩css任务\" class=\"headerlink\" title=\"7. 合并压缩css任务\"></a>7. 合并压缩css任务</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-less gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入和使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssClean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册转换less的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        .pipe(less()) <span class=\"comment\">// 编译less文件为css文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>)) <span class=\"comment\">// 将less编译为css文件后存放到css文件夹中，等待后续统一合并</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并压缩css文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'build.css'</span>))</span><br><span class=\"line\">        .pipe(rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        .pipe(cssClean(&#123; <span class=\"attr\">compatibility</span>: <span class=\"string\">'ie8'</span> &#125;)) <span class=\"comment\">// 压缩、设置兼容到ie8</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css/'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gulp less</span><br><span class=\"line\">[15:18:39] Using gulpfile D:\\<span class=\"built_in\">test</span>\\gulp_study\\gulpfile.js</span><br><span class=\"line\">[15:18:39] Starting <span class=\"string\">'less'</span>...</span><br><span class=\"line\">[15:18:39] Finished <span class=\"string\">'less'</span> after 43 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; gulp css</span><br><span class=\"line\">[15:18:46] Using gulpfile D:\\<span class=\"built_in\">test</span>\\gulp_study\\gulpfile.js</span><br><span class=\"line\">[15:18:46] Starting <span class=\"string\">'css'</span>...</span><br><span class=\"line\">[15:18:46] Finished <span class=\"string\">'css'</span> after 48 ms</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"8-线性执行任务\"><a href=\"#8-线性执行任务\" class=\"headerlink\" title=\"8. 线性执行任务\"></a>8. 线性执行任务</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'js'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'css'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>在用这种方式时，gulp的每个编译任务是移异步进行的，如果将编写任务中的 <code>return</code> 去掉，则编译过程是同步进行的，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   return gulp.src('src/js/*.js')</span></span><br><span class=\"line\"><span class=\"addition\">+   gulp.src('src/js/*.js')</span></span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是我们不推荐这么做（占内存，速度慢）</p>\n</blockquote>\n<p>当我们需要逐个执行任务的时候，可以在设置任务的第二个参数位置，去设置它的依赖任务，如我们如果需要设置先执行 <code>less</code> 任务，再执行 <code>css</code> 任务，那么 <code>css</code> 任务的依赖任务就是 <code>less</code> 任务，我们可以进行如下设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, [<span class=\"string\">'less'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h1 id=\"9-html压缩\"><a href=\"#9-html压缩\" class=\"headerlink\" title=\"9. html压缩\"></a>9. html压缩</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-html --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入和使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// glupfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlMin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-html'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册压缩html的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\">    .pipe(htmlMin(&#123; <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span> &#125;)) <span class=\"comment\">// 压缩html</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>)) <span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp html</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意路径问题，压缩输出的 html 换到了另外的一个路径下，这个所以导出 html 前，必须将路径配置到 <code>dist</code> 目录下。</p>\n</blockquote>\n<h1 id=\"10-半自动进行项目构建\"><a href=\"#10-半自动进行项目构建\" class=\"headerlink\" title=\"10. 半自动进行项目构建\"></a>10. 半自动进行项目构建</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置编码</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监视任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开启监听</span></span><br><span class=\"line\">  livereload.listen();</span><br><span class=\"line\">  <span class=\"comment\">// 确认监听的目标以及绑定相应的任务</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">  gulp.watch([<span class=\"string\">'src/css/*.css'</span>, <span class=\"string\">'src/less/*.less'</span>], [<span class=\"string\">'css'</span>])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在设置完监听任务后，需要在监听的任务中再额外增加一个 <code>pipe(livereload())</code> 方法，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\">    return gulp.src('src/js/*.js')</span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\"><span class=\"addition\">+     .pipe(livereload())</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp watch</span><br></pre></td></tr></table></figure>\n\n<p>之后当我们编辑监听中的代码时，就可以自动打包编译，之后再<strong>手动刷新</strong>浏览器后就可以浏览效果，如果想要<strong>自动刷新</strong>看下一节全自动构建项目。</p>\n<h1 id=\"11-全自动构建项目\"><a href=\"#11-全自动构建项目\" class=\"headerlink\" title=\"11. 全自动构建项目\"></a>11. 全自动构建项目</h1><ol>\n<li>安装插件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-connect --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入并使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"comment\">// 注册监视任务（全自动）</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置服务器选项</span></span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    root: <span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    livereload: <span class=\"literal\">true</span>, <span class=\"comment\">// 实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 确认监听的目标以及绑定相应的任务</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">  gulp.watch([<span class=\"string\">'src/css/*.css'</span>, <span class=\"string\">'src/less/*.less'</span>], [<span class=\"string\">'css'</span>])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>相似的，在设置完全自动监听的任务后，需要在监听的任务中再额外增加一个 <code>.pipe(connect.reload())</code> 方法，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\">    return gulp.src('src/js/*.js')</span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\"><span class=\"addition\">+     .pipe(connect.reload())</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-扩展\"><a href=\"#12-扩展\" class=\"headerlink\" title=\"12. 扩展\"></a>12. 扩展</h2><h3 id=\"12-1-使用-open-模块自动打开浏览器\"><a href=\"#12-1-使用-open-模块自动打开浏览器\" class=\"headerlink\" title=\"12.1 使用 open 模块自动打开浏览器\"></a>12.1 使用 open 模块自动打开浏览器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install open --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> open = <span class=\"built_in\">require</span>(<span class=\"string\">'open'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册监视任务（全自动）</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  open(<span class=\"string\">'http://localhost:5000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-2-使用-gulp-load-plugins-插件\"><a href=\"#12-2-使用-gulp-load-plugins-插件\" class=\"headerlink\" title=\"12.2 使用 gulp-load-plugins 插件\"></a>12.2 使用 gulp-load-plugins 插件</h2><ol>\n<li>下载：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp-load-plugins --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>之后我们便可以直接使用 <code>$</code> 对象来调用所有的插件方法：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// var concat = require('gulp-concat')</span></span><br><span class=\"line\"><span class=\"comment\">// var uglify = require('gulp-uglify')</span></span><br><span class=\"line\"><span class=\"comment\">// var rename = require('gulp-rename')</span></span><br><span class=\"line\"><span class=\"comment\">// var less = require('gulp-less')</span></span><br><span class=\"line\"><span class=\"comment\">// var cssClean = require('gulp-clean-css')</span></span><br><span class=\"line\"><span class=\"comment\">// var htmlMin = require('gulp-htmlmin')</span></span><br><span class=\"line\"><span class=\"comment\">// var livereload = require('gulp-livereload')</span></span><br><span class=\"line\"><span class=\"comment\">// var connect = require('gulp-connect')</span></span><br><span class=\"line\"><span class=\"comment\">// var open = require('open')</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册压缩html的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">    .pipe($.concat(<span class=\"string\">'build.js'</span>)) <span class=\"comment\">// 临时合并文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>)) <span class=\"comment\">// 临时输出文件到本地</span></span><br><span class=\"line\">    .pipe($.uglify())</span><br><span class=\"line\">    .pipe($.rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;)) <span class=\"comment\">// 重命名</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>))</span><br><span class=\"line\">    .pipe($.livereload())</span><br><span class=\"line\">    .pipe($.connect.reload())</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>命名规则：</li>\n</ol>\n<p>使用 <code>$</code> 对象引入的 gulp 插件必须有其对应的命名方法，其规则为：</p>\n<ul>\n<li>忽略连接符前的 gulp，直接写插件名称，如：<code>gulp-concat</code> 插件对应的引入方法为 <code>$.concat</code></li>\n<li>如果有多个连接符，则采用驼峰命名，如：<code>gulp-clean-css</code> 插件对应的引入方法为 <code>$.cleanCss</code></li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<blockquote>\n<p>Gulp学习版本为3.9.1</p>\n</blockquote>\n<h1 id=\"1-Gulp特点\"><a href=\"#1-Gulp特点\" class=\"headerlink\" title=\"1. Gulp特点\"></a>1. Gulp特点</h1><ul>\n<li>任务化</li>\n<li>基于流<ul>\n<li>输入流</li>\n<li>输出流</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-API\"><a href=\"#2-API\" class=\"headerlink\" title=\"2. API\"></a>2. API</h1><ul>\n<li><code>gulp.src(globs[, options])</code> 输入文件：输入流</li>\n<li><code>gulp.dest(path[, options])</code> 输出文件：输出流</li>\n<li><code>gulp.task(name[, deps], fn)</code> 任务化</li>\n<li><code>gulp.watch(glob[, opts], tasks)</code> 监视</li>\n</ul>\n<h1 id=\"3-目录结构\"><a href=\"#3-目录结构\" class=\"headerlink\" title=\"3. 目录结构\"></a>3. 目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- dist</span><br><span class=\"line\">|- src</span><br><span class=\"line\">    |- js</span><br><span class=\"line\">    |- css</span><br><span class=\"line\">    |- less</span><br><span class=\"line\">|- index.html</span><br><span class=\"line\">|- gulpfile.js</span><br><span class=\"line\">|- package.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;gulp_study&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-安装gulp\"><a href=\"#4-安装gulp\" class=\"headerlink\" title=\"4. 安装gulp\"></a>4. 安装gulp</h1><ul>\n<li>全局安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>局部安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -S</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置编码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'任务名'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置任务的操作</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [])</span><br></pre></td></tr></table></figure>\n\n<p>之后我们可以使用 <code>gulp 任务名</code> 来执行某个特定的任务，或者使用 <code>gulp</code> 来执行默认的任务序列<strong>（gulp4 已弃用）</strong></p>\n<h1 id=\"5-常用的gulp插件\"><a href=\"#5-常用的gulp插件\" class=\"headerlink\" title=\"5. 常用的gulp插件\"></a>5. 常用的gulp插件</h1><ul>\n<li><p>sass的编译（<code>gulp-sass</code>）</p>\n</li>\n<li><p>less编译 （<code>gulp-less</code>）</p>\n</li>\n<li><p>重命名（为压缩的文件加’.min’）（<code>gulp-rename</code>）</p>\n</li>\n<li><p>自动添加css前缀（<code>gulp-autoprefixer</code>）</p>\n</li>\n<li><p>压缩css（<code>gulp-minify-css</code>）</p>\n</li>\n<li><p>js代码校验（<code>gulp-jshint</code>）</p>\n</li>\n<li><p>合并js/css文件（<code>gulp-concat</code>）</p>\n</li>\n<li><p>压缩js代码（<code>gulp-uglify</code>）</p>\n</li>\n<li><p>压缩图片（<code>gulp-imagemin</code>）</p>\n</li>\n<li><p>自动刷新页面（<code>gulp-livereload</code>，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）</p>\n</li>\n<li><p>图片缓存，只有图片替换了才压缩（<code>gulp-cache</code>）</p>\n</li>\n<li><p>更改提醒（<code>gulp-notify</code>）</p>\n</li>\n</ul>\n<h1 id=\"6-合并压缩js任务\"><a href=\"#6-合并压缩js任务\" class=\"headerlink\" title=\"6. 合并压缩js任务\"></a>6. 合并压缩js任务</h1><h2 id=\"6-1-配置任务\"><a href=\"#6-1-配置任务\" class=\"headerlink\" title=\"6.1 配置任务\"></a>6.1 配置任务</h2><p>我们在 <code>src/js</code> 文件夹中创建两个js文件，分别对应了两个方法，我们想要将这两个js文件合并为一个文件，需要在 <code>gulpfile.js</code> 文件中定义任务流：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 深度遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// return gulp.src('src/js/**/*.js') </span></span><br><span class=\"line\">    <span class=\"comment\">// 浅度遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>) <span class=\"comment\">// 找到目标文件，将数据读取到gulp的内存中</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-下载和使用插件\"><a href=\"#6-2-下载和使用插件\" class=\"headerlink\" title=\"6.2 下载和使用插件\"></a>6.2 下载和使用插件</h2><ol>\n<li>安装插件</li>\n</ol>\n<p>当gulp读取文件到内存中后，会进行一系列操作，这些操作会用到gulp插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入插件</li>\n</ol>\n<p>引入插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>注册任务</li>\n</ol>\n<p>在引入插件之后我们便可以执行链式调用来配置任务了，每一个操作用 <code>pipe</code> 方法来进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'build.js'</span>)) <span class=\"comment\">// 临时合并文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>)) <span class=\"comment\">// 临时输出文件到本地</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;)) <span class=\"comment\">// 重命名</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-3-执行任务\"><a href=\"#6-3-执行任务\" class=\"headerlink\" title=\"6.3 执行任务\"></a>6.3 执行任务</h2><p>调用已注册的任务，我们可以得到一个已经合并的文件 <code>build.js</code> 和一个合并并压缩的文件 <code>build.min.js</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>gulp会自动忽略为调用的函数方法</p>\n</blockquote>\n<h1 id=\"7-合并压缩css任务\"><a href=\"#7-合并压缩css任务\" class=\"headerlink\" title=\"7. 合并压缩css任务\"></a>7. 合并压缩css任务</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-less gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入和使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssClean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册转换less的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/less/*.less'</span>)</span><br><span class=\"line\">        .pipe(less()) <span class=\"comment\">// 编译less文件为css文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>)) <span class=\"comment\">// 将less编译为css文件后存放到css文件夹中，等待后续统一合并</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并压缩css文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'build.css'</span>))</span><br><span class=\"line\">        .pipe(rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;))</span><br><span class=\"line\">        .pipe(cssClean(&#123; <span class=\"attr\">compatibility</span>: <span class=\"string\">'ie8'</span> &#125;)) <span class=\"comment\">// 压缩、设置兼容到ie8</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css/'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gulp less</span><br><span class=\"line\">[15:18:39] Using gulpfile D:\\<span class=\"built_in\">test</span>\\gulp_study\\gulpfile.js</span><br><span class=\"line\">[15:18:39] Starting <span class=\"string\">'less'</span>...</span><br><span class=\"line\">[15:18:39] Finished <span class=\"string\">'less'</span> after 43 ms</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; gulp css</span><br><span class=\"line\">[15:18:46] Using gulpfile D:\\<span class=\"built_in\">test</span>\\gulp_study\\gulpfile.js</span><br><span class=\"line\">[15:18:46] Starting <span class=\"string\">'css'</span>...</span><br><span class=\"line\">[15:18:46] Finished <span class=\"string\">'css'</span> after 48 ms</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"8-线性执行任务\"><a href=\"#8-线性执行任务\" class=\"headerlink\" title=\"8. 线性执行任务\"></a>8. 线性执行任务</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'js'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'css'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>在用这种方式时，gulp的每个编译任务是移异步进行的，如果将编写任务中的 <code>return</code> 去掉，则编译过程是同步进行的，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   return gulp.src('src/js/*.js')</span></span><br><span class=\"line\"><span class=\"addition\">+   gulp.src('src/js/*.js')</span></span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是我们不推荐这么做（占内存，速度慢）</p>\n</blockquote>\n<p>当我们需要逐个执行任务的时候，可以在设置任务的第二个参数位置，去设置它的依赖任务，如我们如果需要设置先执行 <code>less</code> 任务，再执行 <code>css</code> 任务，那么 <code>css</code> 任务的依赖任务就是 <code>less</code> 任务，我们可以进行如下设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, [<span class=\"string\">'less'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h1 id=\"9-html压缩\"><a href=\"#9-html压缩\" class=\"headerlink\" title=\"9. html压缩\"></a>9. html压缩</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-html --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入和使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// glupfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlMin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-html'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册压缩html的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\">    .pipe(htmlMin(&#123; <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span> &#125;)) <span class=\"comment\">// 压缩html</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>)) <span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp html</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意路径问题，压缩输出的 html 换到了另外的一个路径下，这个所以导出 html 前，必须将路径配置到 <code>dist</code> 目录下。</p>\n</blockquote>\n<h1 id=\"10-半自动进行项目构建\"><a href=\"#10-半自动进行项目构建\" class=\"headerlink\" title=\"10. 半自动进行项目构建\"></a>10. 半自动进行项目构建</h1><ol>\n<li>下载插件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置编码</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监视任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开启监听</span></span><br><span class=\"line\">  livereload.listen();</span><br><span class=\"line\">  <span class=\"comment\">// 确认监听的目标以及绑定相应的任务</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">  gulp.watch([<span class=\"string\">'src/css/*.css'</span>, <span class=\"string\">'src/less/*.less'</span>], [<span class=\"string\">'css'</span>])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在设置完监听任务后，需要在监听的任务中再额外增加一个 <code>pipe(livereload())</code> 方法，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\">    return gulp.src('src/js/*.js')</span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\"><span class=\"addition\">+     .pipe(livereload())</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp watch</span><br></pre></td></tr></table></figure>\n\n<p>之后当我们编辑监听中的代码时，就可以自动打包编译，之后再<strong>手动刷新</strong>浏览器后就可以浏览效果，如果想要<strong>自动刷新</strong>看下一节全自动构建项目。</p>\n<h1 id=\"11-全自动构建项目\"><a href=\"#11-全自动构建项目\" class=\"headerlink\" title=\"11. 全自动构建项目\"></a>11. 全自动构建项目</h1><ol>\n<li>安装插件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-connect --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入并使用插件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"comment\">// 注册监视任务（全自动）</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置服务器选项</span></span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    root: <span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    livereload: <span class=\"literal\">true</span>, <span class=\"comment\">// 实时刷新</span></span><br><span class=\"line\">    port: <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 确认监听的目标以及绑定相应的任务</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">  gulp.watch([<span class=\"string\">'src/css/*.css'</span>, <span class=\"string\">'src/less/*.less'</span>], [<span class=\"string\">'css'</span>])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>相似的，在设置完全自动监听的任务后，需要在监听的任务中再额外增加一个 <code>.pipe(connect.reload())</code> 方法，如：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  gulp.task('js', function () &#123;</span><br><span class=\"line\">    return gulp.src('src/js/*.js')</span><br><span class=\"line\">      .pipe(concat('build.js')) // 临时合并文件</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/')) // 临时输出文件到本地</span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      .pipe(rename(&#123; suffix: '.min' &#125;)) // 重命名</span><br><span class=\"line\">      .pipe(gulp.dest('dist/js/'))</span><br><span class=\"line\"><span class=\"addition\">+     .pipe(connect.reload())</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行任务</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-扩展\"><a href=\"#12-扩展\" class=\"headerlink\" title=\"12. 扩展\"></a>12. 扩展</h2><h3 id=\"12-1-使用-open-模块自动打开浏览器\"><a href=\"#12-1-使用-open-模块自动打开浏览器\" class=\"headerlink\" title=\"12.1 使用 open 模块自动打开浏览器\"></a>12.1 使用 open 模块自动打开浏览器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install open --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulpfile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> open = <span class=\"built_in\">require</span>(<span class=\"string\">'open'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">... ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册监视任务（全自动）</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, [<span class=\"string\">'default'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  open(<span class=\"string\">'http://localhost:5000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-2-使用-gulp-load-plugins-插件\"><a href=\"#12-2-使用-gulp-load-plugins-插件\" class=\"headerlink\" title=\"12.2 使用 gulp-load-plugins 插件\"></a>12.2 使用 gulp-load-plugins 插件</h2><ol>\n<li>下载：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install gulp-load-plugins --save-dev</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>引入：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>之后我们便可以直接使用 <code>$</code> 对象来调用所有的插件方法：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// var concat = require('gulp-concat')</span></span><br><span class=\"line\"><span class=\"comment\">// var uglify = require('gulp-uglify')</span></span><br><span class=\"line\"><span class=\"comment\">// var rename = require('gulp-rename')</span></span><br><span class=\"line\"><span class=\"comment\">// var less = require('gulp-less')</span></span><br><span class=\"line\"><span class=\"comment\">// var cssClean = require('gulp-clean-css')</span></span><br><span class=\"line\"><span class=\"comment\">// var htmlMin = require('gulp-htmlmin')</span></span><br><span class=\"line\"><span class=\"comment\">// var livereload = require('gulp-livereload')</span></span><br><span class=\"line\"><span class=\"comment\">// var connect = require('gulp-connect')</span></span><br><span class=\"line\"><span class=\"comment\">// var open = require('open')</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-load-plugins'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册压缩html的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">    .pipe($.concat(<span class=\"string\">'build.js'</span>)) <span class=\"comment\">// 临时合并文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>)) <span class=\"comment\">// 临时输出文件到本地</span></span><br><span class=\"line\">    .pipe($.uglify())</span><br><span class=\"line\">    .pipe($.rename(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span> &#125;)) <span class=\"comment\">// 重命名</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js/'</span>))</span><br><span class=\"line\">    .pipe($.livereload())</span><br><span class=\"line\">    .pipe($.connect.reload())</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>命名规则：</li>\n</ol>\n<p>使用 <code>$</code> 对象引入的 gulp 插件必须有其对应的命名方法，其规则为：</p>\n<ul>\n<li>忽略连接符前的 gulp，直接写插件名称，如：<code>gulp-concat</code> 插件对应的引入方法为 <code>$.concat</code></li>\n<li>如果有多个连接符，则采用驼峰命名，如：<code>gulp-clean-css</code> 插件对应的引入方法为 <code>$.cleanCss</code></li>\n</ul>\n"},{"title":"MongoDB快速使用指南","date":"2019-06-04T14:13:04.000Z","_content":"# 1. 基本概念\n\n## 知识点\n\nMongoDB有以下几个重要概念，分别对应关系型数据库中的概念模型：\n\n* 数据库（Database） - 数据库（Database）\n* 集合（Collection）- 数据表（Table）\n* 文档（Document）- 记录（Record）\n\n## 数据库使用步骤\n\n1. 建立数据库(KomaBlog)\n2. 建立数据集合(Posts，categories，Tags)\n3. 建立数据(Post:{\"_id\"：\"\"，\"title\"：\"\"})\n\n> 每一个文档（记录）的字段可以不同\n\n* KomaBlog\n  * Posts\n    * {\"_id\": \"1\", \"title\": \"我的第一篇博客\"}\n    * {\"_id\": \"2\", \"title\": \"我的第二篇博客\"}\n    * {\"_id\": \"3\", \"title\": \"我的第三篇博客\",\"delflg\"：1}\n  * Categories\n    * {\"_id\"：“1\"，\"title\"：“游戏\"}\n    * {\"_id\"：\"2\"，\"title\"：\"技术\"}\n  * Tags\n    * {\"_id\"：\"1\"，\"title\"：\"光荣系列\"}\n    * {\"_id\"：“2\"，“title\"：“任天堂系列“}\n    * {\"_id\"：\"3\"，“title\"：\"Ubuntu\"}\n\n## NoSql\n\n在NoSql的数据库中，操作数据都是通过指令或程序语言完成的，比如在MongoDB中使用过Javascript和JSON数据结构，来操作和管理数据的。\n\n\n\n# 2. 简简单单NoSql\n\n## 知识点\n\n* mongo命令行工具\n* 建立删除数据库\n\n## 实战演习\n\n~~~bash\n$ mongo\n> help\n> exit\n$ mongo\n> show dbs;\n> use komablog;\n> show collections;\n> db.createCollection(\"posts\");\n> db.createCollection(\"categories\");\n> db.createCollection(\"tags\");\n> show collections;\n> show dbs;\n> db.stats();\n> db.dropDatabase();\n> show dbs;\n~~~\n\n\n\n# 3. 操作集合（Collection）\n\n## 知识点\n\n* MongoDB数据集合的操作\n\n## 实战演习\n\n~~~bash\n$ mongo\n> show dbs;\n> use komablog;\n> show collections;\n> db.createCollection(\"users\");\n> show collections;\n> db.users.renameCollection(\"staff\"); // users -> staff\n> show collections;\n> db.staff.drop();\n> show collections;\n> db.dropDatabase();\n> show dbs;\n~~~\n\n\n\n\n# 4. 操作文档（Document）\n\n## 知识点\n\n* MongoDB数据文档的操作\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> show collections;\n> db.createCollection(\"posts\");\n> db.posts.insert(\n... {\n...     title: \"我的第一篇博客\",\n...     content: \"已经开始写博客了，太激动了。\"\n... }\n... );\n> show collections;\n> db.posts.find();\n> db.posts.insert(\n... {\n...     title: \"我的第二篇博客\",\n...     content: \"写点什么好呢？\",\n...     tag: [\"未分类\"]\n... }\n... );\n> db.posts.find();\n> for(var i = 3; i <=10; i++ ) {\n...     db.posts.insert({\n...         title: \"我的第\" + i + \"篇博客\"\n...     });\n... }\n> db.posts.find();\n> db.posts.count();\n> db.posts.remove({}); // 大括号内的是数据字段的匹配条件，如果留空会删除所有的数据\n> db.posts.count();\n> db.posts.find();\n~~~\n\n\n\n\n# 5. 带条件的文档\n\n## 知识点\n\n* db.[collection_name].find({\"\":\"\"})\n* $gte (>=) , $gt (>) , $lte (<=) , $lt (<)\n* $eq (=) , $ne (!=)\n* 正则表达式:/k/, /^k/\n* db.[collection_name].distinct(\"field_name\");\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.remove({});\n> db.posts.insert({title:\"怪物猎人世界评测\",\"rank\":2,\"tag\":\"game\"});\n> db.posts.insert({title:\"纸片马里奥试玩体验\",\"rank\":1,\"tag\":\"game\"});\n> db.posts.insert({title:\"Utunbu16LTS的安装\",\"rank\":3,\"tag\":\"it\"});\n> db.posts.insert({title:\"信长之野望大志销量突破10000\",\"rank\":4,\"tag\":\"game\"});\n> db.posts.insert({title:\"Ruby的开发效率真的很高吗\",\"rank\":7,\"tag\":\"it\"});\n> db.posts.insert({title:\"塞尔达传说最近出了DLC\",\"rank\":4,\"tag\":\"game\"});\n> db.posts.find({\"tag\": \"game\"});\n> db.posts.find({\"rank\": {$gte: 4}});\n> db.posts.find({\"rank\": {$gt: 4}});\n> db.posts.find({\"rank\": {$lte: 4}});\n> db.posts.find({\"rank\": {$lt: 4}});\n> db.posts.find({\"title\": /u/});\n> db.posts.find({\"title\": /^R/});\n> db.posts.find({\"title\": /^U/});\n> db.posts.distinct(\"tag\");\n~~~\n\n\n\n# 6. 复杂条件抽文档\n\n## 知识点\n\n* 且查询：db.[collection_name].find({ \"\": \"\", \"\": \"\" })\n* 或查询：db.[collection_name].find({ $or: [{...},{...}] });\n* 某一字段存在多个可能数据：db.[collection_name].find({ \"\": {$in: [...]} });\n* 获取是否存在某一字段的数据：db.[collection_name].find({ \"\": {$exists: true} });\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({ \"title\": /u/, \"rank\":{$gte:5} });\n> db.posts.find({ $or: [{\"title\": /u/}, {\"rank\":{$gte:4}}] });\n> db.posts.find({ \"rank\": {$in: [3,4]} });\n> db.posts.insert({ \"title\":\"惊！骑士发生重大交易\", \"istop\": true });\n> db.posts.find({ \"istop\": {$exists: true} });\n~~~\n\n\n\n# 7. 指定抽出字段\n\n## 知识点\n\n* db.[collection_name].find({}, {field1: true, field2: 1})\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({}, {title:true, rank:1});\n> db.posts.find({}, {title:true, rank:1, _id:0});\n~~~\n\n\n\n# 8. 文档的方法\n\n## 知识点\n\n* 排序：sort()\n  * `sort({rank:1})` 进行升序排序\n  * `sort({rank:-1})` 进行降序排序\n* 限制：limit([Number])\n  * 抽取查询结果的前[Number]条数据\n  * 使用 `findOne()` 代替 `find()` 可以查询首条记录\n* 跳过：skip([Number])\n  * 跳过前[Number]条数据\n  * 与 `limit()` 配合使用可以实现分页\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({}, {_id:0}).sort({rank:1});\n> db.posts.find({}, {_id:0}).sort({rank:-1});\n> db.posts.find({}, {_id:0}).limit(3);\n> db.posts.find({}, {_id:0}).sort({rank:-1}).limit(3);\n> db.posts.findOne({}, {_id:0});\n> db.posts.find({}, {_id:0});\n> db.posts.find({}, {_id:0}).limit(3);\n> db.posts.find({}, {_id:0}).skip(3).limit(3);\n~~~\n\n\n\n\n\n# 9. 文档更新（update）\n\n## 知识点\n\n* update(\\<filter\\>, \\<update\\>, \\<options\\>)\n  * 使用 `$set` 来设置新值。\n  * 如果过滤出多条数据后使用 `$set` 设置新值，在Mongodb中会只更新过滤出的第一条选项。使用设置选项 `multi: true` 可以更新过滤出的所有数据。·\n  * 如果不使用 `$set` 在 `<update>` 中直接填写一个JSON格式的数据字段，那么Mongodb会删除原来文档的所有数据，将文档更新为新传入的数据。\n\n### 命令参考网页\n\nhttps://docs.mongodb.com/manual/reference/method/db.collection.update\n\n## 实战演习\n\n> 更新数据的key值必须用 `\"\"` 包裹\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.findOne({\"title\":\"怪物猎人世界评测\"});\n> db.posts.update({\"title\":\"怪物猎人世界评测\"}, {$set: {\"rank\": 10} });\n> db.posts.find();\n> db.posts.update({\"title\":\"怪物猎人世界评测\"}, {\"rank\": 99});\n> db.posts.find();\n> db.posts.update({\"tag\":\"it\"}, {$set: {\"rank\": 50}});\n> db.posts.find();\n> db.posts.update({\"tag\":\"it\"}, {$set: {\"rank\": 60}}, {multi: true});\n> db.posts.find();\n~~~\n\n\n\n# 10. 玩几个特殊函数\n\n今天为您讲几个操作文档字段的函数。\n\n> 只要开头为 `$` 的都是特殊函数\n\n## 知识点\n\n* $inc: 递加\n* $mul: 相乘\n* $rename: 修改字段名\n* $set: 新增or修改字段\n* $unset: 字段删除\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$inc: {rank: 1}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$mul: {rank: 2}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$rename: {\"rank\": \"score\"}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$set: {\"istop\": true}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$unset: {\"istop\": true}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n~~~\n\n\n\n## 11. 文档的特殊更新\n\n## 知识点\n\n* upsert:有则更新，无则追加\n  * 配置选项\n* remove:条件删除数据\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":5,\"tag\":\"game\"});\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":5,\"tag\":\"game\"}, {upsert:true});\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":7,\"tag\":\"game\"}, {upsert:true});\n> db.posts.find({}, {_id:0});\n> db.posts.remove({title:\"其实创造比大志好玩\"});\n> db.posts.find({}, {_id:0});\n~~~\n\n\n# 12. 使用索引\n\n## 知识点\n\n* 获取索引：getIndexes()\n* 创建索引：createIndex({...}, {...})\n  * 第一个参数填写索字段名，其value为 `1` 或 `-1` 代表该索引按照升序或者降序排序\n  * 第二个参数为可选项，填写 `{unique: ture}` 可以将该索引设置为unique索引\n* 删除索引：dropIndex({...})\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.getIndexes();\n> db.posts.createIndex({rank:-1});\n> db.posts.getIndexes();\n> db.posts.dropIndex({rank:-1});\n> db.posts.getIndexes();\n> db.posts.createIndex({title:1}, {unique:true});\n> db.posts.getIndexes();\n> db.posts.find({}, {_id:0});\n> db.posts.insert({title:\"怪物猎人世界评测\"});\n~~~\n\n\n\n# 13. 备份和恢复\n\n## 知识点\n\n> `mongodump` 和 `mongorestore` 都是系统指令\n\n* 备份：mongodump\n* 恢复：mongorestore\n\n## 实战演习\n\n~~~bash\n$ mongo\n> show dbs;\n> use komablog;\n> db.posts.find({}, {_id:0});\n> exit\n$ mkdir dbbak\n$ cd dbbak\n$ mongodump -d komablog\n$ ls\n$ mongo komablog\n> db.posts.find({}, {_id:0});\n> db.posts.remove({});\n> db.posts.find({}, {_id:0});\n> exit\n$ mongorestore --drop\n$ mongo komablog\n> db.posts.find({}, {_id:0});\n> exit\n$ mongodump --help\n~~~\n\n\n# 14. 来源声明\n\n## 课程文件\n\nhttps://gitee.com/komavideo/LearnMongoDB\n\n## 小马视频频道\n\nhttp://komavideo.com","source":"_posts/2019/MongoDB快速入门指南.md","raw":"---\ntitle: MongoDB快速使用指南\ntags: [Mongodb]\ncategories:\n  - Front\n  - Mongodb\ndate: 2019-06-04 22:13:04\n---\n# 1. 基本概念\n\n## 知识点\n\nMongoDB有以下几个重要概念，分别对应关系型数据库中的概念模型：\n\n* 数据库（Database） - 数据库（Database）\n* 集合（Collection）- 数据表（Table）\n* 文档（Document）- 记录（Record）\n\n## 数据库使用步骤\n\n1. 建立数据库(KomaBlog)\n2. 建立数据集合(Posts，categories，Tags)\n3. 建立数据(Post:{\"_id\"：\"\"，\"title\"：\"\"})\n\n> 每一个文档（记录）的字段可以不同\n\n* KomaBlog\n  * Posts\n    * {\"_id\": \"1\", \"title\": \"我的第一篇博客\"}\n    * {\"_id\": \"2\", \"title\": \"我的第二篇博客\"}\n    * {\"_id\": \"3\", \"title\": \"我的第三篇博客\",\"delflg\"：1}\n  * Categories\n    * {\"_id\"：“1\"，\"title\"：“游戏\"}\n    * {\"_id\"：\"2\"，\"title\"：\"技术\"}\n  * Tags\n    * {\"_id\"：\"1\"，\"title\"：\"光荣系列\"}\n    * {\"_id\"：“2\"，“title\"：“任天堂系列“}\n    * {\"_id\"：\"3\"，“title\"：\"Ubuntu\"}\n\n## NoSql\n\n在NoSql的数据库中，操作数据都是通过指令或程序语言完成的，比如在MongoDB中使用过Javascript和JSON数据结构，来操作和管理数据的。\n\n\n\n# 2. 简简单单NoSql\n\n## 知识点\n\n* mongo命令行工具\n* 建立删除数据库\n\n## 实战演习\n\n~~~bash\n$ mongo\n> help\n> exit\n$ mongo\n> show dbs;\n> use komablog;\n> show collections;\n> db.createCollection(\"posts\");\n> db.createCollection(\"categories\");\n> db.createCollection(\"tags\");\n> show collections;\n> show dbs;\n> db.stats();\n> db.dropDatabase();\n> show dbs;\n~~~\n\n\n\n# 3. 操作集合（Collection）\n\n## 知识点\n\n* MongoDB数据集合的操作\n\n## 实战演习\n\n~~~bash\n$ mongo\n> show dbs;\n> use komablog;\n> show collections;\n> db.createCollection(\"users\");\n> show collections;\n> db.users.renameCollection(\"staff\"); // users -> staff\n> show collections;\n> db.staff.drop();\n> show collections;\n> db.dropDatabase();\n> show dbs;\n~~~\n\n\n\n\n# 4. 操作文档（Document）\n\n## 知识点\n\n* MongoDB数据文档的操作\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> show collections;\n> db.createCollection(\"posts\");\n> db.posts.insert(\n... {\n...     title: \"我的第一篇博客\",\n...     content: \"已经开始写博客了，太激动了。\"\n... }\n... );\n> show collections;\n> db.posts.find();\n> db.posts.insert(\n... {\n...     title: \"我的第二篇博客\",\n...     content: \"写点什么好呢？\",\n...     tag: [\"未分类\"]\n... }\n... );\n> db.posts.find();\n> for(var i = 3; i <=10; i++ ) {\n...     db.posts.insert({\n...         title: \"我的第\" + i + \"篇博客\"\n...     });\n... }\n> db.posts.find();\n> db.posts.count();\n> db.posts.remove({}); // 大括号内的是数据字段的匹配条件，如果留空会删除所有的数据\n> db.posts.count();\n> db.posts.find();\n~~~\n\n\n\n\n# 5. 带条件的文档\n\n## 知识点\n\n* db.[collection_name].find({\"\":\"\"})\n* $gte (>=) , $gt (>) , $lte (<=) , $lt (<)\n* $eq (=) , $ne (!=)\n* 正则表达式:/k/, /^k/\n* db.[collection_name].distinct(\"field_name\");\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.remove({});\n> db.posts.insert({title:\"怪物猎人世界评测\",\"rank\":2,\"tag\":\"game\"});\n> db.posts.insert({title:\"纸片马里奥试玩体验\",\"rank\":1,\"tag\":\"game\"});\n> db.posts.insert({title:\"Utunbu16LTS的安装\",\"rank\":3,\"tag\":\"it\"});\n> db.posts.insert({title:\"信长之野望大志销量突破10000\",\"rank\":4,\"tag\":\"game\"});\n> db.posts.insert({title:\"Ruby的开发效率真的很高吗\",\"rank\":7,\"tag\":\"it\"});\n> db.posts.insert({title:\"塞尔达传说最近出了DLC\",\"rank\":4,\"tag\":\"game\"});\n> db.posts.find({\"tag\": \"game\"});\n> db.posts.find({\"rank\": {$gte: 4}});\n> db.posts.find({\"rank\": {$gt: 4}});\n> db.posts.find({\"rank\": {$lte: 4}});\n> db.posts.find({\"rank\": {$lt: 4}});\n> db.posts.find({\"title\": /u/});\n> db.posts.find({\"title\": /^R/});\n> db.posts.find({\"title\": /^U/});\n> db.posts.distinct(\"tag\");\n~~~\n\n\n\n# 6. 复杂条件抽文档\n\n## 知识点\n\n* 且查询：db.[collection_name].find({ \"\": \"\", \"\": \"\" })\n* 或查询：db.[collection_name].find({ $or: [{...},{...}] });\n* 某一字段存在多个可能数据：db.[collection_name].find({ \"\": {$in: [...]} });\n* 获取是否存在某一字段的数据：db.[collection_name].find({ \"\": {$exists: true} });\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({ \"title\": /u/, \"rank\":{$gte:5} });\n> db.posts.find({ $or: [{\"title\": /u/}, {\"rank\":{$gte:4}}] });\n> db.posts.find({ \"rank\": {$in: [3,4]} });\n> db.posts.insert({ \"title\":\"惊！骑士发生重大交易\", \"istop\": true });\n> db.posts.find({ \"istop\": {$exists: true} });\n~~~\n\n\n\n# 7. 指定抽出字段\n\n## 知识点\n\n* db.[collection_name].find({}, {field1: true, field2: 1})\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({}, {title:true, rank:1});\n> db.posts.find({}, {title:true, rank:1, _id:0});\n~~~\n\n\n\n# 8. 文档的方法\n\n## 知识点\n\n* 排序：sort()\n  * `sort({rank:1})` 进行升序排序\n  * `sort({rank:-1})` 进行降序排序\n* 限制：limit([Number])\n  * 抽取查询结果的前[Number]条数据\n  * 使用 `findOne()` 代替 `find()` 可以查询首条记录\n* 跳过：skip([Number])\n  * 跳过前[Number]条数据\n  * 与 `limit()` 配合使用可以实现分页\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find();\n> db.posts.find({}, {_id:0}).sort({rank:1});\n> db.posts.find({}, {_id:0}).sort({rank:-1});\n> db.posts.find({}, {_id:0}).limit(3);\n> db.posts.find({}, {_id:0}).sort({rank:-1}).limit(3);\n> db.posts.findOne({}, {_id:0});\n> db.posts.find({}, {_id:0});\n> db.posts.find({}, {_id:0}).limit(3);\n> db.posts.find({}, {_id:0}).skip(3).limit(3);\n~~~\n\n\n\n\n\n# 9. 文档更新（update）\n\n## 知识点\n\n* update(\\<filter\\>, \\<update\\>, \\<options\\>)\n  * 使用 `$set` 来设置新值。\n  * 如果过滤出多条数据后使用 `$set` 设置新值，在Mongodb中会只更新过滤出的第一条选项。使用设置选项 `multi: true` 可以更新过滤出的所有数据。·\n  * 如果不使用 `$set` 在 `<update>` 中直接填写一个JSON格式的数据字段，那么Mongodb会删除原来文档的所有数据，将文档更新为新传入的数据。\n\n### 命令参考网页\n\nhttps://docs.mongodb.com/manual/reference/method/db.collection.update\n\n## 实战演习\n\n> 更新数据的key值必须用 `\"\"` 包裹\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.findOne({\"title\":\"怪物猎人世界评测\"});\n> db.posts.update({\"title\":\"怪物猎人世界评测\"}, {$set: {\"rank\": 10} });\n> db.posts.find();\n> db.posts.update({\"title\":\"怪物猎人世界评测\"}, {\"rank\": 99});\n> db.posts.find();\n> db.posts.update({\"tag\":\"it\"}, {$set: {\"rank\": 50}});\n> db.posts.find();\n> db.posts.update({\"tag\":\"it\"}, {$set: {\"rank\": 60}}, {multi: true});\n> db.posts.find();\n~~~\n\n\n\n# 10. 玩几个特殊函数\n\n今天为您讲几个操作文档字段的函数。\n\n> 只要开头为 `$` 的都是特殊函数\n\n## 知识点\n\n* $inc: 递加\n* $mul: 相乘\n* $rename: 修改字段名\n* $set: 新增or修改字段\n* $unset: 字段删除\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$inc: {rank: 1}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$mul: {rank: 2}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$rename: {\"rank\": \"score\"}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$set: {\"istop\": true}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n> db.posts.update({title:\"怪物猎人世界评测\"}, {$unset: {\"istop\": true}});\n> db.posts.find({title:\"怪物猎人世界评测\"}, {_id:0});\n~~~\n\n\n\n## 11. 文档的特殊更新\n\n## 知识点\n\n* upsert:有则更新，无则追加\n  * 配置选项\n* remove:条件删除数据\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":5,\"tag\":\"game\"});\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":5,\"tag\":\"game\"}, {upsert:true});\n> db.posts.find({}, {_id:0});\n> db.posts.update({title:\"其实创造比大志好玩\"}, {title:\"其实创造比大志好玩\", \"rank\":7,\"tag\":\"game\"}, {upsert:true});\n> db.posts.find({}, {_id:0});\n> db.posts.remove({title:\"其实创造比大志好玩\"});\n> db.posts.find({}, {_id:0});\n~~~\n\n\n# 12. 使用索引\n\n## 知识点\n\n* 获取索引：getIndexes()\n* 创建索引：createIndex({...}, {...})\n  * 第一个参数填写索字段名，其value为 `1` 或 `-1` 代表该索引按照升序或者降序排序\n  * 第二个参数为可选项，填写 `{unique: ture}` 可以将该索引设置为unique索引\n* 删除索引：dropIndex({...})\n\n## 实战演习\n\n~~~bash\n$ mongo\n> use komablog;\n> db.posts.getIndexes();\n> db.posts.createIndex({rank:-1});\n> db.posts.getIndexes();\n> db.posts.dropIndex({rank:-1});\n> db.posts.getIndexes();\n> db.posts.createIndex({title:1}, {unique:true});\n> db.posts.getIndexes();\n> db.posts.find({}, {_id:0});\n> db.posts.insert({title:\"怪物猎人世界评测\"});\n~~~\n\n\n\n# 13. 备份和恢复\n\n## 知识点\n\n> `mongodump` 和 `mongorestore` 都是系统指令\n\n* 备份：mongodump\n* 恢复：mongorestore\n\n## 实战演习\n\n~~~bash\n$ mongo\n> show dbs;\n> use komablog;\n> db.posts.find({}, {_id:0});\n> exit\n$ mkdir dbbak\n$ cd dbbak\n$ mongodump -d komablog\n$ ls\n$ mongo komablog\n> db.posts.find({}, {_id:0});\n> db.posts.remove({});\n> db.posts.find({}, {_id:0});\n> exit\n$ mongorestore --drop\n$ mongo komablog\n> db.posts.find({}, {_id:0});\n> exit\n$ mongodump --help\n~~~\n\n\n# 14. 来源声明\n\n## 课程文件\n\nhttps://gitee.com/komavideo/LearnMongoDB\n\n## 小马视频频道\n\nhttp://komavideo.com","slug":"MongoDB快速入门指南","published":1,"updated":"2019-11-09T14:13:42.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfb003n3w4uhowr53zd","content":"<h1 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h1><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><p>MongoDB有以下几个重要概念，分别对应关系型数据库中的概念模型：</p>\n<ul>\n<li>数据库（Database） - 数据库（Database）</li>\n<li>集合（Collection）- 数据表（Table）</li>\n<li>文档（Document）- 记录（Record）</li>\n</ul>\n<h2 id=\"数据库使用步骤\"><a href=\"#数据库使用步骤\" class=\"headerlink\" title=\"数据库使用步骤\"></a>数据库使用步骤</h2><ol>\n<li>建立数据库(KomaBlog)</li>\n<li>建立数据集合(Posts，categories，Tags)</li>\n<li>建立数据(Post:{“_id”：””，”title”：””})</li>\n</ol>\n<blockquote>\n<p>每一个文档（记录）的字段可以不同</p>\n</blockquote>\n<ul>\n<li>KomaBlog<ul>\n<li>Posts<ul>\n<li>{“_id”: “1”, “title”: “我的第一篇博客”}</li>\n<li>{“_id”: “2”, “title”: “我的第二篇博客”}</li>\n<li>{“_id”: “3”, “title”: “我的第三篇博客”,”delflg”：1}</li>\n</ul>\n</li>\n<li>Categories<ul>\n<li>{“_id”：“1”，”title”：“游戏”}</li>\n<li>{“_id”：”2”，”title”：”技术”}</li>\n</ul>\n</li>\n<li>Tags<ul>\n<li>{“_id”：”1”，”title”：”光荣系列”}</li>\n<li>{“_id”：“2”，“title”：“任天堂系列“}</li>\n<li>{“_id”：”3”，“title”：”Ubuntu”}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NoSql\"><a href=\"#NoSql\" class=\"headerlink\" title=\"NoSql\"></a>NoSql</h2><p>在NoSql的数据库中，操作数据都是通过指令或程序语言完成的，比如在MongoDB中使用过Javascript和JSON数据结构，来操作和管理数据的。</p>\n<h1 id=\"2-简简单单NoSql\"><a href=\"#2-简简单单NoSql\" class=\"headerlink\" title=\"2. 简简单单NoSql\"></a>2. 简简单单NoSql</h1><h2 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>mongo命令行工具</li>\n<li>建立删除数据库</li>\n</ul>\n<h2 id=\"实战演习\"><a href=\"#实战演习\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; <span class=\"built_in\">help</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"posts\"</span>);</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"categories\"</span>);</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"tags\"</span>);</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; db.stats();</span><br><span class=\"line\">&gt; db.dropDatabase();</span><br><span class=\"line\">&gt; show dbs;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"3-操作集合（Collection）\"><a href=\"#3-操作集合（Collection）\" class=\"headerlink\" title=\"3. 操作集合（Collection）\"></a>3. 操作集合（Collection）</h1><h2 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>MongoDB数据集合的操作</li>\n</ul>\n<h2 id=\"实战演习-1\"><a href=\"#实战演习-1\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"users\"</span>);</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.users.renameCollection(<span class=\"string\">\"staff\"</span>); // users -&gt; staff</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.staff.drop();</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.dropDatabase();</span><br><span class=\"line\">&gt; show dbs;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"4-操作文档（Document）\"><a href=\"#4-操作文档（Document）\" class=\"headerlink\" title=\"4. 操作文档（Document）\"></a>4. 操作文档（Document）</h1><h2 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>MongoDB数据文档的操作</li>\n</ul>\n<h2 id=\"实战演习-2\"><a href=\"#实战演习-2\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"posts\"</span>);</span><br><span class=\"line\">&gt; db.posts.insert(</span><br><span class=\"line\">... &#123;</span><br><span class=\"line\">...     title: <span class=\"string\">\"我的第一篇博客\"</span>,</span><br><span class=\"line\">...     content: <span class=\"string\">\"已经开始写博客了，太激动了。\"</span></span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">... );</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.insert(</span><br><span class=\"line\">... &#123;</span><br><span class=\"line\">...     title: <span class=\"string\">\"我的第二篇博客\"</span>,</span><br><span class=\"line\">...     content: <span class=\"string\">\"写点什么好呢？\"</span>,</span><br><span class=\"line\">...     tag: [<span class=\"string\">\"未分类\"</span>]</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">... );</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span>(var i = 3; i &lt;=10; i++ ) &#123;</span><br><span class=\"line\">...     db.posts.insert(&#123;</span><br><span class=\"line\">...         title: <span class=\"string\">\"我的第\"</span> + i + <span class=\"string\">\"篇博客\"</span></span><br><span class=\"line\">...     &#125;);</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.count();</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;); // 大括号内的是数据字段的匹配条件，如果留空会删除所有的数据</span><br><span class=\"line\">&gt; db.posts.count();</span><br><span class=\"line\">&gt; db.posts.find();</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"5-带条件的文档\"><a href=\"#5-带条件的文档\" class=\"headerlink\" title=\"5. 带条件的文档\"></a>5. 带条件的文档</h1><h2 id=\"知识点-4\"><a href=\"#知识点-4\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>db.[collection_name].find({“”:””})</li>\n<li>$gte (&gt;=) , $gt (&gt;) , $lte (&lt;=) , $lt (&lt;)</li>\n<li>$eq (=) , $ne (!=)</li>\n<li>正则表达式:/k/, /^k/</li>\n<li>db.[collection_name].distinct(“field_name”);</li>\n</ul>\n<h2 id=\"实战演习-3\"><a href=\"#实战演习-3\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>,<span class=\"string\">\"rank\"</span>:2,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"纸片马里奥试玩体验\"</span>,<span class=\"string\">\"rank\"</span>:1,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"Utunbu16LTS的安装\"</span>,<span class=\"string\">\"rank\"</span>:3,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"信长之野望大志销量突破10000\"</span>,<span class=\"string\">\"rank\"</span>:4,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"Ruby的开发效率真的很高吗\"</span>,<span class=\"string\">\"rank\"</span>:7,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"塞尔达传说最近出了DLC\"</span>,<span class=\"string\">\"rank\"</span>:4,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"tag\"</span>: <span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$gte</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$gt</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$lte</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$lt</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /u/&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /^R/&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /^U/&#125;);</span><br><span class=\"line\">&gt; db.posts.distinct(<span class=\"string\">\"tag\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"6-复杂条件抽文档\"><a href=\"#6-复杂条件抽文档\" class=\"headerlink\" title=\"6. 复杂条件抽文档\"></a>6. 复杂条件抽文档</h1><h2 id=\"知识点-5\"><a href=\"#知识点-5\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>且查询：db.[collection_name].find({ “”: “”, “”: “” })</li>\n<li>或查询：db.[collection_name].find({ $or: [{…},{…}] });</li>\n<li>某一字段存在多个可能数据：db.[collection_name].find({ “”: {$in: […]} });</li>\n<li>获取是否存在某一字段的数据：db.[collection_name].find({ “”: {$exists: true} });</li>\n</ul>\n<h2 id=\"实战演习-4\"><a href=\"#实战演习-4\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"title\"</span>: /u/, <span class=\"string\">\"rank\"</span>:&#123;<span class=\"variable\">$gte</span>:5&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"variable\">$or</span>: [&#123;<span class=\"string\">\"title\"</span>: /u/&#125;, &#123;<span class=\"string\">\"rank\"</span>:&#123;<span class=\"variable\">$gte</span>:4&#125;&#125;] &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$in</span>: [3,4]&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123; <span class=\"string\">\"title\"</span>:<span class=\"string\">\"惊！骑士发生重大交易\"</span>, <span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"istop\"</span>: &#123;<span class=\"variable\">$exists</span>: <span class=\"literal\">true</span>&#125; &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"7-指定抽出字段\"><a href=\"#7-指定抽出字段\" class=\"headerlink\" title=\"7. 指定抽出字段\"></a>7. 指定抽出字段</h1><h2 id=\"知识点-6\"><a href=\"#知识点-6\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>db.[collection_name].find({}, {field1: true, field2: 1})</li>\n</ul>\n<h2 id=\"实战演习-5\"><a href=\"#实战演习-5\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class=\"literal\">true</span>, rank:1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class=\"literal\">true</span>, rank:1, _id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"8-文档的方法\"><a href=\"#8-文档的方法\" class=\"headerlink\" title=\"8. 文档的方法\"></a>8. 文档的方法</h1><h2 id=\"知识点-7\"><a href=\"#知识点-7\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>排序：sort()<ul>\n<li><code>sort({rank:1})</code> 进行升序排序</li>\n<li><code>sort({rank:-1})</code> 进行降序排序</li>\n</ul>\n</li>\n<li>限制：limit([Number])<ul>\n<li>抽取查询结果的前[Number]条数据</li>\n<li>使用 <code>findOne()</code> 代替 <code>find()</code> 可以查询首条记录</li>\n</ul>\n</li>\n<li>跳过：skip([Number])<ul>\n<li>跳过前[Number]条数据</li>\n<li>与 <code>limit()</code> 配合使用可以实现分页</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实战演习-6\"><a href=\"#实战演习-6\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:-1&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.findOne(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).skip(3).<span class=\"built_in\">limit</span>(3);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"9-文档更新（update）\"><a href=\"#9-文档更新（update）\" class=\"headerlink\" title=\"9. 文档更新（update）\"></a>9. 文档更新（update）</h1><h2 id=\"知识点-8\"><a href=\"#知识点-8\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>update(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)<ul>\n<li>使用 <code>$set</code> 来设置新值。</li>\n<li>如果过滤出多条数据后使用 <code>$set</code> 设置新值，在Mongodb中会只更新过滤出的第一条选项。使用设置选项 <code>multi: true</code> 可以更新过滤出的所有数据。·</li>\n<li>如果不使用 <code>$set</code> 在 <code>&lt;update&gt;</code> 中直接填写一个JSON格式的数据字段，那么Mongodb会删除原来文档的所有数据，将文档更新为新传入的数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"命令参考网页\"><a href=\"#命令参考网页\" class=\"headerlink\" title=\"命令参考网页\"></a>命令参考网页</h3><p><a href=\"https://docs.mongodb.com/manual/reference/method/db.collection.update\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/method/db.collection.update</a></p>\n<h2 id=\"实战演习-7\"><a href=\"#实战演习-7\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><blockquote>\n<p>更新数据的key值必须用 <code>&quot;&quot;</code> 包裹</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.findOne(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 10&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"string\">\"rank\"</span>: 99&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 50&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 60&#125;&#125;, &#123;multi: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"10-玩几个特殊函数\"><a href=\"#10-玩几个特殊函数\" class=\"headerlink\" title=\"10. 玩几个特殊函数\"></a>10. 玩几个特殊函数</h1><p>今天为您讲几个操作文档字段的函数。</p>\n<blockquote>\n<p>只要开头为 <code>$</code> 的都是特殊函数</p>\n</blockquote>\n<h2 id=\"知识点-9\"><a href=\"#知识点-9\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>$inc: 递加</li>\n<li>$mul: 相乘</li>\n<li>$rename: 修改字段名</li>\n<li>$set: 新增or修改字段</li>\n<li>$unset: 字段删除</li>\n</ul>\n<h2 id=\"实战演习-8\"><a href=\"#实战演习-8\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$inc</span>: &#123;rank: 1&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$mul</span>: &#123;rank: 2&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$rename</span>: &#123;<span class=\"string\">\"rank\"</span>: <span class=\"string\">\"score\"</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$unset</span>: &#123;<span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-文档的特殊更新\"><a href=\"#11-文档的特殊更新\" class=\"headerlink\" title=\"11. 文档的特殊更新\"></a>11. 文档的特殊更新</h2><h2 id=\"知识点-10\"><a href=\"#知识点-10\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>upsert:有则更新，无则追加<ul>\n<li>配置选项</li>\n</ul>\n</li>\n<li>remove:条件删除数据</li>\n</ul>\n<h2 id=\"实战演习-9\"><a href=\"#实战演习-9\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:5,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:5,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;, &#123;upsert:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:7,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;, &#123;upsert:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.remove(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"12-使用索引\"><a href=\"#12-使用索引\" class=\"headerlink\" title=\"12. 使用索引\"></a>12. 使用索引</h1><h2 id=\"知识点-11\"><a href=\"#知识点-11\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>获取索引：getIndexes()</li>\n<li>创建索引：createIndex({…}, {…})<ul>\n<li>第一个参数填写索字段名，其value为 <code>1</code> 或 <code>-1</code> 代表该索引按照升序或者降序排序</li>\n<li>第二个参数为可选项，填写 <code>{unique: ture}</code> 可以将该索引设置为unique索引</li>\n</ul>\n</li>\n<li>删除索引：dropIndex({…})</li>\n</ul>\n<h2 id=\"实战演习-10\"><a href=\"#实战演习-10\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.createIndex(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.dropIndex(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.createIndex(&#123;title:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"13-备份和恢复\"><a href=\"#13-备份和恢复\" class=\"headerlink\" title=\"13. 备份和恢复\"></a>13. 备份和恢复</h1><h2 id=\"知识点-12\"><a href=\"#知识点-12\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><blockquote>\n<p><code>mongodump</code> 和 <code>mongorestore</code> 都是系统指令</p>\n</blockquote>\n<ul>\n<li>备份：mongodump</li>\n<li>恢复：mongorestore</li>\n</ul>\n<h2 id=\"实战演习-11\"><a href=\"#实战演习-11\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mkdir dbbak</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> dbbak</span><br><span class=\"line\">$ mongodump -d komablog</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ mongo komablog</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongorestore --drop</span><br><span class=\"line\">$ mongo komablog</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongodump --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"14-来源声明\"><a href=\"#14-来源声明\" class=\"headerlink\" title=\"14. 来源声明\"></a>14. 来源声明</h1><h2 id=\"课程文件\"><a href=\"#课程文件\" class=\"headerlink\" title=\"课程文件\"></a>课程文件</h2><p><a href=\"https://gitee.com/komavideo/LearnMongoDB\" target=\"_blank\" rel=\"noopener\">https://gitee.com/komavideo/LearnMongoDB</a></p>\n<h2 id=\"小马视频频道\"><a href=\"#小马视频频道\" class=\"headerlink\" title=\"小马视频频道\"></a>小马视频频道</h2><p><a href=\"http://komavideo.com\" target=\"_blank\" rel=\"noopener\">http://komavideo.com</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h1><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><p>MongoDB有以下几个重要概念，分别对应关系型数据库中的概念模型：</p>\n<ul>\n<li>数据库（Database） - 数据库（Database）</li>\n<li>集合（Collection）- 数据表（Table）</li>\n<li>文档（Document）- 记录（Record）</li>\n</ul>\n<h2 id=\"数据库使用步骤\"><a href=\"#数据库使用步骤\" class=\"headerlink\" title=\"数据库使用步骤\"></a>数据库使用步骤</h2><ol>\n<li>建立数据库(KomaBlog)</li>\n<li>建立数据集合(Posts，categories，Tags)</li>\n<li>建立数据(Post:{“_id”：””，”title”：””})</li>\n</ol>\n<blockquote>\n<p>每一个文档（记录）的字段可以不同</p>\n</blockquote>\n<ul>\n<li>KomaBlog<ul>\n<li>Posts<ul>\n<li>{“_id”: “1”, “title”: “我的第一篇博客”}</li>\n<li>{“_id”: “2”, “title”: “我的第二篇博客”}</li>\n<li>{“_id”: “3”, “title”: “我的第三篇博客”,”delflg”：1}</li>\n</ul>\n</li>\n<li>Categories<ul>\n<li>{“_id”：“1”，”title”：“游戏”}</li>\n<li>{“_id”：”2”，”title”：”技术”}</li>\n</ul>\n</li>\n<li>Tags<ul>\n<li>{“_id”：”1”，”title”：”光荣系列”}</li>\n<li>{“_id”：“2”，“title”：“任天堂系列“}</li>\n<li>{“_id”：”3”，“title”：”Ubuntu”}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NoSql\"><a href=\"#NoSql\" class=\"headerlink\" title=\"NoSql\"></a>NoSql</h2><p>在NoSql的数据库中，操作数据都是通过指令或程序语言完成的，比如在MongoDB中使用过Javascript和JSON数据结构，来操作和管理数据的。</p>\n<h1 id=\"2-简简单单NoSql\"><a href=\"#2-简简单单NoSql\" class=\"headerlink\" title=\"2. 简简单单NoSql\"></a>2. 简简单单NoSql</h1><h2 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>mongo命令行工具</li>\n<li>建立删除数据库</li>\n</ul>\n<h2 id=\"实战演习\"><a href=\"#实战演习\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; <span class=\"built_in\">help</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"posts\"</span>);</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"categories\"</span>);</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"tags\"</span>);</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; db.stats();</span><br><span class=\"line\">&gt; db.dropDatabase();</span><br><span class=\"line\">&gt; show dbs;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"3-操作集合（Collection）\"><a href=\"#3-操作集合（Collection）\" class=\"headerlink\" title=\"3. 操作集合（Collection）\"></a>3. 操作集合（Collection）</h1><h2 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>MongoDB数据集合的操作</li>\n</ul>\n<h2 id=\"实战演习-1\"><a href=\"#实战演习-1\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"users\"</span>);</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.users.renameCollection(<span class=\"string\">\"staff\"</span>); // users -&gt; staff</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.staff.drop();</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.dropDatabase();</span><br><span class=\"line\">&gt; show dbs;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"4-操作文档（Document）\"><a href=\"#4-操作文档（Document）\" class=\"headerlink\" title=\"4. 操作文档（Document）\"></a>4. 操作文档（Document）</h1><h2 id=\"知识点-3\"><a href=\"#知识点-3\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>MongoDB数据文档的操作</li>\n</ul>\n<h2 id=\"实战演习-2\"><a href=\"#实战演习-2\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">\"posts\"</span>);</span><br><span class=\"line\">&gt; db.posts.insert(</span><br><span class=\"line\">... &#123;</span><br><span class=\"line\">...     title: <span class=\"string\">\"我的第一篇博客\"</span>,</span><br><span class=\"line\">...     content: <span class=\"string\">\"已经开始写博客了，太激动了。\"</span></span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">... );</span><br><span class=\"line\">&gt; show collections;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.insert(</span><br><span class=\"line\">... &#123;</span><br><span class=\"line\">...     title: <span class=\"string\">\"我的第二篇博客\"</span>,</span><br><span class=\"line\">...     content: <span class=\"string\">\"写点什么好呢？\"</span>,</span><br><span class=\"line\">...     tag: [<span class=\"string\">\"未分类\"</span>]</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">... );</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span>(var i = 3; i &lt;=10; i++ ) &#123;</span><br><span class=\"line\">...     db.posts.insert(&#123;</span><br><span class=\"line\">...         title: <span class=\"string\">\"我的第\"</span> + i + <span class=\"string\">\"篇博客\"</span></span><br><span class=\"line\">...     &#125;);</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.count();</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;); // 大括号内的是数据字段的匹配条件，如果留空会删除所有的数据</span><br><span class=\"line\">&gt; db.posts.count();</span><br><span class=\"line\">&gt; db.posts.find();</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"5-带条件的文档\"><a href=\"#5-带条件的文档\" class=\"headerlink\" title=\"5. 带条件的文档\"></a>5. 带条件的文档</h1><h2 id=\"知识点-4\"><a href=\"#知识点-4\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>db.[collection_name].find({“”:””})</li>\n<li>$gte (&gt;=) , $gt (&gt;) , $lte (&lt;=) , $lt (&lt;)</li>\n<li>$eq (=) , $ne (!=)</li>\n<li>正则表达式:/k/, /^k/</li>\n<li>db.[collection_name].distinct(“field_name”);</li>\n</ul>\n<h2 id=\"实战演习-3\"><a href=\"#实战演习-3\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>,<span class=\"string\">\"rank\"</span>:2,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"纸片马里奥试玩体验\"</span>,<span class=\"string\">\"rank\"</span>:1,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"Utunbu16LTS的安装\"</span>,<span class=\"string\">\"rank\"</span>:3,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"信长之野望大志销量突破10000\"</span>,<span class=\"string\">\"rank\"</span>:4,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"Ruby的开发效率真的很高吗\"</span>,<span class=\"string\">\"rank\"</span>:7,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"塞尔达传说最近出了DLC\"</span>,<span class=\"string\">\"rank\"</span>:4,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"tag\"</span>: <span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$gte</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$gt</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$lte</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$lt</span>: 4&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /u/&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /^R/&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;<span class=\"string\">\"title\"</span>: /^U/&#125;);</span><br><span class=\"line\">&gt; db.posts.distinct(<span class=\"string\">\"tag\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"6-复杂条件抽文档\"><a href=\"#6-复杂条件抽文档\" class=\"headerlink\" title=\"6. 复杂条件抽文档\"></a>6. 复杂条件抽文档</h1><h2 id=\"知识点-5\"><a href=\"#知识点-5\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>且查询：db.[collection_name].find({ “”: “”, “”: “” })</li>\n<li>或查询：db.[collection_name].find({ $or: [{…},{…}] });</li>\n<li>某一字段存在多个可能数据：db.[collection_name].find({ “”: {$in: […]} });</li>\n<li>获取是否存在某一字段的数据：db.[collection_name].find({ “”: {$exists: true} });</li>\n</ul>\n<h2 id=\"实战演习-4\"><a href=\"#实战演习-4\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"title\"</span>: /u/, <span class=\"string\">\"rank\"</span>:&#123;<span class=\"variable\">$gte</span>:5&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"variable\">$or</span>: [&#123;<span class=\"string\">\"title\"</span>: /u/&#125;, &#123;<span class=\"string\">\"rank\"</span>:&#123;<span class=\"variable\">$gte</span>:4&#125;&#125;] &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"rank\"</span>: &#123;<span class=\"variable\">$in</span>: [3,4]&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123; <span class=\"string\">\"title\"</span>:<span class=\"string\">\"惊！骑士发生重大交易\"</span>, <span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123; <span class=\"string\">\"istop\"</span>: &#123;<span class=\"variable\">$exists</span>: <span class=\"literal\">true</span>&#125; &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"7-指定抽出字段\"><a href=\"#7-指定抽出字段\" class=\"headerlink\" title=\"7. 指定抽出字段\"></a>7. 指定抽出字段</h1><h2 id=\"知识点-6\"><a href=\"#知识点-6\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>db.[collection_name].find({}, {field1: true, field2: 1})</li>\n</ul>\n<h2 id=\"实战演习-5\"><a href=\"#实战演习-5\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class=\"literal\">true</span>, rank:1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class=\"literal\">true</span>, rank:1, _id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"8-文档的方法\"><a href=\"#8-文档的方法\" class=\"headerlink\" title=\"8. 文档的方法\"></a>8. 文档的方法</h1><h2 id=\"知识点-7\"><a href=\"#知识点-7\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>排序：sort()<ul>\n<li><code>sort({rank:1})</code> 进行升序排序</li>\n<li><code>sort({rank:-1})</code> 进行降序排序</li>\n</ul>\n</li>\n<li>限制：limit([Number])<ul>\n<li>抽取查询结果的前[Number]条数据</li>\n<li>使用 <code>findOne()</code> 代替 <code>find()</code> 可以查询首条记录</li>\n</ul>\n</li>\n<li>跳过：skip([Number])<ul>\n<li>跳过前[Number]条数据</li>\n<li>与 <code>limit()</code> 配合使用可以实现分页</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实战演习-6\"><a href=\"#实战演习-6\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).sort(&#123;rank:-1&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.findOne(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class=\"built_in\">limit</span>(3);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).skip(3).<span class=\"built_in\">limit</span>(3);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"9-文档更新（update）\"><a href=\"#9-文档更新（update）\" class=\"headerlink\" title=\"9. 文档更新（update）\"></a>9. 文档更新（update）</h1><h2 id=\"知识点-8\"><a href=\"#知识点-8\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>update(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)<ul>\n<li>使用 <code>$set</code> 来设置新值。</li>\n<li>如果过滤出多条数据后使用 <code>$set</code> 设置新值，在Mongodb中会只更新过滤出的第一条选项。使用设置选项 <code>multi: true</code> 可以更新过滤出的所有数据。·</li>\n<li>如果不使用 <code>$set</code> 在 <code>&lt;update&gt;</code> 中直接填写一个JSON格式的数据字段，那么Mongodb会删除原来文档的所有数据，将文档更新为新传入的数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"命令参考网页\"><a href=\"#命令参考网页\" class=\"headerlink\" title=\"命令参考网页\"></a>命令参考网页</h3><p><a href=\"https://docs.mongodb.com/manual/reference/method/db.collection.update\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/method/db.collection.update</a></p>\n<h2 id=\"实战演习-7\"><a href=\"#实战演习-7\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><blockquote>\n<p>更新数据的key值必须用 <code>&quot;&quot;</code> 包裹</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.findOne(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 10&#125; &#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"string\">\"rank\"</span>: 99&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 50&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br><span class=\"line\">&gt; db.posts.update(&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"it\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"rank\"</span>: 60&#125;&#125;, &#123;multi: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find();</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"10-玩几个特殊函数\"><a href=\"#10-玩几个特殊函数\" class=\"headerlink\" title=\"10. 玩几个特殊函数\"></a>10. 玩几个特殊函数</h1><p>今天为您讲几个操作文档字段的函数。</p>\n<blockquote>\n<p>只要开头为 <code>$</code> 的都是特殊函数</p>\n</blockquote>\n<h2 id=\"知识点-9\"><a href=\"#知识点-9\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>$inc: 递加</li>\n<li>$mul: 相乘</li>\n<li>$rename: 修改字段名</li>\n<li>$set: 新增or修改字段</li>\n<li>$unset: 字段删除</li>\n</ul>\n<h2 id=\"实战演习-8\"><a href=\"#实战演习-8\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$inc</span>: &#123;rank: 1&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$mul</span>: &#123;rank: 2&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$rename</span>: &#123;<span class=\"string\">\"rank\"</span>: <span class=\"string\">\"score\"</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;<span class=\"variable\">$unset</span>: &#123;<span class=\"string\">\"istop\"</span>: <span class=\"literal\">true</span>&#125;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-文档的特殊更新\"><a href=\"#11-文档的特殊更新\" class=\"headerlink\" title=\"11. 文档的特殊更新\"></a>11. 文档的特殊更新</h2><h2 id=\"知识点-10\"><a href=\"#知识点-10\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>upsert:有则更新，无则追加<ul>\n<li>配置选项</li>\n</ul>\n</li>\n<li>remove:条件删除数据</li>\n</ul>\n<h2 id=\"实战演习-9\"><a href=\"#实战演习-9\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:5,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:5,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;, &#123;upsert:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.update(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;, &#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>, <span class=\"string\">\"rank\"</span>:7,<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"game\"</span>&#125;, &#123;upsert:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.remove(&#123;title:<span class=\"string\">\"其实创造比大志好玩\"</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"12-使用索引\"><a href=\"#12-使用索引\" class=\"headerlink\" title=\"12. 使用索引\"></a>12. 使用索引</h1><h2 id=\"知识点-11\"><a href=\"#知识点-11\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>获取索引：getIndexes()</li>\n<li>创建索引：createIndex({…}, {…})<ul>\n<li>第一个参数填写索字段名，其value为 <code>1</code> 或 <code>-1</code> 代表该索引按照升序或者降序排序</li>\n<li>第二个参数为可选项，填写 <code>{unique: ture}</code> 可以将该索引设置为unique索引</li>\n</ul>\n</li>\n<li>删除索引：dropIndex({…})</li>\n</ul>\n<h2 id=\"实战演习-10\"><a href=\"#实战演习-10\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.createIndex(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.dropIndex(&#123;rank:-1&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.createIndex(&#123;title:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&gt; db.posts.getIndexes();</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.insert(&#123;title:<span class=\"string\">\"怪物猎人世界评测\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"13-备份和恢复\"><a href=\"#13-备份和恢复\" class=\"headerlink\" title=\"13. 备份和恢复\"></a>13. 备份和恢复</h1><h2 id=\"知识点-12\"><a href=\"#知识点-12\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><blockquote>\n<p><code>mongodump</code> 和 <code>mongorestore</code> 都是系统指令</p>\n</blockquote>\n<ul>\n<li>备份：mongodump</li>\n<li>恢复：mongorestore</li>\n</ul>\n<h2 id=\"实战演习-11\"><a href=\"#实战演习-11\" class=\"headerlink\" title=\"实战演习\"></a>实战演习</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt; show dbs;</span><br><span class=\"line\">&gt; use komablog;</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mkdir dbbak</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> dbbak</span><br><span class=\"line\">$ mongodump -d komablog</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ mongo komablog</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; db.posts.remove(&#123;&#125;);</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongorestore --drop</span><br><span class=\"line\">$ mongo komablog</span><br><span class=\"line\">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ mongodump --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"14-来源声明\"><a href=\"#14-来源声明\" class=\"headerlink\" title=\"14. 来源声明\"></a>14. 来源声明</h1><h2 id=\"课程文件\"><a href=\"#课程文件\" class=\"headerlink\" title=\"课程文件\"></a>课程文件</h2><p><a href=\"https://gitee.com/komavideo/LearnMongoDB\" target=\"_blank\" rel=\"noopener\">https://gitee.com/komavideo/LearnMongoDB</a></p>\n<h2 id=\"小马视频频道\"><a href=\"#小马视频频道\" class=\"headerlink\" title=\"小马视频频道\"></a>小马视频频道</h2><p><a href=\"http://komavideo.com\" target=\"_blank\" rel=\"noopener\">http://komavideo.com</a></p>\n"},{"title":"React学习笔记01：React基础","date":"2019-04-21T13:50:06.000Z","_content":"> 完整笔记、Demo地址：https://github.com/EsunR/React-Study\n\n## 1.用 Create React App 创建一个 React 应用\n```\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n## 2.文件结构\nApp.js 构建网页内容\nindex.js 引入内容\n\n## 3.App.js\n```javascript\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        HELLO WORLD\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n等价于：\n```javascript\nimport React from 'react';\n\n// ES6语法创建一个名为App的类，这个类继承了React.Component类，就说明这个App是一个React组件\nclass App extends React.Component {\n  // reader就是组件的内容\n  render() {\n    return (\n      <div>\n        HELLO WORLD\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n<br>\n\n```javascript\nimport React from 'react';\nimport { Component } from 'react';\n// 等价于\nimport React from 'react';\nconst Component = React.Compinent;\n```\n\n## 4.idnex.js\n\nReactDOM.reader函数: 挂载一个 `<APP />`，节点到DOM中的root\n```javascript\nReactDOM.render(<App />, document.getElementById('root'))\n```\n\n> 要使用JSX语法必须引入整个React\n\n## 5.Fragment占位符\n可以隐藏最外层标签\n```javascript\n// TodoList.js\nimport React, { Component, Fragment } from 'react'\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <Fragment>\n        <div>\n          <input /><button>提交</button>\n        </div>\n        <ul>\n          <li>学英语</li>\n          <li>Learning English</li>\n        </ul>\n      </Fragment>\n    )\n  }\n}\n\nexport default TodoList;\n```\n\n\n\n## 6.数据操作\n1. `constructor`构造函数，最优先执行\n\n```javascript\n// TodoList.js\nclass TodoList extends Component {\n  constructor(props){\n    super(props); // super调用父类（Component）固定写法\n    this.state = { // 组件的状态\n      inputValue: '',\n      list: []\n    }\n  }\n\n  reader(){\n    ... ...\n  }\n}\n```\n\n2. 用 `{this.state.KEY}` 绑定状态中的数据，这种绑定，对应的值无法被改变\n```javascript\n// TodoList.js\n  <div>\n    <input value={this.state.inputValue}/>\n    <button>提交</button>\n  </div>\n```\n\n3. 用`onChange`来执行某个方法：\n\n```javascript\n// TodoList.js\nrender() {\n  return (\n    <Fragment>\n      ... ...\n      <input\n        value={this.state.inputValue}\n        onChange={this.handleInputChange} {/*绑定事件*/}\n      />\n      ... ...\n    </Fragment>\n  )\n}\n\nhandleInputChange(e){\n  console.log(e.target.value);\n  // `e.target.value` 为获取输入的新内容\n}\n```\n\n4. 以 `handleInputChange` 方法为入口，调用 `setState()` 方法更改`state`中的数据\n\n```javascript\n// TodoList.js\nrender() {\n  return (\n    <Fragment>\n      ...\n      <input\n        value={this.state.inputValue}\n        onChange={this.handleInputChange.bind(this)} \n        {/* \n        1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。\n        2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。\n        3. 使用 onChange={(e) => { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果\n        */}\n      />\n      ...\n    </Fragment>\n  )\n}\n\nhandleInputChange(e) {\n  this.setState({\n    inputValue: e.target.value\n  })\n}\n```\n\n> this指向问题：我们用 `this.[METHODS].bind(this)` 能解决 [METHODS] 函数中 this 的指向问题，但是这会造成性能上的影响。更优的解决方案是在 `constructor` 部分中添加一个 `this.[METHODS] = this.[METHODS].bind(this)`，这样性能就会被优化。\n\n> 在新版的React中 `this.setState` 推荐改写为传入一个方法，这个方法返回的是一个state对象，如下：\n\n```javascript\nconst value = e.target.value // 新版的方法会将setState方法改写为异步，所以要再此保存状态\nthis.setState(()=>{\n  return ({\n    inputValue: value\n  })\n})\n// ES6可以简写为：\nconst value = e.target.value\nthis.setState(()=>({ \n  // 剪头函数后面直接跟一个括号，这个括号内的内容即为返回的内容\n  inputValue: value\n}))\n```\n\n\n\n## 7.渲染数据 (循环渲染)\n\n> `this.state.[LIST].map` 效果相当于 Vue 中的 `v-for`\n\n用`{}`包住的是js语句\n\n```javascript\nconstructor(props) {\n  super(props);\n  this.state = {\n    list: [\"11\",\"22\"]\n  }\n}\n\nrender(\n  <div>\n    {\n      this.state.list.map((item, index) => {\n        return <li key={index}>{item}</li>\n      })\n    }\n  </div>\n)\n```\n\n### ES6展开运算符：  \n> \n> 假如已定义一个数组 `let arr = [1,2,3]`  \n> \n> `[...arr]` 表示为 `[1,2,3]`\n>\n> 我们可以对其进行操作连接赋值操作，如：\n> \n> `let arr2 = [...arr,4,5]`\n> \n> 那么，`arr2`被输出后即为`[1,2,3,4,5]`\n   \n   \n## 8.class属性的处理\n\n用`className`替代\n\n```javascriptx\n<input\n+ className=\"input\"\n  value={this.state.inputValue}\n  onChange={this.handleInputChange.bind(this)}\n/>\n```\n\n## 9.不转义字符串\n`dangerouslySetInnerHTML` 取消转义内容\n```javascriptx\n<ul>\n  {\n    this.state.list.map((item, index) => {\n      return <li\n        key={index}\n        onClick={this.handleDelete.bind(this, index)}\n+       dangerouslySetInnerHTML={{__html: item}}\n      >\n      {/*注意中间不能有内容*/}\n      </li>\n    })\n  }\n</ul>\n```\n\n## 10.for属性的处理\n用`htmlFor`替代\n```javascript\n<label htmlFor=\"insertArea\"></label>\n```\n\n## 11.父组件与子组件\n\n1. 父组件中使用子组件：\n    ```javascript\n    // 在TodoList.js中引入TodoItem.js\n    import TodoItem from './TodoItem'\n    ...\n    <ul>\n    {\n      this.state.list.map((item, index) => {\n        return (\n          <div>\n            <TodoItem /> \n            {/* 在TodoList.js中要调用TodoItem组件的位置用一个 */}\n          </div>\n        )\n      })\n    }\n    </ul>\n    ...\n    ```\n\n    ```javascript\n    // TodoItem.js\n    import React, { Component } from 'react';\n    class TodoItem extends Component {\n      render() {\n        return <div>item</div>\n      }\n    }\n    export default TodoItem;\n    ```\n\n2. 父组件向子组件传值：父组件以标签属性的方式，向子组件传入值。如下，父组件为子组件设置一个 `content` 属性，属性的值为父组件的 `item` 的值：\n   ```html\n   // TodoList.js\n   ...\n   <TodoItem content={item}/>\n   ...\n   ```\n\n   子组件通过 `this.props.[PROPS_NAME]` 来接收数据\n   ```html\n   ...\n   <div>{this.props.content}</div>\n   ...\n   ```\n\n3. 父组件向子组件传递父组件的方法(子组件内部触发父组件的方法)：\n- 用属性传递的方法将函数传递给子组件，同时强行将父组件中的this传递给子组件。\n   ```html\n   <!-- TodoList中调用TodoItem组件 -->\n   <TodoItem \n   + deleteItem = {this.handleDelete.bind(this)}\n   />\n   ```\n   ```javascript\n   // TodoItem.js ...\n   render() {\n     const { index,content } = this.props\n     return (\n       <div\n         onClick={this.handleClick}\n         key={index}\n       >\n         {content}\n       </div>\n     )\n   }\n\n   handleClick() {\n     const { index, deleteItem } = this.props;\n     deleteItem(index);\n   }\n   // ...\n   ```\n- 在子组件中使用父组件的方法，同时this指向没问题\n\n## 12. 通过ES6语法引入props\n\n> 组件的 this.props 是一个聚合属性，我们可以用ES6的解构赋值来取这些属性到一个变量中\n```javascript\nconst { index } = this.props;\n// 相当于\nlet index = this.props.index;\n```\n\n## 13. 关于bind与this指向的问题\n```html\n<input\n  value={this.state.inputValue}\n  onChange={this.handleInputChange.bind(this)} \n/>\n```\n\n1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。\n\n2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。\n\n3. 使用 onChange={(e) => { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果\n\n4. JSX在类方法方法中调用组件中的方法，如果带括号方法会在Virtual DOM渲染过 程中就执行，如：\n    ```\n    onClick={this.handleDeleteItem()}\n    ```\n\n    是不可行的，但是通过bind方法绑定this和参数后在渲染过程中不会立即执行，如：\n    ```\n    onClick={this.handleDeleteItem.bind(this, index)}\n    ```\n\n    但是假如方法已经在`constructor`中绑定了this，同时方法还需要传入参数，这时候不能直接使用\n    ```\n    onClick={this.handleDeleteItem(index)} \n    ```\n\n    而需要通过剪头函数来传递参数，这时绑定this是非必要的：\n    ```\n    onClick={() => {this.handleDeleteItem(index)}} \n    ```","source":"_posts/2019/React学习笔记01：React基础.md","raw":"---\ntitle: React学习笔记01：React基础\ntags: [React基础教程]\ncategories:\n  - Front\n  - React\ndate: 2019-04-21 21:50:06\n---\n> 完整笔记、Demo地址：https://github.com/EsunR/React-Study\n\n## 1.用 Create React App 创建一个 React 应用\n```\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n## 2.文件结构\nApp.js 构建网页内容\nindex.js 引入内容\n\n## 3.App.js\n```javascript\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        HELLO WORLD\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n等价于：\n```javascript\nimport React from 'react';\n\n// ES6语法创建一个名为App的类，这个类继承了React.Component类，就说明这个App是一个React组件\nclass App extends React.Component {\n  // reader就是组件的内容\n  render() {\n    return (\n      <div>\n        HELLO WORLD\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n<br>\n\n```javascript\nimport React from 'react';\nimport { Component } from 'react';\n// 等价于\nimport React from 'react';\nconst Component = React.Compinent;\n```\n\n## 4.idnex.js\n\nReactDOM.reader函数: 挂载一个 `<APP />`，节点到DOM中的root\n```javascript\nReactDOM.render(<App />, document.getElementById('root'))\n```\n\n> 要使用JSX语法必须引入整个React\n\n## 5.Fragment占位符\n可以隐藏最外层标签\n```javascript\n// TodoList.js\nimport React, { Component, Fragment } from 'react'\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <Fragment>\n        <div>\n          <input /><button>提交</button>\n        </div>\n        <ul>\n          <li>学英语</li>\n          <li>Learning English</li>\n        </ul>\n      </Fragment>\n    )\n  }\n}\n\nexport default TodoList;\n```\n\n\n\n## 6.数据操作\n1. `constructor`构造函数，最优先执行\n\n```javascript\n// TodoList.js\nclass TodoList extends Component {\n  constructor(props){\n    super(props); // super调用父类（Component）固定写法\n    this.state = { // 组件的状态\n      inputValue: '',\n      list: []\n    }\n  }\n\n  reader(){\n    ... ...\n  }\n}\n```\n\n2. 用 `{this.state.KEY}` 绑定状态中的数据，这种绑定，对应的值无法被改变\n```javascript\n// TodoList.js\n  <div>\n    <input value={this.state.inputValue}/>\n    <button>提交</button>\n  </div>\n```\n\n3. 用`onChange`来执行某个方法：\n\n```javascript\n// TodoList.js\nrender() {\n  return (\n    <Fragment>\n      ... ...\n      <input\n        value={this.state.inputValue}\n        onChange={this.handleInputChange} {/*绑定事件*/}\n      />\n      ... ...\n    </Fragment>\n  )\n}\n\nhandleInputChange(e){\n  console.log(e.target.value);\n  // `e.target.value` 为获取输入的新内容\n}\n```\n\n4. 以 `handleInputChange` 方法为入口，调用 `setState()` 方法更改`state`中的数据\n\n```javascript\n// TodoList.js\nrender() {\n  return (\n    <Fragment>\n      ...\n      <input\n        value={this.state.inputValue}\n        onChange={this.handleInputChange.bind(this)} \n        {/* \n        1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。\n        2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。\n        3. 使用 onChange={(e) => { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果\n        */}\n      />\n      ...\n    </Fragment>\n  )\n}\n\nhandleInputChange(e) {\n  this.setState({\n    inputValue: e.target.value\n  })\n}\n```\n\n> this指向问题：我们用 `this.[METHODS].bind(this)` 能解决 [METHODS] 函数中 this 的指向问题，但是这会造成性能上的影响。更优的解决方案是在 `constructor` 部分中添加一个 `this.[METHODS] = this.[METHODS].bind(this)`，这样性能就会被优化。\n\n> 在新版的React中 `this.setState` 推荐改写为传入一个方法，这个方法返回的是一个state对象，如下：\n\n```javascript\nconst value = e.target.value // 新版的方法会将setState方法改写为异步，所以要再此保存状态\nthis.setState(()=>{\n  return ({\n    inputValue: value\n  })\n})\n// ES6可以简写为：\nconst value = e.target.value\nthis.setState(()=>({ \n  // 剪头函数后面直接跟一个括号，这个括号内的内容即为返回的内容\n  inputValue: value\n}))\n```\n\n\n\n## 7.渲染数据 (循环渲染)\n\n> `this.state.[LIST].map` 效果相当于 Vue 中的 `v-for`\n\n用`{}`包住的是js语句\n\n```javascript\nconstructor(props) {\n  super(props);\n  this.state = {\n    list: [\"11\",\"22\"]\n  }\n}\n\nrender(\n  <div>\n    {\n      this.state.list.map((item, index) => {\n        return <li key={index}>{item}</li>\n      })\n    }\n  </div>\n)\n```\n\n### ES6展开运算符：  \n> \n> 假如已定义一个数组 `let arr = [1,2,3]`  \n> \n> `[...arr]` 表示为 `[1,2,3]`\n>\n> 我们可以对其进行操作连接赋值操作，如：\n> \n> `let arr2 = [...arr,4,5]`\n> \n> 那么，`arr2`被输出后即为`[1,2,3,4,5]`\n   \n   \n## 8.class属性的处理\n\n用`className`替代\n\n```javascriptx\n<input\n+ className=\"input\"\n  value={this.state.inputValue}\n  onChange={this.handleInputChange.bind(this)}\n/>\n```\n\n## 9.不转义字符串\n`dangerouslySetInnerHTML` 取消转义内容\n```javascriptx\n<ul>\n  {\n    this.state.list.map((item, index) => {\n      return <li\n        key={index}\n        onClick={this.handleDelete.bind(this, index)}\n+       dangerouslySetInnerHTML={{__html: item}}\n      >\n      {/*注意中间不能有内容*/}\n      </li>\n    })\n  }\n</ul>\n```\n\n## 10.for属性的处理\n用`htmlFor`替代\n```javascript\n<label htmlFor=\"insertArea\"></label>\n```\n\n## 11.父组件与子组件\n\n1. 父组件中使用子组件：\n    ```javascript\n    // 在TodoList.js中引入TodoItem.js\n    import TodoItem from './TodoItem'\n    ...\n    <ul>\n    {\n      this.state.list.map((item, index) => {\n        return (\n          <div>\n            <TodoItem /> \n            {/* 在TodoList.js中要调用TodoItem组件的位置用一个 */}\n          </div>\n        )\n      })\n    }\n    </ul>\n    ...\n    ```\n\n    ```javascript\n    // TodoItem.js\n    import React, { Component } from 'react';\n    class TodoItem extends Component {\n      render() {\n        return <div>item</div>\n      }\n    }\n    export default TodoItem;\n    ```\n\n2. 父组件向子组件传值：父组件以标签属性的方式，向子组件传入值。如下，父组件为子组件设置一个 `content` 属性，属性的值为父组件的 `item` 的值：\n   ```html\n   // TodoList.js\n   ...\n   <TodoItem content={item}/>\n   ...\n   ```\n\n   子组件通过 `this.props.[PROPS_NAME]` 来接收数据\n   ```html\n   ...\n   <div>{this.props.content}</div>\n   ...\n   ```\n\n3. 父组件向子组件传递父组件的方法(子组件内部触发父组件的方法)：\n- 用属性传递的方法将函数传递给子组件，同时强行将父组件中的this传递给子组件。\n   ```html\n   <!-- TodoList中调用TodoItem组件 -->\n   <TodoItem \n   + deleteItem = {this.handleDelete.bind(this)}\n   />\n   ```\n   ```javascript\n   // TodoItem.js ...\n   render() {\n     const { index,content } = this.props\n     return (\n       <div\n         onClick={this.handleClick}\n         key={index}\n       >\n         {content}\n       </div>\n     )\n   }\n\n   handleClick() {\n     const { index, deleteItem } = this.props;\n     deleteItem(index);\n   }\n   // ...\n   ```\n- 在子组件中使用父组件的方法，同时this指向没问题\n\n## 12. 通过ES6语法引入props\n\n> 组件的 this.props 是一个聚合属性，我们可以用ES6的解构赋值来取这些属性到一个变量中\n```javascript\nconst { index } = this.props;\n// 相当于\nlet index = this.props.index;\n```\n\n## 13. 关于bind与this指向的问题\n```html\n<input\n  value={this.state.inputValue}\n  onChange={this.handleInputChange.bind(this)} \n/>\n```\n\n1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。\n\n2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。\n\n3. 使用 onChange={(e) => { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果\n\n4. JSX在类方法方法中调用组件中的方法，如果带括号方法会在Virtual DOM渲染过 程中就执行，如：\n    ```\n    onClick={this.handleDeleteItem()}\n    ```\n\n    是不可行的，但是通过bind方法绑定this和参数后在渲染过程中不会立即执行，如：\n    ```\n    onClick={this.handleDeleteItem.bind(this, index)}\n    ```\n\n    但是假如方法已经在`constructor`中绑定了this，同时方法还需要传入参数，这时候不能直接使用\n    ```\n    onClick={this.handleDeleteItem(index)} \n    ```\n\n    而需要通过剪头函数来传递参数，这时绑定this是非必要的：\n    ```\n    onClick={() => {this.handleDeleteItem(index)}} \n    ```","slug":"React学习笔记01：React基础","published":1,"updated":"2019-11-09T13:53:36.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfd003p3w4ub0yw2ie6","content":"<blockquote>\n<p>完整笔记、Demo地址：<a href=\"https://github.com/EsunR/React-Study\" target=\"_blank\" rel=\"noopener\">https://github.com/EsunR/React-Study</a></p>\n</blockquote>\n<h2 id=\"1-用-Create-React-App-创建一个-React-应用\"><a href=\"#1-用-Create-React-App-创建一个-React-应用\" class=\"headerlink\" title=\"1.用 Create React App 创建一个 React 应用\"></a>1.用 Create React App 创建一个 React 应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-文件结构\"><a href=\"#2-文件结构\" class=\"headerlink\" title=\"2.文件结构\"></a>2.文件结构</h2><p>App.js 构建网页内容<br>index.js 引入内容</p>\n<h2 id=\"3-App-js\"><a href=\"#3-App-js\" class=\"headerlink\" title=\"3.App.js\"></a>3.App.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        HELLO WORLD</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法创建一个名为App的类，这个类继承了React.Component类，就说明这个App是一个React组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// reader就是组件的内容</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        HELLO WORLD</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.Compinent;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-idnex-js\"><a href=\"#4-idnex-js\" class=\"headerlink\" title=\"4.idnex.js\"></a>4.idnex.js</h2><p>ReactDOM.reader函数: 挂载一个 <code>&lt;APP /&gt;</code>，节点到DOM中的root</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要使用JSX语法必须引入整个React</p>\n</blockquote>\n<h2 id=\"5-Fragment占位符\"><a href=\"#5-Fragment占位符\" class=\"headerlink\" title=\"5.Fragment占位符\"></a>5.Fragment占位符</h2><p>可以隐藏最外层标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input /&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;li&gt;学英语&lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;Learning English&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default TodoList;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-数据操作\"><a href=\"#6-数据操作\" class=\"headerlink\" title=\"6.数据操作\"></a>6.数据操作</h2><ol>\n<li><code>constructor</code>构造函数，最优先执行</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props); <span class=\"comment\">// super调用父类（Component）固定写法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">// 组件的状态</span></span><br><span class=\"line\">      inputValue: <span class=\"string\">''</span>,</span><br><span class=\"line\">      list: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  reader()&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>用 <code>{this.state.KEY}</code> 绑定状态中的数据，这种绑定，对应的值无法被改变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;/&gt;</span><br><span class=\"line\">    &lt;button&gt;提交&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<code>onChange</code>来执行某个方法：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; &#123;<span class=\"comment\">/*绑定事件*/</span>&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleInputChange(e)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log(e.target.value);</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ `e.target.value` 为获取输入的新内容</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>以 <code>handleInputChange</code> 方法为入口，调用 <code>setState()</code> 方法更改<code>state</code>中的数据</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange.bind(<span class=\"keyword\">this</span>)&#125; </span><br><span class=\"line\">        &#123;<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。</span></span><br><span class=\"line\"><span class=\"comment\">        2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。</span></span><br><span class=\"line\"><span class=\"comment\">        3. 使用 onChange=&#123;(e) =&gt; &#123; this.handleInputChange(e) &#125;&#125; （需要再此传入合成的事件e）也可以达到同样的效果</span></span><br><span class=\"line\"><span class=\"comment\">        */</span>&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleInputChange(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  this.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    inputValue: e.target.value</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>this指向问题：我们用 <code>this.[METHODS].bind(this)</code> 能解决 [METHODS] 函数中 this 的指向问题，但是这会造成性能上的影响。更优的解决方案是在 <code>constructor</code> 部分中添加一个 <code>this.[METHODS] = this.[METHODS].bind(this)</code>，这样性能就会被优化。</p>\n</blockquote>\n<blockquote>\n<p>在新版的React中 <code>this.setState</code> 推荐改写为传入一个方法，这个方法返回的是一个state对象，如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = e.target.value <span class=\"comment\">// 新版的方法会将setState方法改写为异步，所以要再此保存状态</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">    inputValue: value</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ES6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> value = e.target.value</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 剪头函数后面直接跟一个括号，这个括号内的内容即为返回的内容</span></span><br><span class=\"line\">  inputValue: value</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-渲染数据-循环渲染\"><a href=\"#7-渲染数据-循环渲染\" class=\"headerlink\" title=\"7.渲染数据 (循环渲染)\"></a>7.渲染数据 (循环渲染)</h2><blockquote>\n<p><code>this.state.[LIST].map</code> 效果相当于 Vue 中的 <code>v-for</code></p>\n</blockquote>\n<p>用<code>{}</code>包住的是js语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    list: [<span class=\"string\">\"11\"</span>,<span class=\"string\">\"22\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6展开运算符：\"><a href=\"#ES6展开运算符：\" class=\"headerlink\" title=\"ES6展开运算符：\"></a>ES6展开运算符：</h3><blockquote>\n<p>假如已定义一个数组 <code>let arr = [1,2,3]</code>  </p>\n<p><code>[...arr]</code> 表示为 <code>[1,2,3]</code></p>\n<p>我们可以对其进行操作连接赋值操作，如：</p>\n<p><code>let arr2 = [...arr,4,5]</code></p>\n<p>那么，<code>arr2</code>被输出后即为<code>[1,2,3,4,5]</code></p>\n</blockquote>\n<h2 id=\"8-class属性的处理\"><a href=\"#8-class属性的处理\" class=\"headerlink\" title=\"8.class属性的处理\"></a>8.class属性的处理</h2><p>用<code>className</code>替代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">+ className=&quot;input&quot;</span><br><span class=\"line\">  value=&#123;this.state.inputValue&#125;</span><br><span class=\"line\">  onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-不转义字符串\"><a href=\"#9-不转义字符串\" class=\"headerlink\" title=\"9.不转义字符串\"></a>9.不转义字符串</h2><p><code>dangerouslySetInnerHTML</code> 取消转义内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this.state.list.map((item, index) =&gt; &#123;</span><br><span class=\"line\">      return &lt;li</span><br><span class=\"line\">        key=&#123;index&#125;</span><br><span class=\"line\">        onClick=&#123;this.handleDelete.bind(this, index)&#125;</span><br><span class=\"line\">+       dangerouslySetInnerHTML=&#123;&#123;__html: item&#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">      &#123;/*注意中间不能有内容*/&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-for属性的处理\"><a href=\"#10-for属性的处理\" class=\"headerlink\" title=\"10.for属性的处理\"></a>10.for属性的处理</h2><p>用<code>htmlFor</code>替代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label htmlFor=<span class=\"string\">\"insertArea\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-父组件与子组件\"><a href=\"#11-父组件与子组件\" class=\"headerlink\" title=\"11.父组件与子组件\"></a>11.父组件与子组件</h2><ol>\n<li><p>父组件中使用子组件：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在TodoList.js中引入TodoItem.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TodoItem /&gt; </span><br><span class=\"line\">        &#123;<span class=\"comment\">/* 在TodoList.js中要调用TodoItem组件的位置用一个 */</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoItem.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>item<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoItem;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>父组件向子组件传值：父组件以标签属性的方式，向子组件传入值。如下，父组件为子组件设置一个 <code>content</code> 属性，属性的值为父组件的 <code>item</code> 的值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// TodoList.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;/</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>子组件通过 <code>this.props.[PROPS_NAME]</code> 来接收数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>父组件向子组件传递父组件的方法(子组件内部触发父组件的方法)：</p>\n</li>\n</ol>\n<ul>\n<li>用属性传递的方法将函数传递给子组件，同时强行将父组件中的this传递给子组件。 <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- TodoList中调用TodoItem组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> </span></span><br><span class=\"line\"><span class=\"tag\">+ <span class=\"attr\">deleteItem</span> = <span class=\"string\">&#123;this.handleDelete.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoItem.js ...</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; index,content &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;</span><br><span class=\"line\">      key=&#123;index&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &#123;content&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleClick() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const &#123; index, deleteItem &#125; = this.props;</span></span><br><span class=\"line\"><span class=\"regexp\">  deleteItem(index);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br></pre></td></tr></table></figure></li>\n<li>在子组件中使用父组件的方法，同时this指向没问题</li>\n</ul>\n<h2 id=\"12-通过ES6语法引入props\"><a href=\"#12-通过ES6语法引入props\" class=\"headerlink\" title=\"12. 通过ES6语法引入props\"></a>12. 通过ES6语法引入props</h2><blockquote>\n<p>组件的 this.props 是一个聚合属性，我们可以用ES6的解构赋值来取这些属性到一个变量中</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; index &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.props.index;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-关于bind与this指向的问题\"><a href=\"#13-关于bind与this指向的问题\" class=\"headerlink\" title=\"13. 关于bind与this指向的问题\"></a>13. 关于bind与this指向的问题</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleInputChange.bind(this)&#125;</span> </span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。</p>\n</li>\n<li><p>使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。</p>\n</li>\n<li><p>使用 onChange={(e) =&gt; { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果</p>\n</li>\n<li><p>JSX在类方法方法中调用组件中的方法，如果带括号方法会在Virtual DOM渲染过 程中就执行，如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem()&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 是不可行的，但是通过bind方法绑定this和参数后在渲染过程中不会立即执行，如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem.bind(this, index)&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 但是假如方法已经在<code>constructor</code>中绑定了this，同时方法还需要传入参数，这时候不能直接使用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem(index)&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 而需要通过剪头函数来传递参数，这时绑定this是非必要的：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;() =&gt; &#123;this.handleDeleteItem(index)&#125;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<blockquote>\n<p>完整笔记、Demo地址：<a href=\"https://github.com/EsunR/React-Study\" target=\"_blank\" rel=\"noopener\">https://github.com/EsunR/React-Study</a></p>\n</blockquote>\n<h2 id=\"1-用-Create-React-App-创建一个-React-应用\"><a href=\"#1-用-Create-React-App-创建一个-React-应用\" class=\"headerlink\" title=\"1.用 Create React App 创建一个 React 应用\"></a>1.用 Create React App 创建一个 React 应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-文件结构\"><a href=\"#2-文件结构\" class=\"headerlink\" title=\"2.文件结构\"></a>2.文件结构</h2><p>App.js 构建网页内容<br>index.js 引入内容</p>\n<h2 id=\"3-App-js\"><a href=\"#3-App-js\" class=\"headerlink\" title=\"3.App.js\"></a>3.App.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        HELLO WORLD</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法创建一个名为App的类，这个类继承了React.Component类，就说明这个App是一个React组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// reader就是组件的内容</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        HELLO WORLD</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.Compinent;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-idnex-js\"><a href=\"#4-idnex-js\" class=\"headerlink\" title=\"4.idnex.js\"></a>4.idnex.js</h2><p>ReactDOM.reader函数: 挂载一个 <code>&lt;APP /&gt;</code>，节点到DOM中的root</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要使用JSX语法必须引入整个React</p>\n</blockquote>\n<h2 id=\"5-Fragment占位符\"><a href=\"#5-Fragment占位符\" class=\"headerlink\" title=\"5.Fragment占位符\"></a>5.Fragment占位符</h2><p>可以隐藏最外层标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input /&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;li&gt;学英语&lt;/</span>li&gt;</span><br><span class=\"line\">          &lt;li&gt;Learning English&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/u</span>l&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default TodoList;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-数据操作\"><a href=\"#6-数据操作\" class=\"headerlink\" title=\"6.数据操作\"></a>6.数据操作</h2><ol>\n<li><code>constructor</code>构造函数，最优先执行</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props); <span class=\"comment\">// super调用父类（Component）固定写法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"comment\">// 组件的状态</span></span><br><span class=\"line\">      inputValue: <span class=\"string\">''</span>,</span><br><span class=\"line\">      list: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  reader()&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>用 <code>{this.state.KEY}</code> 绑定状态中的数据，这种绑定，对应的值无法被改变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;/&gt;</span><br><span class=\"line\">    &lt;button&gt;提交&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<code>onChange</code>来执行某个方法：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; &#123;<span class=\"comment\">/*绑定事件*/</span>&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleInputChange(e)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log(e.target.value);</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ `e.target.value` 为获取输入的新内容</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>以 <code>handleInputChange</code> 方法为入口，调用 <code>setState()</code> 方法更改<code>state</code>中的数据</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange.bind(<span class=\"keyword\">this</span>)&#125; </span><br><span class=\"line\">        &#123;<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        1. 在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。</span></span><br><span class=\"line\"><span class=\"comment\">        2. 使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。</span></span><br><span class=\"line\"><span class=\"comment\">        3. 使用 onChange=&#123;(e) =&gt; &#123; this.handleInputChange(e) &#125;&#125; （需要再此传入合成的事件e）也可以达到同样的效果</span></span><br><span class=\"line\"><span class=\"comment\">        */</span>&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleInputChange(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  this.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    inputValue: e.target.value</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>this指向问题：我们用 <code>this.[METHODS].bind(this)</code> 能解决 [METHODS] 函数中 this 的指向问题，但是这会造成性能上的影响。更优的解决方案是在 <code>constructor</code> 部分中添加一个 <code>this.[METHODS] = this.[METHODS].bind(this)</code>，这样性能就会被优化。</p>\n</blockquote>\n<blockquote>\n<p>在新版的React中 <code>this.setState</code> 推荐改写为传入一个方法，这个方法返回的是一个state对象，如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = e.target.value <span class=\"comment\">// 新版的方法会将setState方法改写为异步，所以要再此保存状态</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">    inputValue: value</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ES6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> value = e.target.value</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123; </span><br><span class=\"line\">  <span class=\"comment\">// 剪头函数后面直接跟一个括号，这个括号内的内容即为返回的内容</span></span><br><span class=\"line\">  inputValue: value</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-渲染数据-循环渲染\"><a href=\"#7-渲染数据-循环渲染\" class=\"headerlink\" title=\"7.渲染数据 (循环渲染)\"></a>7.渲染数据 (循环渲染)</h2><blockquote>\n<p><code>this.state.[LIST].map</code> 效果相当于 Vue 中的 <code>v-for</code></p>\n</blockquote>\n<p>用<code>{}</code>包住的是js语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    list: [<span class=\"string\">\"11\"</span>,<span class=\"string\">\"22\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6展开运算符：\"><a href=\"#ES6展开运算符：\" class=\"headerlink\" title=\"ES6展开运算符：\"></a>ES6展开运算符：</h3><blockquote>\n<p>假如已定义一个数组 <code>let arr = [1,2,3]</code>  </p>\n<p><code>[...arr]</code> 表示为 <code>[1,2,3]</code></p>\n<p>我们可以对其进行操作连接赋值操作，如：</p>\n<p><code>let arr2 = [...arr,4,5]</code></p>\n<p>那么，<code>arr2</code>被输出后即为<code>[1,2,3,4,5]</code></p>\n</blockquote>\n<h2 id=\"8-class属性的处理\"><a href=\"#8-class属性的处理\" class=\"headerlink\" title=\"8.class属性的处理\"></a>8.class属性的处理</h2><p>用<code>className</code>替代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">+ className=&quot;input&quot;</span><br><span class=\"line\">  value=&#123;this.state.inputValue&#125;</span><br><span class=\"line\">  onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-不转义字符串\"><a href=\"#9-不转义字符串\" class=\"headerlink\" title=\"9.不转义字符串\"></a>9.不转义字符串</h2><p><code>dangerouslySetInnerHTML</code> 取消转义内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this.state.list.map((item, index) =&gt; &#123;</span><br><span class=\"line\">      return &lt;li</span><br><span class=\"line\">        key=&#123;index&#125;</span><br><span class=\"line\">        onClick=&#123;this.handleDelete.bind(this, index)&#125;</span><br><span class=\"line\">+       dangerouslySetInnerHTML=&#123;&#123;__html: item&#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">      &#123;/*注意中间不能有内容*/&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-for属性的处理\"><a href=\"#10-for属性的处理\" class=\"headerlink\" title=\"10.for属性的处理\"></a>10.for属性的处理</h2><p>用<code>htmlFor</code>替代</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label htmlFor=<span class=\"string\">\"insertArea\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-父组件与子组件\"><a href=\"#11-父组件与子组件\" class=\"headerlink\" title=\"11.父组件与子组件\"></a>11.父组件与子组件</h2><ol>\n<li><p>父组件中使用子组件：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在TodoList.js中引入TodoItem.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;TodoItem /&gt; </span><br><span class=\"line\">        &#123;<span class=\"comment\">/* 在TodoList.js中要调用TodoItem组件的位置用一个 */</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoItem.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>item<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoItem;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>父组件向子组件传值：父组件以标签属性的方式，向子组件传入值。如下，父组件为子组件设置一个 <code>content</code> 属性，属性的值为父组件的 <code>item</code> 的值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// TodoList.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;/</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>子组件通过 <code>this.props.[PROPS_NAME]</code> 来接收数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>父组件向子组件传递父组件的方法(子组件内部触发父组件的方法)：</p>\n</li>\n</ol>\n<ul>\n<li>用属性传递的方法将函数传递给子组件，同时强行将父组件中的this传递给子组件。 <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- TodoList中调用TodoItem组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> </span></span><br><span class=\"line\"><span class=\"tag\">+ <span class=\"attr\">deleteItem</span> = <span class=\"string\">&#123;this.handleDelete.bind(this)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoItem.js ...</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; index,content &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;</span><br><span class=\"line\">      key=&#123;index&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &#123;content&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">handleClick() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const &#123; index, deleteItem &#125; = this.props;</span></span><br><span class=\"line\"><span class=\"regexp\">  deleteItem(index);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br></pre></td></tr></table></figure></li>\n<li>在子组件中使用父组件的方法，同时this指向没问题</li>\n</ul>\n<h2 id=\"12-通过ES6语法引入props\"><a href=\"#12-通过ES6语法引入props\" class=\"headerlink\" title=\"12. 通过ES6语法引入props\"></a>12. 通过ES6语法引入props</h2><blockquote>\n<p>组件的 this.props 是一个聚合属性，我们可以用ES6的解构赋值来取这些属性到一个变量中</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; index &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.props.index;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-关于bind与this指向的问题\"><a href=\"#13-关于bind与this指向的问题\" class=\"headerlink\" title=\"13. 关于bind与this指向的问题\"></a>13. 关于bind与this指向的问题</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleInputChange.bind(this)&#125;</span> </span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。</p>\n</li>\n<li><p>使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。</p>\n</li>\n<li><p>使用 onChange={(e) =&gt; { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果</p>\n</li>\n<li><p>JSX在类方法方法中调用组件中的方法，如果带括号方法会在Virtual DOM渲染过 程中就执行，如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem()&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 是不可行的，但是通过bind方法绑定this和参数后在渲染过程中不会立即执行，如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem.bind(this, index)&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 但是假如方法已经在<code>constructor</code>中绑定了this，同时方法还需要传入参数，这时候不能直接使用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;this.handleDeleteItem(index)&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 而需要通过剪头函数来传递参数，这时绑定this是非必要的：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123;() =&gt; &#123;this.handleDeleteItem(index)&#125;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"React学习笔记04：Redux实战","date":"2019-05-02T13:54:57.000Z","_content":"# 01.UI组件与容器组件\n\nUI组件负责页面渲染，容器组件负责页面逻辑\n\n创建UI组件的核心思想就是把原组件中的`render`函数中的内容抽离出去为一个子组件，在父组件的`render`函数中只引入这个子组件。\n\n如：我们把TodoList项目中的render部分抽离出去后，文件结构变为\n```diff\n  index.js\n  TodoList.js\n+ TodoListUI.js\n  /store \n```\n\n```javascript\n// TodoList.js\nimport TodoListUI from './TodoListUI'\n... ...\nrender(){\n  return (\n    <TodoListUI />\n  )\n}\n```\n\n```javascript\n// TodoListUI.js\nimport { Button, List, Input } from 'antd';\n... ...\nrender(){\n  return (\n    // JSX中的DOM树\n  )\n}\n```\n\n为了能使`TodoListUI.js`中的方法和数据正常使用，在`TodoList.js`中调用子组件的时候需要将子组件中可能用到的所有方法和数据都传入子组件，如：\n```javascript\nrender() {\n  return <TodoListUI\n    inputValue={this.state.inputValue}\n    list={this.state.list}\n    handleInputChange={this.handleInputChange}\n    handleButtonClick={this.handleButtonClick}\n    handleItemDelete={this.handleItemDelete}\n  />\n}\n```\n\n# 02.无状态组件\n\n当我们设计一个UI组件，如果这个组件只有render函数，可以将其转化为一个无状态组件，可以优化其性能，具体写法为使用一个变量存放一个函数，函数的参数为`props`，函数的返回值即为JSX的Virtual DOM内容。如下：\n\n```javascript\nimport React from 'react'\n\nconst NoStatusComponent = (props) => {\n  return (\n    <div>Virtual DOM here</div>\n  )\n}\n\nreturn NoStatusComponent\n```\n\n# 04.使用Redux-thunk中间件实现ajax数据请求\n\nRedux-thunk可以让`actionCreator.js`中返回一个方法（默认actionCreator只能返回一个action对象），可以方便我们把异步操作抽离到`actionCreator.js`文件中。\n\n## 使用Redux中间件Redux-thunk\n\n1. 在创建store的文件中（如Demon中的`./store/index.js`），在引入Redux时，引入`applyMiddleware`组件\n    ```diff\n    import { \n      createStore, \n    + applyMiddleware \n    } from 'redux';\n    + import thunk from 'redux-thunk'\n    ```\n\n2. 在调用`createStore()`创建store时，第一个参数填入`reducer`对象，第二个参数传入一个`applyMiddleware()`方法，~~这个方法的参数时一个数组，数组的内容即为要在store中使用的中间件列表（Redux DevTools实际也是一个中间件）~~。我们在此处调用`thunk`\n\n    ```diff\n    const store = createStore(\n      reducer,\n    + applyMiddleware(thunk)\n    );\n    ```\n\n3. 如果在此时还需要使用Redux DevTools，需要按照 [官方文档](https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup) 进行如下设置\n\n    ```diff\n    // 方案一 (不推荐)\n    import { \n      createStore, \n      applyMiddleware, \n    + compose \n    } from 'redux';\n    import thunk from 'redux-thunk'\n\n    + const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    + const store = createStore(reducer, /* preloadedState, */ composeEnhancers(\n    - const store = createStore(reducer, /* preloadedState, */ compose(\n        applyMiddleware(thunk)\n      ));\n    ```\n\n    ```diff\n    // 方案二（推荐）\n      import { \n        createStore, \n        applyMiddleware, \n    +   compose \n      } from 'redux';\n      import thunk from 'redux-thunk'\n\n    + const composeEnhancers =\n    +   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    +   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    + }) : compose;\n\n    + const enhancer = composeEnhancers(\n    +   applyMiddleware(thunk)\n    + );\n\n      const store = createStore(\n        reducer,\n    +   enhancer\n      );\n    ```\n\n4. 将异步方法转入`actionCreator.js`中编写。\n\n    我们在此模拟一个场景：当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项，我们可以把这个AJAX请求放入`actionCreator.js`中，编写一个方法名为`getTodoList`。我们再这个方法中需要做三件事：\n      1. 通过AJAX获取数据，并生成一个action对象。\n      2. 将数据通过store的`dispatch()`方法，将生成的action对象传递给store，让其处理数据。\n      3. 将方法暴露出去，提供给`TodoList.js`组件使用。\n\n    ```javascript\n    export const getTodoList = () => {\n    return (dispatch) => {\n        axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')\n          .then(res => {\n            const data = res.data;  // 获取数据\n            const action = {\n              type: INIT_LIST_ACTION,\n              data: data\n            };  // 生成action对象（要借助actionCreator已写好的方法）\n            dispatch(action);  // 向store传递action对象\n          })\n      }\n    }\n    ```\n\n    之后，我们在`TodoList.js`组件中引入该方法并且使用该方法\n    ```javascript\n    import { getTodoList } from './store/actionCreator.js'\n    ... ...\n    componentDidMount() {\n      const action = getTodoList();\n      store.dispatch(action);\n    }\n    ```\n    在此，我们调用`getTodoList()`，返回值是一个方法，而并非一个action对象，即`action`变量现在是一个方法。\n    \n    当执行代码`store.dispatch(action)`时，redux-thunk将其进行了一个处理，当检测到传入`dispatch()`方法的参数是一个方法而并非一个对象时，会在此时执行传入的方法，并且在该方法(也就是`action`)的参数位上，传入store提供的`dispatch()`方法，这样在`action`方法执行时，`action`方法内部就可以直接使用`dispatch()`方法。\n    \n    这就是为什么我们再`actionCreator.js`编写`getTodoList()`方法时，可以直接调用`dispatch()`方法的原因。\n\n    可以参考如下代码来理解redux-thunk在此处的操作（中间件操作原理）：\n    ```javascript\n    // 模拟原有的Store对象\n    var Store = function () {\n      // 挂载dispatch方法，只能处理对象\n      this.dispatch = (obj) => {\n        if (typeof obj === \"object\") {\n          // 处理对象\n          console.log(obj);\n        } else {\n          throw \"arguments error\";\n        }\n      }\n    }\n    ```\n\n    ```javascript\n    // 通过redux-thunk中间件封装后的Store对象\n    var Store = function () {\n      // 挂载dispatch方法，dispatch可以处理对象和函数\n      this.dispatch = (obj) => {\n        if (typeof obj === \"function\") {\n          // 如果传入的是一个方法，就把该方法执行，并且向方法内部再传入dispatch方法本身\n          obj(this.dispatch);\n        } else if (typeof obj === \"object\") {\n          // 如果传入的是一个对象，就直接处理对象\n          console.log(obj);\n        } else {\n          throw \"arguments error\";\n        }\n      }\n    }\n\n    // 模拟在actionCreator.js中创建的方法\n    var fun = function (dispatch) {\n      let action = {\n        type: \"fun\",\n        msg: \"dispatch carry by a function inner\"\n      }\n      dispatch(action)\n    }\n\n    var store = new Store();\n    // 向实例化的store对象中传入方法\n    store.dispatch(fun)\n    ```\n\n    运行结果：\n    ```\n    { type: 'fun', msg: 'dispatch carry by a function inner' }\n    ```\n    原理图解：\n\n    ![a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg)\n\n\n# 05.使用Redux-saga中间件使用入门\n\n## 初始化Redux-saga\n\n1. 更改目录结构\n    ```diff\n    /store \n      reducer.js\n      actionCreator.js\n      actionTypes.js\n      index.js\n    + saga.js\n    ```\n\n2. 在`./store/index.js`导入Redux-saga中间件（同时保持与Redux DevTools的兼容）\n    ```diff\n      import { createStore, applyMiddleware, compose } from 'redux'\n      import reducer from './reducer'\n    + import createSagaMiddleware from 'redux-saga'\n    + import TodoSagas from './saga.js'\n\n    + const sagaMiddleware = createSagaMiddleware()\n\n      const composeEnhancers =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n          window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          }) : compose;\n\n      const enhancer = composeEnhancers(\n    +   applyMiddleware(sagaMiddleware)\n      );\n\n      const store = createStore(\n        reducer,\n        enhancer\n      );\n\n    + sagaMiddleware.run(TodoSagas)\n\n      export default store;\n    ```\n\n3. 在`sagas.js`中创建一个初始化的Generator函数\n    ```javascript\n    import { takeEvery } from 'redux-saga/effects'\n    function* mySaga() {\n      ... ...\n    }\n    export default mySaga;\n    ```\n\n## 在项目中使用Redux-saga\n\n我们还借用之前的例子，当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项。\n\n我们先来讲解一下Redux-saga的原理：它会检查Store派发给Reducer的每个action，如果这个action代表的操作是期望执行一个异步函数，那么Redux-saga就会捕获这action，拿到`sagas.js`文件的业务代码中处理，进行一系列的异步操作，最后再生成一个action，交付给Reducer。\n\n![a71efaafly1g24leszo7yj20tu0e2q3v.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g24leszo7yj20tu0e2q3v.jpg)\n\n接下来进行一个列子的详细流程：\n\n1. 在 `actionTypes.js` 中创建一个actionType并导出，提供一个action的类型名\n    ```javascript\n    export const GET_INIT_LIST = 'get_init_list'\n    ```\n\n2. 在 `actionCreator.js` 中创建 `getInitList` 方法并导出，提供一个生成action对象的方法\n    ```javascript\n    export const getInitList = () => ({\n      type: GET_INIT_LIST\n    })\n    ```\n3. 在 `TodoList.js` 组件中调用 `getInitList` 方法生成一个action对象，提供给Redux-saga劫持\n    ```diff\n    + import { getInitList } from './store/actionCreator'\n    ... ...\n    componentDidMount() {\n    + const action = getInitList();\n      store.dispatch(action);\n    - axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')\n    -   .then(res => {\n    -     const data = res.data;\n    -     const action = initListAction(data);\n    -     store.dispatch(action);\n    -   })\n    }\n    ```\n\n4. 编写 `saga.js` 劫持 `type: 'get_init_list'` 的action，并进行异步操作，最终返回一个新的action交付给Reducer。\n    ```javascript\n    import { takeEvery, put } from 'redux-saga/effects' // 导入put方法\n    import axios from 'axios'\n    import { GET_INIT_LIST } from './actionTypes'\n    import { initListAction } from './actionCreator'\n\n    function* getInitList() {\n      const res = yield axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList');\n      const action = initListAction(res.data);\n      yield put(action); // Redux-saga使用put()方法来代替store.dispatch()方法\n    }\n\n    function* mySaga() {\n      yield takeEvery(GET_INIT_LIST, getInitList);  // 如果action的type为GET_INIT_LIST，就劫持这个action，并执行getInitList()方法\n    }\n\n    export default mySaga;\n    ```\n\n# 06.React-Redux的基本使用使用\n\n## 基本作用\nReact-Redux优化了组件中对store的调用方式，在传统的组件中，如果想要调用store则需要引入store并让store与当前组件的state做关联。而React-Redux，提供了一个 `<Provider></Provider>` 容器组件，可以将store作为容器组件的props传入组件，这样在 `<Provider>` 容器组件中的其他组件就可以获取store，而不需要重复调用。\n\n使用React-Redux基本步骤为：\n1. 在项目的index.js中（或其他组件中也可以）设置`<Provider>`容器\n2. 在`<Provider>`容器的组件代码中，设置store与该组件props的映射关系，以及映射相关的disoatch操作到组件props中。\n3. 连接组件与state\n\n## 具体流程\n\n文件目录：\n```\n/src\n+- index.js\n+- TodoList.js\n+- store\n   +- index.js\n   +- reducer.js\n```\n\n1. `index.js` 中引入store和react-redux，并设置`<Provider>`容器组件：\n    ```diff\n    // index.js\n\n      import React from 'react';\n    + import ReactDOM from 'react-dom';\n    + import store from './store'\n\n      import TodoList from './06-3.React-Redux/TodoList'\n    + import { Provider } from 'react-redux'\n\n    + const App = (\n    +   <Provider store={store}>\n          <TodoList></TodoList>\n    +   </Provider>\n    + )\n\n    - ReactDOM.render(<App />, document.getElementById('root'));\n    + ReactDOM.render(App, document.getElementById('root'));\n    ```\n2. 在`TodoList.js`组件中配置关于store和dispatch方法的映射：\n    \n    首先要引入react-redux的connect方法，`connect()`方法用来建设映射关系，它包含两个参数，第一个参数为映射的state相关设置，第二个为映射的dispatch相关设置，设置好之后，就可以将store的数据和有关于dispatch的操作挂载到组件的props属性中。\n    ```javascript\n    // TodoList.js\n\n    import React, { Component } from 'react'\n    import { connect } from 'react-redux'\n    ... ...\n    class TodoList extends Component {\n      ... ...\n    }\n    // 映射store中的数据到组件中的props\n    const mapStateToProps = (store) => {\n      return {\n        // 把store中inputValue的值映射到组件的props中\n        inputValue: store.inputValue\n      }\n    }\n    // 将有关于dispatch操作相关的方法传入props中\n    const mapDispatchToProps = (dispatch) => {\n      return {\n        handelInputChange(e) {\n          const action = {\n            type: 'change_input_value',\n            value: e.target.value\n          }\n          dispatch(action)\n        }\n      }\n    }\n    // 核心API：connect 如果不需要connect()中的某个参数，则填写为null\n    export default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n    ```\n    当我们在组件内部使用传入的store的值时，可以直接调用组件的props属性，如当我们要取出刚才挂载到props上的\n    ```html\n    <input value={this.props.inputValue} onChange= {this.props.handelInputChange} />\n    ```\n3. 在`reducer.js`中编写处理store数据的业务逻辑\n\n","source":"_posts/2019/React学习笔记04：Redux实战.md","raw":"---\ntitle: React学习笔记04：Redux实战\ntags: [React基础教程, Redux]\ncategories:\n  - Front\n  - React\ndate: 2019-05-02 21:54:57\n---\n# 01.UI组件与容器组件\n\nUI组件负责页面渲染，容器组件负责页面逻辑\n\n创建UI组件的核心思想就是把原组件中的`render`函数中的内容抽离出去为一个子组件，在父组件的`render`函数中只引入这个子组件。\n\n如：我们把TodoList项目中的render部分抽离出去后，文件结构变为\n```diff\n  index.js\n  TodoList.js\n+ TodoListUI.js\n  /store \n```\n\n```javascript\n// TodoList.js\nimport TodoListUI from './TodoListUI'\n... ...\nrender(){\n  return (\n    <TodoListUI />\n  )\n}\n```\n\n```javascript\n// TodoListUI.js\nimport { Button, List, Input } from 'antd';\n... ...\nrender(){\n  return (\n    // JSX中的DOM树\n  )\n}\n```\n\n为了能使`TodoListUI.js`中的方法和数据正常使用，在`TodoList.js`中调用子组件的时候需要将子组件中可能用到的所有方法和数据都传入子组件，如：\n```javascript\nrender() {\n  return <TodoListUI\n    inputValue={this.state.inputValue}\n    list={this.state.list}\n    handleInputChange={this.handleInputChange}\n    handleButtonClick={this.handleButtonClick}\n    handleItemDelete={this.handleItemDelete}\n  />\n}\n```\n\n# 02.无状态组件\n\n当我们设计一个UI组件，如果这个组件只有render函数，可以将其转化为一个无状态组件，可以优化其性能，具体写法为使用一个变量存放一个函数，函数的参数为`props`，函数的返回值即为JSX的Virtual DOM内容。如下：\n\n```javascript\nimport React from 'react'\n\nconst NoStatusComponent = (props) => {\n  return (\n    <div>Virtual DOM here</div>\n  )\n}\n\nreturn NoStatusComponent\n```\n\n# 04.使用Redux-thunk中间件实现ajax数据请求\n\nRedux-thunk可以让`actionCreator.js`中返回一个方法（默认actionCreator只能返回一个action对象），可以方便我们把异步操作抽离到`actionCreator.js`文件中。\n\n## 使用Redux中间件Redux-thunk\n\n1. 在创建store的文件中（如Demon中的`./store/index.js`），在引入Redux时，引入`applyMiddleware`组件\n    ```diff\n    import { \n      createStore, \n    + applyMiddleware \n    } from 'redux';\n    + import thunk from 'redux-thunk'\n    ```\n\n2. 在调用`createStore()`创建store时，第一个参数填入`reducer`对象，第二个参数传入一个`applyMiddleware()`方法，~~这个方法的参数时一个数组，数组的内容即为要在store中使用的中间件列表（Redux DevTools实际也是一个中间件）~~。我们在此处调用`thunk`\n\n    ```diff\n    const store = createStore(\n      reducer,\n    + applyMiddleware(thunk)\n    );\n    ```\n\n3. 如果在此时还需要使用Redux DevTools，需要按照 [官方文档](https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup) 进行如下设置\n\n    ```diff\n    // 方案一 (不推荐)\n    import { \n      createStore, \n      applyMiddleware, \n    + compose \n    } from 'redux';\n    import thunk from 'redux-thunk'\n\n    + const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    + const store = createStore(reducer, /* preloadedState, */ composeEnhancers(\n    - const store = createStore(reducer, /* preloadedState, */ compose(\n        applyMiddleware(thunk)\n      ));\n    ```\n\n    ```diff\n    // 方案二（推荐）\n      import { \n        createStore, \n        applyMiddleware, \n    +   compose \n      } from 'redux';\n      import thunk from 'redux-thunk'\n\n    + const composeEnhancers =\n    +   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    +   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    + }) : compose;\n\n    + const enhancer = composeEnhancers(\n    +   applyMiddleware(thunk)\n    + );\n\n      const store = createStore(\n        reducer,\n    +   enhancer\n      );\n    ```\n\n4. 将异步方法转入`actionCreator.js`中编写。\n\n    我们在此模拟一个场景：当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项，我们可以把这个AJAX请求放入`actionCreator.js`中，编写一个方法名为`getTodoList`。我们再这个方法中需要做三件事：\n      1. 通过AJAX获取数据，并生成一个action对象。\n      2. 将数据通过store的`dispatch()`方法，将生成的action对象传递给store，让其处理数据。\n      3. 将方法暴露出去，提供给`TodoList.js`组件使用。\n\n    ```javascript\n    export const getTodoList = () => {\n    return (dispatch) => {\n        axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')\n          .then(res => {\n            const data = res.data;  // 获取数据\n            const action = {\n              type: INIT_LIST_ACTION,\n              data: data\n            };  // 生成action对象（要借助actionCreator已写好的方法）\n            dispatch(action);  // 向store传递action对象\n          })\n      }\n    }\n    ```\n\n    之后，我们在`TodoList.js`组件中引入该方法并且使用该方法\n    ```javascript\n    import { getTodoList } from './store/actionCreator.js'\n    ... ...\n    componentDidMount() {\n      const action = getTodoList();\n      store.dispatch(action);\n    }\n    ```\n    在此，我们调用`getTodoList()`，返回值是一个方法，而并非一个action对象，即`action`变量现在是一个方法。\n    \n    当执行代码`store.dispatch(action)`时，redux-thunk将其进行了一个处理，当检测到传入`dispatch()`方法的参数是一个方法而并非一个对象时，会在此时执行传入的方法，并且在该方法(也就是`action`)的参数位上，传入store提供的`dispatch()`方法，这样在`action`方法执行时，`action`方法内部就可以直接使用`dispatch()`方法。\n    \n    这就是为什么我们再`actionCreator.js`编写`getTodoList()`方法时，可以直接调用`dispatch()`方法的原因。\n\n    可以参考如下代码来理解redux-thunk在此处的操作（中间件操作原理）：\n    ```javascript\n    // 模拟原有的Store对象\n    var Store = function () {\n      // 挂载dispatch方法，只能处理对象\n      this.dispatch = (obj) => {\n        if (typeof obj === \"object\") {\n          // 处理对象\n          console.log(obj);\n        } else {\n          throw \"arguments error\";\n        }\n      }\n    }\n    ```\n\n    ```javascript\n    // 通过redux-thunk中间件封装后的Store对象\n    var Store = function () {\n      // 挂载dispatch方法，dispatch可以处理对象和函数\n      this.dispatch = (obj) => {\n        if (typeof obj === \"function\") {\n          // 如果传入的是一个方法，就把该方法执行，并且向方法内部再传入dispatch方法本身\n          obj(this.dispatch);\n        } else if (typeof obj === \"object\") {\n          // 如果传入的是一个对象，就直接处理对象\n          console.log(obj);\n        } else {\n          throw \"arguments error\";\n        }\n      }\n    }\n\n    // 模拟在actionCreator.js中创建的方法\n    var fun = function (dispatch) {\n      let action = {\n        type: \"fun\",\n        msg: \"dispatch carry by a function inner\"\n      }\n      dispatch(action)\n    }\n\n    var store = new Store();\n    // 向实例化的store对象中传入方法\n    store.dispatch(fun)\n    ```\n\n    运行结果：\n    ```\n    { type: 'fun', msg: 'dispatch carry by a function inner' }\n    ```\n    原理图解：\n\n    ![a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg)\n\n\n# 05.使用Redux-saga中间件使用入门\n\n## 初始化Redux-saga\n\n1. 更改目录结构\n    ```diff\n    /store \n      reducer.js\n      actionCreator.js\n      actionTypes.js\n      index.js\n    + saga.js\n    ```\n\n2. 在`./store/index.js`导入Redux-saga中间件（同时保持与Redux DevTools的兼容）\n    ```diff\n      import { createStore, applyMiddleware, compose } from 'redux'\n      import reducer from './reducer'\n    + import createSagaMiddleware from 'redux-saga'\n    + import TodoSagas from './saga.js'\n\n    + const sagaMiddleware = createSagaMiddleware()\n\n      const composeEnhancers =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n          window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          }) : compose;\n\n      const enhancer = composeEnhancers(\n    +   applyMiddleware(sagaMiddleware)\n      );\n\n      const store = createStore(\n        reducer,\n        enhancer\n      );\n\n    + sagaMiddleware.run(TodoSagas)\n\n      export default store;\n    ```\n\n3. 在`sagas.js`中创建一个初始化的Generator函数\n    ```javascript\n    import { takeEvery } from 'redux-saga/effects'\n    function* mySaga() {\n      ... ...\n    }\n    export default mySaga;\n    ```\n\n## 在项目中使用Redux-saga\n\n我们还借用之前的例子，当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项。\n\n我们先来讲解一下Redux-saga的原理：它会检查Store派发给Reducer的每个action，如果这个action代表的操作是期望执行一个异步函数，那么Redux-saga就会捕获这action，拿到`sagas.js`文件的业务代码中处理，进行一系列的异步操作，最后再生成一个action，交付给Reducer。\n\n![a71efaafly1g24leszo7yj20tu0e2q3v.jpg](http://img.cdn.esunr.xyz/markdown/a71efaafly1g24leszo7yj20tu0e2q3v.jpg)\n\n接下来进行一个列子的详细流程：\n\n1. 在 `actionTypes.js` 中创建一个actionType并导出，提供一个action的类型名\n    ```javascript\n    export const GET_INIT_LIST = 'get_init_list'\n    ```\n\n2. 在 `actionCreator.js` 中创建 `getInitList` 方法并导出，提供一个生成action对象的方法\n    ```javascript\n    export const getInitList = () => ({\n      type: GET_INIT_LIST\n    })\n    ```\n3. 在 `TodoList.js` 组件中调用 `getInitList` 方法生成一个action对象，提供给Redux-saga劫持\n    ```diff\n    + import { getInitList } from './store/actionCreator'\n    ... ...\n    componentDidMount() {\n    + const action = getInitList();\n      store.dispatch(action);\n    - axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')\n    -   .then(res => {\n    -     const data = res.data;\n    -     const action = initListAction(data);\n    -     store.dispatch(action);\n    -   })\n    }\n    ```\n\n4. 编写 `saga.js` 劫持 `type: 'get_init_list'` 的action，并进行异步操作，最终返回一个新的action交付给Reducer。\n    ```javascript\n    import { takeEvery, put } from 'redux-saga/effects' // 导入put方法\n    import axios from 'axios'\n    import { GET_INIT_LIST } from './actionTypes'\n    import { initListAction } from './actionCreator'\n\n    function* getInitList() {\n      const res = yield axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList');\n      const action = initListAction(res.data);\n      yield put(action); // Redux-saga使用put()方法来代替store.dispatch()方法\n    }\n\n    function* mySaga() {\n      yield takeEvery(GET_INIT_LIST, getInitList);  // 如果action的type为GET_INIT_LIST，就劫持这个action，并执行getInitList()方法\n    }\n\n    export default mySaga;\n    ```\n\n# 06.React-Redux的基本使用使用\n\n## 基本作用\nReact-Redux优化了组件中对store的调用方式，在传统的组件中，如果想要调用store则需要引入store并让store与当前组件的state做关联。而React-Redux，提供了一个 `<Provider></Provider>` 容器组件，可以将store作为容器组件的props传入组件，这样在 `<Provider>` 容器组件中的其他组件就可以获取store，而不需要重复调用。\n\n使用React-Redux基本步骤为：\n1. 在项目的index.js中（或其他组件中也可以）设置`<Provider>`容器\n2. 在`<Provider>`容器的组件代码中，设置store与该组件props的映射关系，以及映射相关的disoatch操作到组件props中。\n3. 连接组件与state\n\n## 具体流程\n\n文件目录：\n```\n/src\n+- index.js\n+- TodoList.js\n+- store\n   +- index.js\n   +- reducer.js\n```\n\n1. `index.js` 中引入store和react-redux，并设置`<Provider>`容器组件：\n    ```diff\n    // index.js\n\n      import React from 'react';\n    + import ReactDOM from 'react-dom';\n    + import store from './store'\n\n      import TodoList from './06-3.React-Redux/TodoList'\n    + import { Provider } from 'react-redux'\n\n    + const App = (\n    +   <Provider store={store}>\n          <TodoList></TodoList>\n    +   </Provider>\n    + )\n\n    - ReactDOM.render(<App />, document.getElementById('root'));\n    + ReactDOM.render(App, document.getElementById('root'));\n    ```\n2. 在`TodoList.js`组件中配置关于store和dispatch方法的映射：\n    \n    首先要引入react-redux的connect方法，`connect()`方法用来建设映射关系，它包含两个参数，第一个参数为映射的state相关设置，第二个为映射的dispatch相关设置，设置好之后，就可以将store的数据和有关于dispatch的操作挂载到组件的props属性中。\n    ```javascript\n    // TodoList.js\n\n    import React, { Component } from 'react'\n    import { connect } from 'react-redux'\n    ... ...\n    class TodoList extends Component {\n      ... ...\n    }\n    // 映射store中的数据到组件中的props\n    const mapStateToProps = (store) => {\n      return {\n        // 把store中inputValue的值映射到组件的props中\n        inputValue: store.inputValue\n      }\n    }\n    // 将有关于dispatch操作相关的方法传入props中\n    const mapDispatchToProps = (dispatch) => {\n      return {\n        handelInputChange(e) {\n          const action = {\n            type: 'change_input_value',\n            value: e.target.value\n          }\n          dispatch(action)\n        }\n      }\n    }\n    // 核心API：connect 如果不需要connect()中的某个参数，则填写为null\n    export default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n    ```\n    当我们在组件内部使用传入的store的值时，可以直接调用组件的props属性，如当我们要取出刚才挂载到props上的\n    ```html\n    <input value={this.props.inputValue} onChange= {this.props.handelInputChange} />\n    ```\n3. 在`reducer.js`中编写处理store数据的业务逻辑\n\n","slug":"React学习笔记04：Redux实战","published":1,"updated":"2019-11-09T13:55:20.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfe003s3w4u1pnwc19s","content":"<h1 id=\"01-UI组件与容器组件\"><a href=\"#01-UI组件与容器组件\" class=\"headerlink\" title=\"01.UI组件与容器组件\"></a>01.UI组件与容器组件</h1><p>UI组件负责页面渲染，容器组件负责页面逻辑</p>\n<p>创建UI组件的核心思想就是把原组件中的<code>render</code>函数中的内容抽离出去为一个子组件，在父组件的<code>render</code>函数中只引入这个子组件。</p>\n<p>如：我们把TodoList项目中的render部分抽离出去后，文件结构变为</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  index.js</span><br><span class=\"line\">  TodoList.js</span><br><span class=\"line\"><span class=\"addition\">+ TodoListUI.js</span></span><br><span class=\"line\">  /store</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoListUI <span class=\"keyword\">from</span> <span class=\"string\">'./TodoListUI'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;TodoListUI /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoListUI.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, List, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// JSX中的DOM树</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了能使<code>TodoListUI.js</code>中的方法和数据正常使用，在<code>TodoList.js</code>中调用子组件的时候需要将子组件中可能用到的所有方法和数据都传入子组件，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoListUI</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    inputValue=&#123;this.state.inputValue&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    list=&#123;this.state.list&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleInputChange=&#123;this.handleInputChange&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleButtonClick=&#123;this.handleButtonClick&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleItemDelete=&#123;this.handleItemDelete&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"02-无状态组件\"><a href=\"#02-无状态组件\" class=\"headerlink\" title=\"02.无状态组件\"></a>02.无状态组件</h1><p>当我们设计一个UI组件，如果这个组件只有render函数，可以将其转化为一个无状态组件，可以优化其性能，具体写法为使用一个变量存放一个函数，函数的参数为<code>props</code>，函数的返回值即为JSX的Virtual DOM内容。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> NoStatusComponent = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;Virtual DOM here&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">return NoStatusComponent</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"04-使用Redux-thunk中间件实现ajax数据请求\"><a href=\"#04-使用Redux-thunk中间件实现ajax数据请求\" class=\"headerlink\" title=\"04.使用Redux-thunk中间件实现ajax数据请求\"></a>04.使用Redux-thunk中间件实现ajax数据请求</h1><p>Redux-thunk可以让<code>actionCreator.js</code>中返回一个方法（默认actionCreator只能返回一个action对象），可以方便我们把异步操作抽离到<code>actionCreator.js</code>文件中。</p>\n<h2 id=\"使用Redux中间件Redux-thunk\"><a href=\"#使用Redux中间件Redux-thunk\" class=\"headerlink\" title=\"使用Redux中间件Redux-thunk\"></a>使用Redux中间件Redux-thunk</h2><ol>\n<li><p>在创建store的文件中（如Demon中的<code>./store/index.js</code>），在引入Redux时，引入<code>applyMiddleware</code>组件</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; </span><br><span class=\"line\">  createStore, </span><br><span class=\"line\"><span class=\"addition\">+ applyMiddleware </span></span><br><span class=\"line\">&#125; from 'redux';</span><br><span class=\"line\"><span class=\"addition\">+ import thunk from 'redux-thunk'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调用<code>createStore()</code>创建store时，第一个参数填入<code>reducer</code>对象，第二个参数传入一个<code>applyMiddleware()</code>方法，<del>这个方法的参数时一个数组，数组的内容即为要在store中使用的中间件列表（Redux DevTools实际也是一个中间件）</del>。我们在此处调用<code>thunk</code></p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\"><span class=\"addition\">+ applyMiddleware(thunk)</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果在此时还需要使用Redux DevTools，需要按照 <a href=\"https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup\" target=\"_blank\" rel=\"noopener\">官方文档</a> 进行如下设置</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方案一 (不推荐)</span><br><span class=\"line\">import &#123; </span><br><span class=\"line\">  createStore, </span><br><span class=\"line\">  applyMiddleware, </span><br><span class=\"line\"><span class=\"addition\">+ compose </span></span><br><span class=\"line\">&#125; from 'redux';</span><br><span class=\"line\">import thunk from 'redux-thunk'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span></span><br><span class=\"line\"><span class=\"addition\">+ const store = createStore(reducer, /* preloadedState, */ composeEnhancers(</span></span><br><span class=\"line\"><span class=\"deletion\">- const store = createStore(reducer, /* preloadedState, */ compose(</span></span><br><span class=\"line\">    applyMiddleware(thunk)</span><br><span class=\"line\">  ));</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方案二（推荐）</span><br><span class=\"line\">  import &#123; </span><br><span class=\"line\">    createStore, </span><br><span class=\"line\">    applyMiddleware, </span><br><span class=\"line\"><span class=\"addition\">+   compose </span></span><br><span class=\"line\">  &#125; from 'redux';</span><br><span class=\"line\">  import thunk from 'redux-thunk'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const composeEnhancers =</span></span><br><span class=\"line\"><span class=\"addition\">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span></span><br><span class=\"line\"><span class=\"addition\">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;) : compose;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const enhancer = composeEnhancers(</span></span><br><span class=\"line\"><span class=\"addition\">+   applyMiddleware(thunk)</span></span><br><span class=\"line\"><span class=\"addition\">+ );</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const store = createStore(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\"><span class=\"addition\">+   enhancer</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将异步方法转入<code>actionCreator.js</code>中编写。</p>\n<p> 我们在此模拟一个场景：当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项，我们可以把这个AJAX请求放入<code>actionCreator.js</code>中，编写一个方法名为<code>getTodoList</code>。我们再这个方法中需要做三件事：</p>\n<ol>\n<li><p>通过AJAX获取数据，并生成一个action对象。</p>\n</li>\n<li><p>将数据通过store的<code>dispatch()</code>方法，将生成的action对象传递给store，让其处理数据。</p>\n</li>\n<li><p>将方法暴露出去，提供给<code>TodoList.js</code>组件使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getTodoList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = res.data;  <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">          type: INIT_LIST_ACTION,</span><br><span class=\"line\">          data: data</span><br><span class=\"line\">        &#125;;  <span class=\"comment\">// 生成action对象（要借助actionCreator已写好的方法）</span></span><br><span class=\"line\">        dispatch(action);  <span class=\"comment\">// 向store传递action对象</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们在<code>TodoList.js</code>组件中引入该方法并且使用该方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getTodoList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store/actionCreator.js'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = getTodoList();</span><br><span class=\"line\">  store.dispatch(action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此，我们调用<code>getTodoList()</code>，返回值是一个方法，而并非一个action对象，即<code>action</code>变量现在是一个方法。</p>\n<p>当执行代码<code>store.dispatch(action)</code>时，redux-thunk将其进行了一个处理，当检测到传入<code>dispatch()</code>方法的参数是一个方法而并非一个对象时，会在此时执行传入的方法，并且在该方法(也就是<code>action</code>)的参数位上，传入store提供的<code>dispatch()</code>方法，这样在<code>action</code>方法执行时，<code>action</code>方法内部就可以直接使用<code>dispatch()</code>方法。</p>\n<p>这就是为什么我们再<code>actionCreator.js</code>编写<code>getTodoList()</code>方法时，可以直接调用<code>dispatch()</code>方法的原因。</p>\n<p>可以参考如下代码来理解redux-thunk在此处的操作（中间件操作原理）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟原有的Store对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Store = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 挂载dispatch方法，只能处理对象</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.dispatch = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 处理对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"arguments error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过redux-thunk中间件封装后的Store对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Store = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 挂载dispatch方法，dispatch可以处理对象和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.dispatch = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的是一个方法，就把该方法执行，并且向方法内部再传入dispatch方法本身</span></span><br><span class=\"line\">      obj(<span class=\"keyword\">this</span>.dispatch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的是一个对象，就直接处理对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"arguments error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟在actionCreator.js中创建的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> action = &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"fun\"</span>,</span><br><span class=\"line\">    msg: <span class=\"string\">\"dispatch carry by a function inner\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Store();</span><br><span class=\"line\"><span class=\"comment\">// 向实例化的store对象中传入方法</span></span><br><span class=\"line\">store.dispatch(fun)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; type: &apos;fun&apos;, msg: &apos;dispatch carry by a function inner&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>原理图解：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg\" alt=\"a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"05-使用Redux-saga中间件使用入门\"><a href=\"#05-使用Redux-saga中间件使用入门\" class=\"headerlink\" title=\"05.使用Redux-saga中间件使用入门\"></a>05.使用Redux-saga中间件使用入门</h1><h2 id=\"初始化Redux-saga\"><a href=\"#初始化Redux-saga\" class=\"headerlink\" title=\"初始化Redux-saga\"></a>初始化Redux-saga</h2><ol>\n<li><p>更改目录结构</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/store </span><br><span class=\"line\">  reducer.js</span><br><span class=\"line\">  actionCreator.js</span><br><span class=\"line\">  actionTypes.js</span><br><span class=\"line\">  index.js</span><br><span class=\"line\"><span class=\"addition\">+ saga.js</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>./store/index.js</code>导入Redux-saga中间件（同时保持与Redux DevTools的兼容）</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import &#123; createStore, applyMiddleware, compose &#125; from 'redux'</span><br><span class=\"line\">  import reducer from './reducer'</span><br><span class=\"line\"><span class=\"addition\">+ import createSagaMiddleware from 'redux-saga'</span></span><br><span class=\"line\"><span class=\"addition\">+ import TodoSagas from './saga.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const sagaMiddleware = createSagaMiddleware()</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const composeEnhancers =</span><br><span class=\"line\">    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span><br><span class=\"line\">      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span><br><span class=\"line\">      &#125;) : compose;</span><br><span class=\"line\"></span><br><span class=\"line\">  const enhancer = composeEnhancers(</span><br><span class=\"line\"><span class=\"addition\">+   applyMiddleware(sagaMiddleware)</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const store = createStore(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\">    enhancer</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ sagaMiddleware.run(TodoSagas)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  export default store;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>sagas.js</code>中创建一个初始化的Generator函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"在项目中使用Redux-saga\"><a href=\"#在项目中使用Redux-saga\" class=\"headerlink\" title=\"在项目中使用Redux-saga\"></a>在项目中使用Redux-saga</h2><p>我们还借用之前的例子，当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项。</p>\n<p>我们先来讲解一下Redux-saga的原理：它会检查Store派发给Reducer的每个action，如果这个action代表的操作是期望执行一个异步函数，那么Redux-saga就会捕获这action，拿到<code>sagas.js</code>文件的业务代码中处理，进行一系列的异步操作，最后再生成一个action，交付给Reducer。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g24leszo7yj20tu0e2q3v.jpg\" alt=\"a71efaafly1g24leszo7yj20tu0e2q3v.jpg\"></p>\n<p>接下来进行一个列子的详细流程：</p>\n<ol>\n<li><p>在 <code>actionTypes.js</code> 中创建一个actionType并导出，提供一个action的类型名</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> GET_INIT_LIST = <span class=\"string\">'get_init_list'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>actionCreator.js</code> 中创建 <code>getInitList</code> 方法并导出，提供一个生成action对象的方法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInitList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  type: GET_INIT_LIST</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>TodoList.js</code> 组件中调用 <code>getInitList</code> 方法生成一个action对象，提供给Redux-saga劫持</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import &#123; getInitList &#125; from './store/actionCreator'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\"><span class=\"addition\">+ const action = getInitList();</span></span><br><span class=\"line\">  store.dispatch(action);</span><br><span class=\"line\"><span class=\"deletion\">- axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')</span></span><br><span class=\"line\"><span class=\"deletion\">-   .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     const data = res.data;</span></span><br><span class=\"line\"><span class=\"deletion\">-     const action = initListAction(data);</span></span><br><span class=\"line\"><span class=\"deletion\">-     store.dispatch(action);</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写 <code>saga.js</code> 劫持 <code>type: &#39;get_init_list&#39;</code> 的action，并进行异步操作，最终返回一个新的action交付给Reducer。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span> <span class=\"comment\">// 导入put方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; GET_INIT_LIST &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initListAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionCreator'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getInitList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> axios.get(<span class=\"string\">'https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = initListAction(res.data);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(action); <span class=\"comment\">// Redux-saga使用put()方法来代替store.dispatch()方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(GET_INIT_LIST, getInitList);  <span class=\"comment\">// 如果action的type为GET_INIT_LIST，就劫持这个action，并执行getInitList()方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"06-React-Redux的基本使用使用\"><a href=\"#06-React-Redux的基本使用使用\" class=\"headerlink\" title=\"06.React-Redux的基本使用使用\"></a>06.React-Redux的基本使用使用</h1><h2 id=\"基本作用\"><a href=\"#基本作用\" class=\"headerlink\" title=\"基本作用\"></a>基本作用</h2><p>React-Redux优化了组件中对store的调用方式，在传统的组件中，如果想要调用store则需要引入store并让store与当前组件的state做关联。而React-Redux，提供了一个 <code>&lt;Provider&gt;&lt;/Provider&gt;</code> 容器组件，可以将store作为容器组件的props传入组件，这样在 <code>&lt;Provider&gt;</code> 容器组件中的其他组件就可以获取store，而不需要重复调用。</p>\n<p>使用React-Redux基本步骤为：</p>\n<ol>\n<li>在项目的index.js中（或其他组件中也可以）设置<code>&lt;Provider&gt;</code>容器</li>\n<li>在<code>&lt;Provider&gt;</code>容器的组件代码中，设置store与该组件props的映射关系，以及映射相关的disoatch操作到组件props中。</li>\n<li>连接组件与state</li>\n</ol>\n<h2 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h2><p>文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src</span><br><span class=\"line\">+- index.js</span><br><span class=\"line\">+- TodoList.js</span><br><span class=\"line\">+- store</span><br><span class=\"line\">   +- index.js</span><br><span class=\"line\">   +- reducer.js</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>index.js</code> 中引入store和react-redux，并设置<code>&lt;Provider&gt;</code>容器组件：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.js</span><br><span class=\"line\"></span><br><span class=\"line\">  import React from 'react';</span><br><span class=\"line\"><span class=\"addition\">+ import ReactDOM from 'react-dom';</span></span><br><span class=\"line\"><span class=\"addition\">+ import store from './store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  import TodoList from './06-3.React-Redux/TodoList'</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; Provider &#125; from 'react-redux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const App = (</span></span><br><span class=\"line\"><span class=\"addition\">+   &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class=\"line\">      &lt;TodoList&gt;&lt;/TodoList&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</span></span><br><span class=\"line\"><span class=\"addition\">+ ReactDOM.render(App, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在<code>TodoList.js</code>组件中配置关于store和dispatch方法的映射：</p>\n<p> 首先要引入react-redux的connect方法，<code>connect()</code>方法用来建设映射关系，它包含两个参数，第一个参数为映射的state相关设置，第二个为映射的dispatch相关设置，设置好之后，就可以将store的数据和有关于dispatch的操作挂载到组件的props属性中。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 映射store中的数据到组件中的props</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\">(<span class=\"params\">store</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把store中inputValue的值映射到组件的props中</span></span><br><span class=\"line\">    inputValue: store.inputValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将有关于dispatch操作相关的方法传入props中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    handelInputChange(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'change_input_value'</span>,</span><br><span class=\"line\">        value: e.target.value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 核心API：connect 如果不需要connect()中的某个参数，则填写为null</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure>\n<p> 当我们在组件内部使用传入的store的值时，可以直接调用组件的props属性，如当我们要取出刚才挂载到props上的</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.props.inputValue&#125;</span> <span class=\"attr\">onChange</span>= <span class=\"string\">&#123;this.props.handelInputChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在<code>reducer.js</code>中编写处理store数据的业务逻辑</p>\n</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"01-UI组件与容器组件\"><a href=\"#01-UI组件与容器组件\" class=\"headerlink\" title=\"01.UI组件与容器组件\"></a>01.UI组件与容器组件</h1><p>UI组件负责页面渲染，容器组件负责页面逻辑</p>\n<p>创建UI组件的核心思想就是把原组件中的<code>render</code>函数中的内容抽离出去为一个子组件，在父组件的<code>render</code>函数中只引入这个子组件。</p>\n<p>如：我们把TodoList项目中的render部分抽离出去后，文件结构变为</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  index.js</span><br><span class=\"line\">  TodoList.js</span><br><span class=\"line\"><span class=\"addition\">+ TodoListUI.js</span></span><br><span class=\"line\">  /store</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoListUI <span class=\"keyword\">from</span> <span class=\"string\">'./TodoListUI'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;TodoListUI /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoListUI.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, List, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// JSX中的DOM树</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了能使<code>TodoListUI.js</code>中的方法和数据正常使用，在<code>TodoList.js</code>中调用子组件的时候需要将子组件中可能用到的所有方法和数据都传入子组件，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoListUI</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    inputValue=&#123;this.state.inputValue&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    list=&#123;this.state.list&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleInputChange=&#123;this.handleInputChange&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleButtonClick=&#123;this.handleButtonClick&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    handleItemDelete=&#123;this.handleItemDelete&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"02-无状态组件\"><a href=\"#02-无状态组件\" class=\"headerlink\" title=\"02.无状态组件\"></a>02.无状态组件</h1><p>当我们设计一个UI组件，如果这个组件只有render函数，可以将其转化为一个无状态组件，可以优化其性能，具体写法为使用一个变量存放一个函数，函数的参数为<code>props</code>，函数的返回值即为JSX的Virtual DOM内容。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> NoStatusComponent = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;Virtual DOM here&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">return NoStatusComponent</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"04-使用Redux-thunk中间件实现ajax数据请求\"><a href=\"#04-使用Redux-thunk中间件实现ajax数据请求\" class=\"headerlink\" title=\"04.使用Redux-thunk中间件实现ajax数据请求\"></a>04.使用Redux-thunk中间件实现ajax数据请求</h1><p>Redux-thunk可以让<code>actionCreator.js</code>中返回一个方法（默认actionCreator只能返回一个action对象），可以方便我们把异步操作抽离到<code>actionCreator.js</code>文件中。</p>\n<h2 id=\"使用Redux中间件Redux-thunk\"><a href=\"#使用Redux中间件Redux-thunk\" class=\"headerlink\" title=\"使用Redux中间件Redux-thunk\"></a>使用Redux中间件Redux-thunk</h2><ol>\n<li><p>在创建store的文件中（如Demon中的<code>./store/index.js</code>），在引入Redux时，引入<code>applyMiddleware</code>组件</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; </span><br><span class=\"line\">  createStore, </span><br><span class=\"line\"><span class=\"addition\">+ applyMiddleware </span></span><br><span class=\"line\">&#125; from 'redux';</span><br><span class=\"line\"><span class=\"addition\">+ import thunk from 'redux-thunk'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调用<code>createStore()</code>创建store时，第一个参数填入<code>reducer</code>对象，第二个参数传入一个<code>applyMiddleware()</code>方法，<del>这个方法的参数时一个数组，数组的内容即为要在store中使用的中间件列表（Redux DevTools实际也是一个中间件）</del>。我们在此处调用<code>thunk</code></p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = createStore(</span><br><span class=\"line\">  reducer,</span><br><span class=\"line\"><span class=\"addition\">+ applyMiddleware(thunk)</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果在此时还需要使用Redux DevTools，需要按照 <a href=\"https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup\" target=\"_blank\" rel=\"noopener\">官方文档</a> 进行如下设置</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方案一 (不推荐)</span><br><span class=\"line\">import &#123; </span><br><span class=\"line\">  createStore, </span><br><span class=\"line\">  applyMiddleware, </span><br><span class=\"line\"><span class=\"addition\">+ compose </span></span><br><span class=\"line\">&#125; from 'redux';</span><br><span class=\"line\">import thunk from 'redux-thunk'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span></span><br><span class=\"line\"><span class=\"addition\">+ const store = createStore(reducer, /* preloadedState, */ composeEnhancers(</span></span><br><span class=\"line\"><span class=\"deletion\">- const store = createStore(reducer, /* preloadedState, */ compose(</span></span><br><span class=\"line\">    applyMiddleware(thunk)</span><br><span class=\"line\">  ));</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方案二（推荐）</span><br><span class=\"line\">  import &#123; </span><br><span class=\"line\">    createStore, </span><br><span class=\"line\">    applyMiddleware, </span><br><span class=\"line\"><span class=\"addition\">+   compose </span></span><br><span class=\"line\">  &#125; from 'redux';</span><br><span class=\"line\">  import thunk from 'redux-thunk'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const composeEnhancers =</span></span><br><span class=\"line\"><span class=\"addition\">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span></span><br><span class=\"line\"><span class=\"addition\">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;) : compose;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const enhancer = composeEnhancers(</span></span><br><span class=\"line\"><span class=\"addition\">+   applyMiddleware(thunk)</span></span><br><span class=\"line\"><span class=\"addition\">+ );</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const store = createStore(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\"><span class=\"addition\">+   enhancer</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将异步方法转入<code>actionCreator.js</code>中编写。</p>\n<p> 我们在此模拟一个场景：当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项，我们可以把这个AJAX请求放入<code>actionCreator.js</code>中，编写一个方法名为<code>getTodoList</code>。我们再这个方法中需要做三件事：</p>\n<ol>\n<li><p>通过AJAX获取数据，并生成一个action对象。</p>\n</li>\n<li><p>将数据通过store的<code>dispatch()</code>方法，将生成的action对象传递给store，让其处理数据。</p>\n</li>\n<li><p>将方法暴露出去，提供给<code>TodoList.js</code>组件使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getTodoList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = res.data;  <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">          type: INIT_LIST_ACTION,</span><br><span class=\"line\">          data: data</span><br><span class=\"line\">        &#125;;  <span class=\"comment\">// 生成action对象（要借助actionCreator已写好的方法）</span></span><br><span class=\"line\">        dispatch(action);  <span class=\"comment\">// 向store传递action对象</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们在<code>TodoList.js</code>组件中引入该方法并且使用该方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getTodoList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store/actionCreator.js'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = getTodoList();</span><br><span class=\"line\">  store.dispatch(action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此，我们调用<code>getTodoList()</code>，返回值是一个方法，而并非一个action对象，即<code>action</code>变量现在是一个方法。</p>\n<p>当执行代码<code>store.dispatch(action)</code>时，redux-thunk将其进行了一个处理，当检测到传入<code>dispatch()</code>方法的参数是一个方法而并非一个对象时，会在此时执行传入的方法，并且在该方法(也就是<code>action</code>)的参数位上，传入store提供的<code>dispatch()</code>方法，这样在<code>action</code>方法执行时，<code>action</code>方法内部就可以直接使用<code>dispatch()</code>方法。</p>\n<p>这就是为什么我们再<code>actionCreator.js</code>编写<code>getTodoList()</code>方法时，可以直接调用<code>dispatch()</code>方法的原因。</p>\n<p>可以参考如下代码来理解redux-thunk在此处的操作（中间件操作原理）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟原有的Store对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Store = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 挂载dispatch方法，只能处理对象</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.dispatch = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 处理对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"arguments error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过redux-thunk中间件封装后的Store对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Store = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 挂载dispatch方法，dispatch可以处理对象和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.dispatch = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的是一个方法，就把该方法执行，并且向方法内部再传入dispatch方法本身</span></span><br><span class=\"line\">      obj(<span class=\"keyword\">this</span>.dispatch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的是一个对象，就直接处理对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"arguments error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟在actionCreator.js中创建的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> action = &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"fun\"</span>,</span><br><span class=\"line\">    msg: <span class=\"string\">\"dispatch carry by a function inner\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Store();</span><br><span class=\"line\"><span class=\"comment\">// 向实例化的store对象中传入方法</span></span><br><span class=\"line\">store.dispatch(fun)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; type: &apos;fun&apos;, msg: &apos;dispatch carry by a function inner&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>原理图解：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg\" alt=\"a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"05-使用Redux-saga中间件使用入门\"><a href=\"#05-使用Redux-saga中间件使用入门\" class=\"headerlink\" title=\"05.使用Redux-saga中间件使用入门\"></a>05.使用Redux-saga中间件使用入门</h1><h2 id=\"初始化Redux-saga\"><a href=\"#初始化Redux-saga\" class=\"headerlink\" title=\"初始化Redux-saga\"></a>初始化Redux-saga</h2><ol>\n<li><p>更改目录结构</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/store </span><br><span class=\"line\">  reducer.js</span><br><span class=\"line\">  actionCreator.js</span><br><span class=\"line\">  actionTypes.js</span><br><span class=\"line\">  index.js</span><br><span class=\"line\"><span class=\"addition\">+ saga.js</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>./store/index.js</code>导入Redux-saga中间件（同时保持与Redux DevTools的兼容）</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import &#123; createStore, applyMiddleware, compose &#125; from 'redux'</span><br><span class=\"line\">  import reducer from './reducer'</span><br><span class=\"line\"><span class=\"addition\">+ import createSagaMiddleware from 'redux-saga'</span></span><br><span class=\"line\"><span class=\"addition\">+ import TodoSagas from './saga.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const sagaMiddleware = createSagaMiddleware()</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const composeEnhancers =</span><br><span class=\"line\">    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span><br><span class=\"line\">      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span><br><span class=\"line\">      &#125;) : compose;</span><br><span class=\"line\"></span><br><span class=\"line\">  const enhancer = composeEnhancers(</span><br><span class=\"line\"><span class=\"addition\">+   applyMiddleware(sagaMiddleware)</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const store = createStore(</span><br><span class=\"line\">    reducer,</span><br><span class=\"line\">    enhancer</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ sagaMiddleware.run(TodoSagas)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  export default store;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>sagas.js</code>中创建一个初始化的Generator函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"在项目中使用Redux-saga\"><a href=\"#在项目中使用Redux-saga\" class=\"headerlink\" title=\"在项目中使用Redux-saga\"></a>在项目中使用Redux-saga</h2><p>我们还借用之前的例子，当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项。</p>\n<p>我们先来讲解一下Redux-saga的原理：它会检查Store派发给Reducer的每个action，如果这个action代表的操作是期望执行一个异步函数，那么Redux-saga就会捕获这action，拿到<code>sagas.js</code>文件的业务代码中处理，进行一系列的异步操作，最后再生成一个action，交付给Reducer。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/a71efaafly1g24leszo7yj20tu0e2q3v.jpg\" alt=\"a71efaafly1g24leszo7yj20tu0e2q3v.jpg\"></p>\n<p>接下来进行一个列子的详细流程：</p>\n<ol>\n<li><p>在 <code>actionTypes.js</code> 中创建一个actionType并导出，提供一个action的类型名</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> GET_INIT_LIST = <span class=\"string\">'get_init_list'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>actionCreator.js</code> 中创建 <code>getInitList</code> 方法并导出，提供一个生成action对象的方法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInitList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  type: GET_INIT_LIST</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>TodoList.js</code> 组件中调用 <code>getInitList</code> 方法生成一个action对象，提供给Redux-saga劫持</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ import &#123; getInitList &#125; from './store/actionCreator'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\"><span class=\"addition\">+ const action = getInitList();</span></span><br><span class=\"line\">  store.dispatch(action);</span><br><span class=\"line\"><span class=\"deletion\">- axios.get('https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList')</span></span><br><span class=\"line\"><span class=\"deletion\">-   .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     const data = res.data;</span></span><br><span class=\"line\"><span class=\"deletion\">-     const action = initListAction(data);</span></span><br><span class=\"line\"><span class=\"deletion\">-     store.dispatch(action);</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写 <code>saga.js</code> 劫持 <code>type: &#39;get_init_list&#39;</code> 的action，并进行异步操作，最终返回一个新的action交付给Reducer。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span> <span class=\"comment\">// 导入put方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; GET_INIT_LIST &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initListAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actionCreator'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getInitList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> axios.get(<span class=\"string\">'https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = initListAction(res.data);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(action); <span class=\"comment\">// Redux-saga使用put()方法来代替store.dispatch()方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(GET_INIT_LIST, getInitList);  <span class=\"comment\">// 如果action的type为GET_INIT_LIST，就劫持这个action，并执行getInitList()方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"06-React-Redux的基本使用使用\"><a href=\"#06-React-Redux的基本使用使用\" class=\"headerlink\" title=\"06.React-Redux的基本使用使用\"></a>06.React-Redux的基本使用使用</h1><h2 id=\"基本作用\"><a href=\"#基本作用\" class=\"headerlink\" title=\"基本作用\"></a>基本作用</h2><p>React-Redux优化了组件中对store的调用方式，在传统的组件中，如果想要调用store则需要引入store并让store与当前组件的state做关联。而React-Redux，提供了一个 <code>&lt;Provider&gt;&lt;/Provider&gt;</code> 容器组件，可以将store作为容器组件的props传入组件，这样在 <code>&lt;Provider&gt;</code> 容器组件中的其他组件就可以获取store，而不需要重复调用。</p>\n<p>使用React-Redux基本步骤为：</p>\n<ol>\n<li>在项目的index.js中（或其他组件中也可以）设置<code>&lt;Provider&gt;</code>容器</li>\n<li>在<code>&lt;Provider&gt;</code>容器的组件代码中，设置store与该组件props的映射关系，以及映射相关的disoatch操作到组件props中。</li>\n<li>连接组件与state</li>\n</ol>\n<h2 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h2><p>文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src</span><br><span class=\"line\">+- index.js</span><br><span class=\"line\">+- TodoList.js</span><br><span class=\"line\">+- store</span><br><span class=\"line\">   +- index.js</span><br><span class=\"line\">   +- reducer.js</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>index.js</code> 中引入store和react-redux，并设置<code>&lt;Provider&gt;</code>容器组件：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.js</span><br><span class=\"line\"></span><br><span class=\"line\">  import React from 'react';</span><br><span class=\"line\"><span class=\"addition\">+ import ReactDOM from 'react-dom';</span></span><br><span class=\"line\"><span class=\"addition\">+ import store from './store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  import TodoList from './06-3.React-Redux/TodoList'</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; Provider &#125; from 'react-redux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ const App = (</span></span><br><span class=\"line\"><span class=\"addition\">+   &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class=\"line\">      &lt;TodoList&gt;&lt;/TodoList&gt;</span><br><span class=\"line\"><span class=\"addition\">+   &lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</span></span><br><span class=\"line\"><span class=\"addition\">+ ReactDOM.render(App, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在<code>TodoList.js</code>组件中配置关于store和dispatch方法的映射：</p>\n<p> 首先要引入react-redux的connect方法，<code>connect()</code>方法用来建设映射关系，它包含两个参数，第一个参数为映射的state相关设置，第二个为映射的dispatch相关设置，设置好之后，就可以将store的数据和有关于dispatch的操作挂载到组件的props属性中。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoList.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 映射store中的数据到组件中的props</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\">(<span class=\"params\">store</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把store中inputValue的值映射到组件的props中</span></span><br><span class=\"line\">    inputValue: store.inputValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将有关于dispatch操作相关的方法传入props中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    handelInputChange(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'change_input_value'</span>,</span><br><span class=\"line\">        value: e.target.value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 核心API：connect 如果不需要connect()中的某个参数，则填写为null</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure>\n<p> 当我们在组件内部使用传入的store的值时，可以直接调用组件的props属性，如当我们要取出刚才挂载到props上的</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.props.inputValue&#125;</span> <span class=\"attr\">onChange</span>= <span class=\"string\">&#123;this.props.handelInputChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在<code>reducer.js</code>中编写处理store数据的业务逻辑</p>\n</li>\n</ol>\n"},{"title":"React学习笔记05：项目实战（一）","date":"2019-05-25T14:09:45.000Z","_content":"[Githu源代码](https://github.com/EsunR/React-Study/tree/master/07-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AHeader%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91)\n\n# 1.使用styled-components管理样式\n\n如果在组件文件中引入一个css文件，那么这个css文件会在全局中生效，也就是说会造成该组件的样式被应用到其他组件上，这时候需要使用 styled-components 来帮助我们管理样式\n\n## 1.1 准备环境\n1. 安装\n    > yarn add styled-components\n\n2. 更改`style.css`为`style.js`并引入`index.js`\n    ```diff\n    // index.js\n    - import './style.css';\n    + import './style.js';\n    ```\n\n## 1.2 使用流程\n\n1. 创建`style.js`，引入`styled-components`\n    ```javascript\n    import styled from '../../../node_modules/styled-components';\n    ```\n2. 编写带有样式的组件容器\n    ```javascript\n    export const [StyleConponentName] = styled.[TagName]`\n      [Style]: [Value]\n    `\n    ```\n    如：\n    ```javascript\n    export const Nav = styled.div`\n      width: 960px;\n    `\n    ```\n\n3. 在组件中调用样式容器\n    ```javascript\n    import { [StyleConponentName] } from './style.js'\n    ```\n    ```html\n    <StyleConponentName>Conetne Text Here</StyleConponentName>\n    ```\n\n## 1.3 全局样式的使用\n\nstyled-components 默认只应用于单个组件的样式，但是通过其提供的 `createGlobalStyle` 方法可以创建全局样式，我们在此以引入字体样式为例，在字体所在的文件夹中创建一个 `iconfont.js`\n\n```javascript\n// iconfont-.js\nimport { createGlobalStyle } from 'styled-components';\nexport const GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: \"iconfont\";\n    src: url('./iconfont.eot?t=1558516833762'); /* IE9 */\n    ... ...\n  }\n  .iconfont {\n    font-family: \"iconfont\"!important;\n    font-size: 16px;\n    font-style: normal;\n  }\n`\n```\n\n之后将 `iconfont.js` 导入到 `App.js` 中应用于全局：\n\n```diff\n  import React, { Component } from 'react'\n  ... ...\n+ import { GlobalStyle } from './statics/icon-font/iconfont'\n\n\n  class App extends Component {\n    render() {\n      return (\n        <Provider store={store}>\n+         <GlobalStyle></GlobalStyle>\n          ... ...\n        </Provider>\n      );\n    }\n  }\n\n  export default App;\n```\n\n在此要注意的是，全局样式 `<GlobalStyle></GlobalStyle>` 必须引入到渲染的根节点中，即与组件同级，不能在其内部添加任何组件。\n\n## 1.4 子级样式的使用\n\n如果创建的样式组件需要通过className来判断样式，则使用 `&.className{...}` 来编写样式，如：\n\n```html\n<!-- jsx -->\n<NavItem className=\"active\">Login</NavItem>\n```\n\n```javascript\n// style.js\nexport const NavItem = styled.div`\n  [Style]: [Value];\n  &.className: {\n    [Style]: [Value];\n  }\n```\n\n\n\n\n# 2. 使用combineReducers完成对数据的拆分管理\n\nReducer主要负责对action的判断和数据的处理以及初始化工作，假如我们把所有组件的操作都放到一个`reducer.js`文件中去处理，那么可能就会导致代码过长，所以Redux提供了一个 `combineReducers()` API可以让我们把Reducer拆分到每个组件中，再合并到主要的Reducer文件中。\n\n目录结构：\n```\n/src\n+-- /store\n+   +-- index.js\n+   +-- reducer.js\n+\n+-- /common\n+   +-- /header\n+       +-- index.js\n+       +-- style.js\n+       +-- /store\n+           +-- index.js\n+           +-- reducer.js\n+\n+-- index.js\n+-- App.js\n+-- style.js\n```\n\n`/comon/header` 中存放了header组件的的相关信息，我们可以把与该组件有关的store单独写在该目录下的 `store` 文件夹中。\n\n## 2.1 主要步骤\n\n1. 在 `/common/header/store/reducer.js` 编写关于 `header` 组件的reducer操作\n    ```javascript\n    const defaultState = {\n      [dataName]: [value]\n      // ... ... 处理初始化数据\n    }\n    export default (store = defaultState, action) => {\n      // ... ... 处理action\n      return store;\n    }\n    ```\n\n2. `/common/header/store/index.js` 作为模块出口导出模块\n    ```javascript\n    import reducer from './reducer'\n    export { reducer }\n    ```\n\n3. 改写 `/store/reducer.js`，在此引入 `combineReducers` 方法，然后将合并好的reducer导出：\n    ```javascript\n    import { combineReducers } from 'redux'\n    import { reducer as HeaderReducer } from '../common/header/store'\n\n    const reducer = combineReducers({\n      header: HeaderReducer\n    })\n\n    export default reducer\n    ```\n4. 如果在组件中调用数据，则需要将原来的 `state.[dataName]` 改为 `state.[componentName].[dataName]`，如：\n    ```diff\n    const mapStateToProps = (state) => {\n      return {\n    -   focused: state.focused\n    +   focused: state.header.focused\n      }\n    }\n    ```\n\n## 2.2 处理出口文件\n当我们在代码中引入`actionCreators.js`和`constants.js`来存放action生成器以及管理变量名时，可以使用已有的`index.js`统一向外暴露接口。\n\n目录变更:\n```diff\n  /common\n  +-- /header\n      +-- index.js\n      +-- style.js\n      +-- /store\n          +-- index.js\n          +-- reducer.js\n+         +-- actionCreators.js\n+         +-- constants.js\n```\n\n```javascript\n/*   /common/header/store/index.js   */\nimport reducer from './reducer'\nimport * as actionCreators from './actionCreators'\nimport * as constants from './constants'\n\nexport { reducer, constants, actionCreators }\n```\n\n之后如果需要使用相关的action生成器则只需要调用:\n```diff\n- import * actionCreators from './store/actionCreators.js';\n+ import { actionCreators } from './store';\n... ...\nconst action = actionCreators.searchFocus()\n```\n\n\n\n\n# 3. Immutable.js\n\n## 3.1 简介\nImmutable.js是用来限制某一个数据为不可变更数据，它将原有的数据转化为一个immutable对象，之后如果想要获取某个immutable对象的值，则使用`get()`方法。它还提供了一个`set()`方法，这个方法并没有去修改原有数据的值，而是将原有值与新值结合，返回一个新的对象。\n\n由于在Redux模型中，Reducer不可以更改state中的数据，只是将一个做了变更的数据交付给Store，由Store去变更数据。在之前的方法中，我们使用深拷贝state来防止变更数据，使用Immutable.js就可以简化操作。\n\n注意：immutable对象只能使用immutable提供的API，且immutable对象不能与普通的对象混用，必须要进行转换。\n\n## 3.2 API\n\n### 3.2.1 fromJS() set()\n\n利用immutable中的`fromJS()`可以将一个js对象转化成为一个immutable对象，利用`set()`方法可以处理immutable对象中的数据：\n\n```diff\n  import { constants } from './index'\n+ import { fromJS } from 'immutable'\n\n- const defaultState = {\n-   focused: false\n- }\n\n=== 将默认的defaultState转化为一个immutable对象 ===\n+ const defaultState = fromJS({\n+   focused: false\n+ })\n\n  export default (state = defaultState, action) => {\n    if (action.type == constants.SEARCH_FOCUE) {\n-     const newState = JSON.parse(JSON.stringify(state));\n-     newState.focused = true;\n-     return newState;\n+     return state.set('focused', true);\n    }\n    return state;\n  }\n```\n\n### 3.2.2 get()\n\n使用`get()`方法获取一个immutable对象中的数据（此时state中的数据已被转化为一个immutable对象）\n\n```diff\nconst mapStateToProps = (state) => {\n  return {\n-   focused: state.header.focused\n+   focused: state.header.get('focused')\n  }\n}\n```\n\n### 3.2.3 toJS\n\n作用：将一个Immutable数据转换为JS类型的数据。\n\n用法：value.toJS()\n\n### 3.2.4 List() 和 Map()\n\n作用：用来创建一个新的List/Map对象\n\n用法:\n\n```\n//List\n\nList(): List<any>\nList<T>(): List<T>\n\n//Map\n\nMap(): Map<any>\nMap<T>(): Map<T>\n```\n\n### 3.2.5 List.of() 和 Map.of()\n\n作用：创建一个新的包含value的List/Map对象\n\n用法：\n\n```\nList.of<T>(...values: Array<T>): List<T>\n\nMap.of<T>(...values: Object<T>): Map<T>\n```\n\n### 3.2.6 size\n\n作用：获取List/Map的长度\n\n## 3.3 将Redux中的所有数据都immutable化\n\n安装`redux-immutable`\n\n> yarn add redux-immutable\n\n在项目的主store中引入redux-immutable提供的`combineReducers()`方法去取代redux提供的`combineReducers()`方法\n\n```diff\n- import { combineReducers } from 'redux'\n+ import { combineReducers } from 'redux-immutable'\n```\n\n此时就可以在组件中使用 immutable 来规范化数据了\n\n```diff\nconst mapStateToProps = (state) => {\n  return {\n-   focused: state.header.get('focused')\n+   focused: state.get('header').get('focused')\n  }\n}\n```\n\n也可以利用`getIn()`方法写为：\n```diff\n- focused: state.get('header').get('focused')\n+ focused: state.getIn(['header','focused'])\n```\n\n\n\n# 4. 在开发过程中使用假数据\n\n由Webpack的特性，项目在本地开发时，通过本地服务器可以访问到 `/public` 文件夹中的数据，也就是说我们可以再额外创建一个 `/api` 目录在 `/public` 目录下，在该目录下防止一些 json 文件来用以模拟访问的 json 数据，这样我们就可以通过 axios 直接访问 `http://localhost:8080/api/xxx.json` 来获取数据。\n\n\n\n\n# 5. 用ref获取DOM元素\n\n当我们要获取jsx中的某个DOM元素时，可以使用ref来获取，然后将ref对象作为参数传入方法中，我们就可以在方法中处理该DOM了，例如我们再点击“换一批”时，需要获取icon字体，改变其样式\n\n```diff\n  <SearchInfoSwitch \n+   onClick={() => handlePageChange(this.spinIcon)}\n  >\n    <i \n+     ref={(icon) => { this.spinIcon = icon }} \n      className=\"iconfont spin\"\n    ></i>换一批\n  </SearchInfoSwitch>\n```","source":"_posts/2019/React学习笔记05：项目实战（一）.md","raw":"---\ntitle: React学习笔记05：项目实战（一）\ntags: [React, 项目实战]\ncategories:\n  - Front\n  - React\ndate: 2019-05-25 22:09:45\n---\n[Githu源代码](https://github.com/EsunR/React-Study/tree/master/07-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AHeader%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91)\n\n# 1.使用styled-components管理样式\n\n如果在组件文件中引入一个css文件，那么这个css文件会在全局中生效，也就是说会造成该组件的样式被应用到其他组件上，这时候需要使用 styled-components 来帮助我们管理样式\n\n## 1.1 准备环境\n1. 安装\n    > yarn add styled-components\n\n2. 更改`style.css`为`style.js`并引入`index.js`\n    ```diff\n    // index.js\n    - import './style.css';\n    + import './style.js';\n    ```\n\n## 1.2 使用流程\n\n1. 创建`style.js`，引入`styled-components`\n    ```javascript\n    import styled from '../../../node_modules/styled-components';\n    ```\n2. 编写带有样式的组件容器\n    ```javascript\n    export const [StyleConponentName] = styled.[TagName]`\n      [Style]: [Value]\n    `\n    ```\n    如：\n    ```javascript\n    export const Nav = styled.div`\n      width: 960px;\n    `\n    ```\n\n3. 在组件中调用样式容器\n    ```javascript\n    import { [StyleConponentName] } from './style.js'\n    ```\n    ```html\n    <StyleConponentName>Conetne Text Here</StyleConponentName>\n    ```\n\n## 1.3 全局样式的使用\n\nstyled-components 默认只应用于单个组件的样式，但是通过其提供的 `createGlobalStyle` 方法可以创建全局样式，我们在此以引入字体样式为例，在字体所在的文件夹中创建一个 `iconfont.js`\n\n```javascript\n// iconfont-.js\nimport { createGlobalStyle } from 'styled-components';\nexport const GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: \"iconfont\";\n    src: url('./iconfont.eot?t=1558516833762'); /* IE9 */\n    ... ...\n  }\n  .iconfont {\n    font-family: \"iconfont\"!important;\n    font-size: 16px;\n    font-style: normal;\n  }\n`\n```\n\n之后将 `iconfont.js` 导入到 `App.js` 中应用于全局：\n\n```diff\n  import React, { Component } from 'react'\n  ... ...\n+ import { GlobalStyle } from './statics/icon-font/iconfont'\n\n\n  class App extends Component {\n    render() {\n      return (\n        <Provider store={store}>\n+         <GlobalStyle></GlobalStyle>\n          ... ...\n        </Provider>\n      );\n    }\n  }\n\n  export default App;\n```\n\n在此要注意的是，全局样式 `<GlobalStyle></GlobalStyle>` 必须引入到渲染的根节点中，即与组件同级，不能在其内部添加任何组件。\n\n## 1.4 子级样式的使用\n\n如果创建的样式组件需要通过className来判断样式，则使用 `&.className{...}` 来编写样式，如：\n\n```html\n<!-- jsx -->\n<NavItem className=\"active\">Login</NavItem>\n```\n\n```javascript\n// style.js\nexport const NavItem = styled.div`\n  [Style]: [Value];\n  &.className: {\n    [Style]: [Value];\n  }\n```\n\n\n\n\n# 2. 使用combineReducers完成对数据的拆分管理\n\nReducer主要负责对action的判断和数据的处理以及初始化工作，假如我们把所有组件的操作都放到一个`reducer.js`文件中去处理，那么可能就会导致代码过长，所以Redux提供了一个 `combineReducers()` API可以让我们把Reducer拆分到每个组件中，再合并到主要的Reducer文件中。\n\n目录结构：\n```\n/src\n+-- /store\n+   +-- index.js\n+   +-- reducer.js\n+\n+-- /common\n+   +-- /header\n+       +-- index.js\n+       +-- style.js\n+       +-- /store\n+           +-- index.js\n+           +-- reducer.js\n+\n+-- index.js\n+-- App.js\n+-- style.js\n```\n\n`/comon/header` 中存放了header组件的的相关信息，我们可以把与该组件有关的store单独写在该目录下的 `store` 文件夹中。\n\n## 2.1 主要步骤\n\n1. 在 `/common/header/store/reducer.js` 编写关于 `header` 组件的reducer操作\n    ```javascript\n    const defaultState = {\n      [dataName]: [value]\n      // ... ... 处理初始化数据\n    }\n    export default (store = defaultState, action) => {\n      // ... ... 处理action\n      return store;\n    }\n    ```\n\n2. `/common/header/store/index.js` 作为模块出口导出模块\n    ```javascript\n    import reducer from './reducer'\n    export { reducer }\n    ```\n\n3. 改写 `/store/reducer.js`，在此引入 `combineReducers` 方法，然后将合并好的reducer导出：\n    ```javascript\n    import { combineReducers } from 'redux'\n    import { reducer as HeaderReducer } from '../common/header/store'\n\n    const reducer = combineReducers({\n      header: HeaderReducer\n    })\n\n    export default reducer\n    ```\n4. 如果在组件中调用数据，则需要将原来的 `state.[dataName]` 改为 `state.[componentName].[dataName]`，如：\n    ```diff\n    const mapStateToProps = (state) => {\n      return {\n    -   focused: state.focused\n    +   focused: state.header.focused\n      }\n    }\n    ```\n\n## 2.2 处理出口文件\n当我们在代码中引入`actionCreators.js`和`constants.js`来存放action生成器以及管理变量名时，可以使用已有的`index.js`统一向外暴露接口。\n\n目录变更:\n```diff\n  /common\n  +-- /header\n      +-- index.js\n      +-- style.js\n      +-- /store\n          +-- index.js\n          +-- reducer.js\n+         +-- actionCreators.js\n+         +-- constants.js\n```\n\n```javascript\n/*   /common/header/store/index.js   */\nimport reducer from './reducer'\nimport * as actionCreators from './actionCreators'\nimport * as constants from './constants'\n\nexport { reducer, constants, actionCreators }\n```\n\n之后如果需要使用相关的action生成器则只需要调用:\n```diff\n- import * actionCreators from './store/actionCreators.js';\n+ import { actionCreators } from './store';\n... ...\nconst action = actionCreators.searchFocus()\n```\n\n\n\n\n# 3. Immutable.js\n\n## 3.1 简介\nImmutable.js是用来限制某一个数据为不可变更数据，它将原有的数据转化为一个immutable对象，之后如果想要获取某个immutable对象的值，则使用`get()`方法。它还提供了一个`set()`方法，这个方法并没有去修改原有数据的值，而是将原有值与新值结合，返回一个新的对象。\n\n由于在Redux模型中，Reducer不可以更改state中的数据，只是将一个做了变更的数据交付给Store，由Store去变更数据。在之前的方法中，我们使用深拷贝state来防止变更数据，使用Immutable.js就可以简化操作。\n\n注意：immutable对象只能使用immutable提供的API，且immutable对象不能与普通的对象混用，必须要进行转换。\n\n## 3.2 API\n\n### 3.2.1 fromJS() set()\n\n利用immutable中的`fromJS()`可以将一个js对象转化成为一个immutable对象，利用`set()`方法可以处理immutable对象中的数据：\n\n```diff\n  import { constants } from './index'\n+ import { fromJS } from 'immutable'\n\n- const defaultState = {\n-   focused: false\n- }\n\n=== 将默认的defaultState转化为一个immutable对象 ===\n+ const defaultState = fromJS({\n+   focused: false\n+ })\n\n  export default (state = defaultState, action) => {\n    if (action.type == constants.SEARCH_FOCUE) {\n-     const newState = JSON.parse(JSON.stringify(state));\n-     newState.focused = true;\n-     return newState;\n+     return state.set('focused', true);\n    }\n    return state;\n  }\n```\n\n### 3.2.2 get()\n\n使用`get()`方法获取一个immutable对象中的数据（此时state中的数据已被转化为一个immutable对象）\n\n```diff\nconst mapStateToProps = (state) => {\n  return {\n-   focused: state.header.focused\n+   focused: state.header.get('focused')\n  }\n}\n```\n\n### 3.2.3 toJS\n\n作用：将一个Immutable数据转换为JS类型的数据。\n\n用法：value.toJS()\n\n### 3.2.4 List() 和 Map()\n\n作用：用来创建一个新的List/Map对象\n\n用法:\n\n```\n//List\n\nList(): List<any>\nList<T>(): List<T>\n\n//Map\n\nMap(): Map<any>\nMap<T>(): Map<T>\n```\n\n### 3.2.5 List.of() 和 Map.of()\n\n作用：创建一个新的包含value的List/Map对象\n\n用法：\n\n```\nList.of<T>(...values: Array<T>): List<T>\n\nMap.of<T>(...values: Object<T>): Map<T>\n```\n\n### 3.2.6 size\n\n作用：获取List/Map的长度\n\n## 3.3 将Redux中的所有数据都immutable化\n\n安装`redux-immutable`\n\n> yarn add redux-immutable\n\n在项目的主store中引入redux-immutable提供的`combineReducers()`方法去取代redux提供的`combineReducers()`方法\n\n```diff\n- import { combineReducers } from 'redux'\n+ import { combineReducers } from 'redux-immutable'\n```\n\n此时就可以在组件中使用 immutable 来规范化数据了\n\n```diff\nconst mapStateToProps = (state) => {\n  return {\n-   focused: state.header.get('focused')\n+   focused: state.get('header').get('focused')\n  }\n}\n```\n\n也可以利用`getIn()`方法写为：\n```diff\n- focused: state.get('header').get('focused')\n+ focused: state.getIn(['header','focused'])\n```\n\n\n\n# 4. 在开发过程中使用假数据\n\n由Webpack的特性，项目在本地开发时，通过本地服务器可以访问到 `/public` 文件夹中的数据，也就是说我们可以再额外创建一个 `/api` 目录在 `/public` 目录下，在该目录下防止一些 json 文件来用以模拟访问的 json 数据，这样我们就可以通过 axios 直接访问 `http://localhost:8080/api/xxx.json` 来获取数据。\n\n\n\n\n# 5. 用ref获取DOM元素\n\n当我们要获取jsx中的某个DOM元素时，可以使用ref来获取，然后将ref对象作为参数传入方法中，我们就可以在方法中处理该DOM了，例如我们再点击“换一批”时，需要获取icon字体，改变其样式\n\n```diff\n  <SearchInfoSwitch \n+   onClick={() => handlePageChange(this.spinIcon)}\n  >\n    <i \n+     ref={(icon) => { this.spinIcon = icon }} \n      className=\"iconfont spin\"\n    ></i>换一批\n  </SearchInfoSwitch>\n```","slug":"React学习笔记05：项目实战（一）","published":1,"updated":"2019-11-09T14:10:13.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfg003w3w4u5czb1iq7","content":"<p><a href=\"https://github.com/EsunR/React-Study/tree/master/07-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AHeader%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91\" target=\"_blank\" rel=\"noopener\">Githu源代码</a></p>\n<h1 id=\"1-使用styled-components管理样式\"><a href=\"#1-使用styled-components管理样式\" class=\"headerlink\" title=\"1.使用styled-components管理样式\"></a>1.使用styled-components管理样式</h1><p>如果在组件文件中引入一个css文件，那么这个css文件会在全局中生效，也就是说会造成该组件的样式被应用到其他组件上，这时候需要使用 styled-components 来帮助我们管理样式</p>\n<h2 id=\"1-1-准备环境\"><a href=\"#1-1-准备环境\" class=\"headerlink\" title=\"1.1 准备环境\"></a>1.1 准备环境</h2><ol>\n<li><p>安装</p>\n<blockquote>\n<p>yarn add styled-components</p>\n</blockquote>\n</li>\n<li><p>更改<code>style.css</code>为<code>style.js</code>并引入<code>index.js</code></p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.js</span><br><span class=\"line\"><span class=\"deletion\">- import './style.css';</span></span><br><span class=\"line\"><span class=\"addition\">+ import './style.js';</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-2-使用流程\"><a href=\"#1-2-使用流程\" class=\"headerlink\" title=\"1.2 使用流程\"></a>1.2 使用流程</h2><ol>\n<li><p>创建<code>style.js</code>，引入<code>styled-components</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">'../../../node_modules/styled-components'</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写带有样式的组件容器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> [StyleConponentName] = styled.[TagName]<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  [Style]: [Value]</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<p> 如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> Nav = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 960px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在组件中调用样式容器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; [StyleConponentName] &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./style.js'</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StyleConponentName</span>&gt;</span>Conetne Text Here<span class=\"tag\">&lt;/<span class=\"name\">StyleConponentName</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-3-全局样式的使用\"><a href=\"#1-3-全局样式的使用\" class=\"headerlink\" title=\"1.3 全局样式的使用\"></a>1.3 全局样式的使用</h2><p>styled-components 默认只应用于单个组件的样式，但是通过其提供的 <code>createGlobalStyle</code> 方法可以创建全局样式，我们在此以引入字体样式为例，在字体所在的文件夹中创建一个 <code>iconfont.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// iconfont-.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createGlobalStyle &#125; <span class=\"keyword\">from</span> <span class=\"string\">'styled-components'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> GlobalStyle = createGlobalStyle<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  @font-face &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-family: \"iconfont\";</span></span><br><span class=\"line\"><span class=\"string\">    src: url('./iconfont.eot?t=1558516833762'); /* IE9 */</span></span><br><span class=\"line\"><span class=\"string\">    ... ...</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .iconfont &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-family: \"iconfont\"!important;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: 16px;</span></span><br><span class=\"line\"><span class=\"string\">    font-style: normal;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>之后将 <code>iconfont.js</code> 导入到 <code>App.js</code> 中应用于全局：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import React, &#123; Component &#125; from 'react'</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; GlobalStyle &#125; from './statics/icon-font/iconfont'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class App extends Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\"><span class=\"addition\">+         &lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</span></span><br><span class=\"line\">          ... ...</span><br><span class=\"line\">        &lt;/Provider&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default App;</span><br></pre></td></tr></table></figure>\n\n<p>在此要注意的是，全局样式 <code>&lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</code> 必须引入到渲染的根节点中，即与组件同级，不能在其内部添加任何组件。</p>\n<h2 id=\"1-4-子级样式的使用\"><a href=\"#1-4-子级样式的使用\" class=\"headerlink\" title=\"1.4 子级样式的使用\"></a>1.4 子级样式的使用</h2><p>如果创建的样式组件需要通过className来判断样式，则使用 <code>&amp;.className{...}</code> 来编写样式，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jsx --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NavItem</span> <span class=\"attr\">className</span>=<span class=\"string\">\"active\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">NavItem</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// style.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> NavItem = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  [Style]: [Value];</span></span><br><span class=\"line\"><span class=\"string\">  &amp;.className: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    [Style]: [Value];</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"2-使用combineReducers完成对数据的拆分管理\"><a href=\"#2-使用combineReducers完成对数据的拆分管理\" class=\"headerlink\" title=\"2. 使用combineReducers完成对数据的拆分管理\"></a>2. 使用combineReducers完成对数据的拆分管理</h1><p>Reducer主要负责对action的判断和数据的处理以及初始化工作，假如我们把所有组件的操作都放到一个<code>reducer.js</code>文件中去处理，那么可能就会导致代码过长，所以Redux提供了一个 <code>combineReducers()</code> API可以让我们把Reducer拆分到每个组件中，再合并到主要的Reducer文件中。</p>\n<p>目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src</span><br><span class=\"line\">+-- /store</span><br><span class=\"line\">+   +-- index.js</span><br><span class=\"line\">+   +-- reducer.js</span><br><span class=\"line\">+</span><br><span class=\"line\">+-- /common</span><br><span class=\"line\">+   +-- /header</span><br><span class=\"line\">+       +-- index.js</span><br><span class=\"line\">+       +-- style.js</span><br><span class=\"line\">+       +-- /store</span><br><span class=\"line\">+           +-- index.js</span><br><span class=\"line\">+           +-- reducer.js</span><br><span class=\"line\">+</span><br><span class=\"line\">+-- index.js</span><br><span class=\"line\">+-- App.js</span><br><span class=\"line\">+-- style.js</span><br></pre></td></tr></table></figure>\n\n<p><code>/comon/header</code> 中存放了header组件的的相关信息，我们可以把与该组件有关的store单独写在该目录下的 <code>store</code> 文件夹中。</p>\n<h2 id=\"2-1-主要步骤\"><a href=\"#2-1-主要步骤\" class=\"headerlink\" title=\"2.1 主要步骤\"></a>2.1 主要步骤</h2><ol>\n<li><p>在 <code>/common/header/store/reducer.js</code> 编写关于 <code>header</code> 组件的reducer操作</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultState = &#123;</span><br><span class=\"line\">  [dataName]: [value]</span><br><span class=\"line\">  <span class=\"comment\">// ... ... 处理初始化数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (store = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... ... 处理action</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> store;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>/common/header/store/index.js</code> 作为模块出口导出模块</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; reducer &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改写 <code>/store/reducer.js</code>，在此引入 <code>combineReducers</code> 方法，然后将合并好的reducer导出：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reducer <span class=\"keyword\">as</span> HeaderReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/header/store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(&#123;</span><br><span class=\"line\">  header: HeaderReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducer</span><br></pre></td></tr></table></figure></li>\n<li><p>如果在组件中调用数据，则需要将原来的 <code>state.[dataName]</code> 改为 <code>state.[componentName].[dataName]</code>，如：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.focused</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.header.focused</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"2-2-处理出口文件\"><a href=\"#2-2-处理出口文件\" class=\"headerlink\" title=\"2.2 处理出口文件\"></a>2.2 处理出口文件</h2><p>当我们在代码中引入<code>actionCreators.js</code>和<code>constants.js</code>来存放action生成器以及管理变量名时，可以使用已有的<code>index.js</code>统一向外暴露接口。</p>\n<p>目录变更:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /common</span><br><span class=\"line\">  +-- /header</span><br><span class=\"line\">      +-- index.js</span><br><span class=\"line\">      +-- style.js</span><br><span class=\"line\">      +-- /store</span><br><span class=\"line\">          +-- index.js</span><br><span class=\"line\">          +-- reducer.js</span><br><span class=\"line\"><span class=\"addition\">+         +-- actionCreators.js</span></span><br><span class=\"line\"><span class=\"addition\">+         +-- constants.js</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   /common/header/store/index.js   */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./actionCreators'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; reducer, constants, actionCreators &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后如果需要使用相关的action生成器则只需要调用:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import * actionCreators from './store/actionCreators.js';</span></span><br><span class=\"line\"><span class=\"addition\">+ import &#123; actionCreators &#125; from './store';</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">const action = actionCreators.searchFocus()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"3-Immutable-js\"><a href=\"#3-Immutable-js\" class=\"headerlink\" title=\"3. Immutable.js\"></a>3. Immutable.js</h1><h2 id=\"3-1-简介\"><a href=\"#3-1-简介\" class=\"headerlink\" title=\"3.1 简介\"></a>3.1 简介</h2><p>Immutable.js是用来限制某一个数据为不可变更数据，它将原有的数据转化为一个immutable对象，之后如果想要获取某个immutable对象的值，则使用<code>get()</code>方法。它还提供了一个<code>set()</code>方法，这个方法并没有去修改原有数据的值，而是将原有值与新值结合，返回一个新的对象。</p>\n<p>由于在Redux模型中，Reducer不可以更改state中的数据，只是将一个做了变更的数据交付给Store，由Store去变更数据。在之前的方法中，我们使用深拷贝state来防止变更数据，使用Immutable.js就可以简化操作。</p>\n<p>注意：immutable对象只能使用immutable提供的API，且immutable对象不能与普通的对象混用，必须要进行转换。</p>\n<h2 id=\"3-2-API\"><a href=\"#3-2-API\" class=\"headerlink\" title=\"3.2 API\"></a>3.2 API</h2><h3 id=\"3-2-1-fromJS-set\"><a href=\"#3-2-1-fromJS-set\" class=\"headerlink\" title=\"3.2.1 fromJS() set()\"></a>3.2.1 fromJS() set()</h3><p>利用immutable中的<code>fromJS()</code>可以将一个js对象转化成为一个immutable对象，利用<code>set()</code>方法可以处理immutable对象中的数据：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import &#123; constants &#125; from './index'</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; fromJS &#125; from 'immutable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- const defaultState = &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   focused: false</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">=== 将默认的defaultState转化为一个immutable对象 ===</span></span><br><span class=\"line\"><span class=\"addition\">+ const defaultState = fromJS(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: false</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  export default (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">    if (action.type == constants.SEARCH_FOCUE) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     const newState = JSON.parse(JSON.stringify(state));</span></span><br><span class=\"line\"><span class=\"deletion\">-     newState.focused = true;</span></span><br><span class=\"line\"><span class=\"deletion\">-     return newState;</span></span><br><span class=\"line\"><span class=\"addition\">+     return state.set('focused', true);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return state;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-get\"><a href=\"#3-2-2-get\" class=\"headerlink\" title=\"3.2.2 get()\"></a>3.2.2 get()</h3><p>使用<code>get()</code>方法获取一个immutable对象中的数据（此时state中的数据已被转化为一个immutable对象）</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.header.focused</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.header.get('focused')</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-toJS\"><a href=\"#3-2-3-toJS\" class=\"headerlink\" title=\"3.2.3 toJS\"></a>3.2.3 toJS</h3><p>作用：将一个Immutable数据转换为JS类型的数据。</p>\n<p>用法：value.toJS()</p>\n<h3 id=\"3-2-4-List-和-Map\"><a href=\"#3-2-4-List-和-Map\" class=\"headerlink\" title=\"3.2.4 List() 和 Map()\"></a>3.2.4 List() 和 Map()</h3><p>作用：用来创建一个新的List/Map对象</p>\n<p>用法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//List</span><br><span class=\"line\"></span><br><span class=\"line\">List(): List&lt;any&gt;</span><br><span class=\"line\">List&lt;T&gt;(): List&lt;T&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//Map</span><br><span class=\"line\"></span><br><span class=\"line\">Map(): Map&lt;any&gt;</span><br><span class=\"line\">Map&lt;T&gt;(): Map&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-5-List-of-和-Map-of\"><a href=\"#3-2-5-List-of-和-Map-of\" class=\"headerlink\" title=\"3.2.5 List.of() 和 Map.of()\"></a>3.2.5 List.of() 和 Map.of()</h3><p>作用：创建一个新的包含value的List/Map对象</p>\n<p>用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List.of&lt;T&gt;(...values: Array&lt;T&gt;): List&lt;T&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Map.of&lt;T&gt;(...values: Object&lt;T&gt;): Map&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-6-size\"><a href=\"#3-2-6-size\" class=\"headerlink\" title=\"3.2.6 size\"></a>3.2.6 size</h3><p>作用：获取List/Map的长度</p>\n<h2 id=\"3-3-将Redux中的所有数据都immutable化\"><a href=\"#3-3-将Redux中的所有数据都immutable化\" class=\"headerlink\" title=\"3.3 将Redux中的所有数据都immutable化\"></a>3.3 将Redux中的所有数据都immutable化</h2><p>安装<code>redux-immutable</code></p>\n<blockquote>\n<p>yarn add redux-immutable</p>\n</blockquote>\n<p>在项目的主store中引入redux-immutable提供的<code>combineReducers()</code>方法去取代redux提供的<code>combineReducers()</code>方法</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import &#123; combineReducers &#125; from 'redux'</span></span><br><span class=\"line\"><span class=\"addition\">+ import &#123; combineReducers &#125; from 'redux-immutable'</span></span><br></pre></td></tr></table></figure>\n\n<p>此时就可以在组件中使用 immutable 来规范化数据了</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.header.get('focused')</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.get('header').get('focused')</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以利用<code>getIn()</code>方法写为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- focused: state.get('header').get('focused')</span></span><br><span class=\"line\"><span class=\"addition\">+ focused: state.getIn(['header','focused'])</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-在开发过程中使用假数据\"><a href=\"#4-在开发过程中使用假数据\" class=\"headerlink\" title=\"4. 在开发过程中使用假数据\"></a>4. 在开发过程中使用假数据</h1><p>由Webpack的特性，项目在本地开发时，通过本地服务器可以访问到 <code>/public</code> 文件夹中的数据，也就是说我们可以再额外创建一个 <code>/api</code> 目录在 <code>/public</code> 目录下，在该目录下防止一些 json 文件来用以模拟访问的 json 数据，这样我们就可以通过 axios 直接访问 <code>http://localhost:8080/api/xxx.json</code> 来获取数据。</p>\n<h1 id=\"5-用ref获取DOM元素\"><a href=\"#5-用ref获取DOM元素\" class=\"headerlink\" title=\"5. 用ref获取DOM元素\"></a>5. 用ref获取DOM元素</h1><p>当我们要获取jsx中的某个DOM元素时，可以使用ref来获取，然后将ref对象作为参数传入方法中，我们就可以在方法中处理该DOM了，例如我们再点击“换一批”时，需要获取icon字体，改变其样式</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;SearchInfoSwitch </span><br><span class=\"line\"><span class=\"addition\">+   onClick=&#123;() =&gt; handlePageChange(this.spinIcon)&#125;</span></span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;i </span><br><span class=\"line\"><span class=\"addition\">+     ref=&#123;(icon) =&gt; &#123; this.spinIcon = icon &#125;&#125; </span></span><br><span class=\"line\">      className=\"iconfont spin\"</span><br><span class=\"line\">    &gt;&lt;/i&gt;换一批</span><br><span class=\"line\">  &lt;/SearchInfoSwitch&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://github.com/EsunR/React-Study/tree/master/07-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AHeader%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91\" target=\"_blank\" rel=\"noopener\">Githu源代码</a></p>\n<h1 id=\"1-使用styled-components管理样式\"><a href=\"#1-使用styled-components管理样式\" class=\"headerlink\" title=\"1.使用styled-components管理样式\"></a>1.使用styled-components管理样式</h1><p>如果在组件文件中引入一个css文件，那么这个css文件会在全局中生效，也就是说会造成该组件的样式被应用到其他组件上，这时候需要使用 styled-components 来帮助我们管理样式</p>\n<h2 id=\"1-1-准备环境\"><a href=\"#1-1-准备环境\" class=\"headerlink\" title=\"1.1 准备环境\"></a>1.1 准备环境</h2><ol>\n<li><p>安装</p>\n<blockquote>\n<p>yarn add styled-components</p>\n</blockquote>\n</li>\n<li><p>更改<code>style.css</code>为<code>style.js</code>并引入<code>index.js</code></p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.js</span><br><span class=\"line\"><span class=\"deletion\">- import './style.css';</span></span><br><span class=\"line\"><span class=\"addition\">+ import './style.js';</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-2-使用流程\"><a href=\"#1-2-使用流程\" class=\"headerlink\" title=\"1.2 使用流程\"></a>1.2 使用流程</h2><ol>\n<li><p>创建<code>style.js</code>，引入<code>styled-components</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">'../../../node_modules/styled-components'</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写带有样式的组件容器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> [StyleConponentName] = styled.[TagName]<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  [Style]: [Value]</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<p> 如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> Nav = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 960px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在组件中调用样式容器</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; [StyleConponentName] &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./style.js'</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StyleConponentName</span>&gt;</span>Conetne Text Here<span class=\"tag\">&lt;/<span class=\"name\">StyleConponentName</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-3-全局样式的使用\"><a href=\"#1-3-全局样式的使用\" class=\"headerlink\" title=\"1.3 全局样式的使用\"></a>1.3 全局样式的使用</h2><p>styled-components 默认只应用于单个组件的样式，但是通过其提供的 <code>createGlobalStyle</code> 方法可以创建全局样式，我们在此以引入字体样式为例，在字体所在的文件夹中创建一个 <code>iconfont.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// iconfont-.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createGlobalStyle &#125; <span class=\"keyword\">from</span> <span class=\"string\">'styled-components'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> GlobalStyle = createGlobalStyle<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  @font-face &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-family: \"iconfont\";</span></span><br><span class=\"line\"><span class=\"string\">    src: url('./iconfont.eot?t=1558516833762'); /* IE9 */</span></span><br><span class=\"line\"><span class=\"string\">    ... ...</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .iconfont &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-family: \"iconfont\"!important;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: 16px;</span></span><br><span class=\"line\"><span class=\"string\">    font-style: normal;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>之后将 <code>iconfont.js</code> 导入到 <code>App.js</code> 中应用于全局：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import React, &#123; Component &#125; from 'react'</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; GlobalStyle &#125; from './statics/icon-font/iconfont'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class App extends Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\"><span class=\"addition\">+         &lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</span></span><br><span class=\"line\">          ... ...</span><br><span class=\"line\">        &lt;/Provider&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default App;</span><br></pre></td></tr></table></figure>\n\n<p>在此要注意的是，全局样式 <code>&lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</code> 必须引入到渲染的根节点中，即与组件同级，不能在其内部添加任何组件。</p>\n<h2 id=\"1-4-子级样式的使用\"><a href=\"#1-4-子级样式的使用\" class=\"headerlink\" title=\"1.4 子级样式的使用\"></a>1.4 子级样式的使用</h2><p>如果创建的样式组件需要通过className来判断样式，则使用 <code>&amp;.className{...}</code> 来编写样式，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jsx --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NavItem</span> <span class=\"attr\">className</span>=<span class=\"string\">\"active\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">NavItem</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// style.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> NavItem = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  [Style]: [Value];</span></span><br><span class=\"line\"><span class=\"string\">  &amp;.className: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    [Style]: [Value];</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"2-使用combineReducers完成对数据的拆分管理\"><a href=\"#2-使用combineReducers完成对数据的拆分管理\" class=\"headerlink\" title=\"2. 使用combineReducers完成对数据的拆分管理\"></a>2. 使用combineReducers完成对数据的拆分管理</h1><p>Reducer主要负责对action的判断和数据的处理以及初始化工作，假如我们把所有组件的操作都放到一个<code>reducer.js</code>文件中去处理，那么可能就会导致代码过长，所以Redux提供了一个 <code>combineReducers()</code> API可以让我们把Reducer拆分到每个组件中，再合并到主要的Reducer文件中。</p>\n<p>目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src</span><br><span class=\"line\">+-- /store</span><br><span class=\"line\">+   +-- index.js</span><br><span class=\"line\">+   +-- reducer.js</span><br><span class=\"line\">+</span><br><span class=\"line\">+-- /common</span><br><span class=\"line\">+   +-- /header</span><br><span class=\"line\">+       +-- index.js</span><br><span class=\"line\">+       +-- style.js</span><br><span class=\"line\">+       +-- /store</span><br><span class=\"line\">+           +-- index.js</span><br><span class=\"line\">+           +-- reducer.js</span><br><span class=\"line\">+</span><br><span class=\"line\">+-- index.js</span><br><span class=\"line\">+-- App.js</span><br><span class=\"line\">+-- style.js</span><br></pre></td></tr></table></figure>\n\n<p><code>/comon/header</code> 中存放了header组件的的相关信息，我们可以把与该组件有关的store单独写在该目录下的 <code>store</code> 文件夹中。</p>\n<h2 id=\"2-1-主要步骤\"><a href=\"#2-1-主要步骤\" class=\"headerlink\" title=\"2.1 主要步骤\"></a>2.1 主要步骤</h2><ol>\n<li><p>在 <code>/common/header/store/reducer.js</code> 编写关于 <code>header</code> 组件的reducer操作</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultState = &#123;</span><br><span class=\"line\">  [dataName]: [value]</span><br><span class=\"line\">  <span class=\"comment\">// ... ... 处理初始化数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (store = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... ... 处理action</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> store;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>/common/header/store/index.js</code> 作为模块出口导出模块</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; reducer &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改写 <code>/store/reducer.js</code>，在此引入 <code>combineReducers</code> 方法，然后将合并好的reducer导出：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reducer <span class=\"keyword\">as</span> HeaderReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/header/store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(&#123;</span><br><span class=\"line\">  header: HeaderReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducer</span><br></pre></td></tr></table></figure></li>\n<li><p>如果在组件中调用数据，则需要将原来的 <code>state.[dataName]</code> 改为 <code>state.[componentName].[dataName]</code>，如：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.focused</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.header.focused</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"2-2-处理出口文件\"><a href=\"#2-2-处理出口文件\" class=\"headerlink\" title=\"2.2 处理出口文件\"></a>2.2 处理出口文件</h2><p>当我们在代码中引入<code>actionCreators.js</code>和<code>constants.js</code>来存放action生成器以及管理变量名时，可以使用已有的<code>index.js</code>统一向外暴露接口。</p>\n<p>目录变更:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /common</span><br><span class=\"line\">  +-- /header</span><br><span class=\"line\">      +-- index.js</span><br><span class=\"line\">      +-- style.js</span><br><span class=\"line\">      +-- /store</span><br><span class=\"line\">          +-- index.js</span><br><span class=\"line\">          +-- reducer.js</span><br><span class=\"line\"><span class=\"addition\">+         +-- actionCreators.js</span></span><br><span class=\"line\"><span class=\"addition\">+         +-- constants.js</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   /common/header/store/index.js   */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./actionCreators'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; reducer, constants, actionCreators &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后如果需要使用相关的action生成器则只需要调用:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import * actionCreators from './store/actionCreators.js';</span></span><br><span class=\"line\"><span class=\"addition\">+ import &#123; actionCreators &#125; from './store';</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">const action = actionCreators.searchFocus()</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"3-Immutable-js\"><a href=\"#3-Immutable-js\" class=\"headerlink\" title=\"3. Immutable.js\"></a>3. Immutable.js</h1><h2 id=\"3-1-简介\"><a href=\"#3-1-简介\" class=\"headerlink\" title=\"3.1 简介\"></a>3.1 简介</h2><p>Immutable.js是用来限制某一个数据为不可变更数据，它将原有的数据转化为一个immutable对象，之后如果想要获取某个immutable对象的值，则使用<code>get()</code>方法。它还提供了一个<code>set()</code>方法，这个方法并没有去修改原有数据的值，而是将原有值与新值结合，返回一个新的对象。</p>\n<p>由于在Redux模型中，Reducer不可以更改state中的数据，只是将一个做了变更的数据交付给Store，由Store去变更数据。在之前的方法中，我们使用深拷贝state来防止变更数据，使用Immutable.js就可以简化操作。</p>\n<p>注意：immutable对象只能使用immutable提供的API，且immutable对象不能与普通的对象混用，必须要进行转换。</p>\n<h2 id=\"3-2-API\"><a href=\"#3-2-API\" class=\"headerlink\" title=\"3.2 API\"></a>3.2 API</h2><h3 id=\"3-2-1-fromJS-set\"><a href=\"#3-2-1-fromJS-set\" class=\"headerlink\" title=\"3.2.1 fromJS() set()\"></a>3.2.1 fromJS() set()</h3><p>利用immutable中的<code>fromJS()</code>可以将一个js对象转化成为一个immutable对象，利用<code>set()</code>方法可以处理immutable对象中的数据：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import &#123; constants &#125; from './index'</span><br><span class=\"line\"><span class=\"addition\">+ import &#123; fromJS &#125; from 'immutable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- const defaultState = &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   focused: false</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">=== 将默认的defaultState转化为一个immutable对象 ===</span></span><br><span class=\"line\"><span class=\"addition\">+ const defaultState = fromJS(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: false</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  export default (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">    if (action.type == constants.SEARCH_FOCUE) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-     const newState = JSON.parse(JSON.stringify(state));</span></span><br><span class=\"line\"><span class=\"deletion\">-     newState.focused = true;</span></span><br><span class=\"line\"><span class=\"deletion\">-     return newState;</span></span><br><span class=\"line\"><span class=\"addition\">+     return state.set('focused', true);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return state;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-get\"><a href=\"#3-2-2-get\" class=\"headerlink\" title=\"3.2.2 get()\"></a>3.2.2 get()</h3><p>使用<code>get()</code>方法获取一个immutable对象中的数据（此时state中的数据已被转化为一个immutable对象）</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.header.focused</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.header.get('focused')</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-toJS\"><a href=\"#3-2-3-toJS\" class=\"headerlink\" title=\"3.2.3 toJS\"></a>3.2.3 toJS</h3><p>作用：将一个Immutable数据转换为JS类型的数据。</p>\n<p>用法：value.toJS()</p>\n<h3 id=\"3-2-4-List-和-Map\"><a href=\"#3-2-4-List-和-Map\" class=\"headerlink\" title=\"3.2.4 List() 和 Map()\"></a>3.2.4 List() 和 Map()</h3><p>作用：用来创建一个新的List/Map对象</p>\n<p>用法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//List</span><br><span class=\"line\"></span><br><span class=\"line\">List(): List&lt;any&gt;</span><br><span class=\"line\">List&lt;T&gt;(): List&lt;T&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//Map</span><br><span class=\"line\"></span><br><span class=\"line\">Map(): Map&lt;any&gt;</span><br><span class=\"line\">Map&lt;T&gt;(): Map&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-5-List-of-和-Map-of\"><a href=\"#3-2-5-List-of-和-Map-of\" class=\"headerlink\" title=\"3.2.5 List.of() 和 Map.of()\"></a>3.2.5 List.of() 和 Map.of()</h3><p>作用：创建一个新的包含value的List/Map对象</p>\n<p>用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List.of&lt;T&gt;(...values: Array&lt;T&gt;): List&lt;T&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Map.of&lt;T&gt;(...values: Object&lt;T&gt;): Map&lt;T&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-6-size\"><a href=\"#3-2-6-size\" class=\"headerlink\" title=\"3.2.6 size\"></a>3.2.6 size</h3><p>作用：获取List/Map的长度</p>\n<h2 id=\"3-3-将Redux中的所有数据都immutable化\"><a href=\"#3-3-将Redux中的所有数据都immutable化\" class=\"headerlink\" title=\"3.3 将Redux中的所有数据都immutable化\"></a>3.3 将Redux中的所有数据都immutable化</h2><p>安装<code>redux-immutable</code></p>\n<blockquote>\n<p>yarn add redux-immutable</p>\n</blockquote>\n<p>在项目的主store中引入redux-immutable提供的<code>combineReducers()</code>方法去取代redux提供的<code>combineReducers()</code>方法</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import &#123; combineReducers &#125; from 'redux'</span></span><br><span class=\"line\"><span class=\"addition\">+ import &#123; combineReducers &#125; from 'redux-immutable'</span></span><br></pre></td></tr></table></figure>\n\n<p>此时就可以在组件中使用 immutable 来规范化数据了</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   focused: state.header.get('focused')</span></span><br><span class=\"line\"><span class=\"addition\">+   focused: state.get('header').get('focused')</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以利用<code>getIn()</code>方法写为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- focused: state.get('header').get('focused')</span></span><br><span class=\"line\"><span class=\"addition\">+ focused: state.getIn(['header','focused'])</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-在开发过程中使用假数据\"><a href=\"#4-在开发过程中使用假数据\" class=\"headerlink\" title=\"4. 在开发过程中使用假数据\"></a>4. 在开发过程中使用假数据</h1><p>由Webpack的特性，项目在本地开发时，通过本地服务器可以访问到 <code>/public</code> 文件夹中的数据，也就是说我们可以再额外创建一个 <code>/api</code> 目录在 <code>/public</code> 目录下，在该目录下防止一些 json 文件来用以模拟访问的 json 数据，这样我们就可以通过 axios 直接访问 <code>http://localhost:8080/api/xxx.json</code> 来获取数据。</p>\n<h1 id=\"5-用ref获取DOM元素\"><a href=\"#5-用ref获取DOM元素\" class=\"headerlink\" title=\"5. 用ref获取DOM元素\"></a>5. 用ref获取DOM元素</h1><p>当我们要获取jsx中的某个DOM元素时，可以使用ref来获取，然后将ref对象作为参数传入方法中，我们就可以在方法中处理该DOM了，例如我们再点击“换一批”时，需要获取icon字体，改变其样式</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;SearchInfoSwitch </span><br><span class=\"line\"><span class=\"addition\">+   onClick=&#123;() =&gt; handlePageChange(this.spinIcon)&#125;</span></span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;i </span><br><span class=\"line\"><span class=\"addition\">+     ref=&#123;(icon) =&gt; &#123; this.spinIcon = icon &#125;&#125; </span></span><br><span class=\"line\">      className=\"iconfont spin\"</span><br><span class=\"line\">    &gt;&lt;/i&gt;换一批</span><br><span class=\"line\">  &lt;/SearchInfoSwitch&gt;</span><br></pre></td></tr></table></figure>"},{"title":"React学习笔记06：项目实战（二）","date":"2019-05-25T14:10:51.000Z","_content":"[Github源码](https://github.com/EsunR/React-Study/tree/master/08-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91)\n\n# 1. 在React项目中使用路由功能\n\n## 1.1 基本使用方法\n\n首先下载 `react-router-dom`：\n\n```shell\nyarn add react-router-dom\n```\n\n在主文件 `App.js` 中引入 `BrowserRouter` ， `Route` 组件，然后在JSX的VDOM树中直接插入路由\n\n```javascript\nimport React, { Component } from 'react'\n... ...\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div> \n        <Header />\n        ... ...\n        <BrowserRouter>\n          <div>\n            <Route path='/' exact render={() => <div>home</div>}></Route>\n            <Route path='/detail' exact render={() => <div>detail</div>}></Route>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n![](http://img.cdn.esunr.xyz/markdown/20190522203023.png)\n\n![](http://img.cdn.esunr.xyz/markdown/20190522203104.png)\n\n需要注意的几点：\n\n- 普通组件与路由组件需要包裹在同一个div中\n- `<BrowserRouter></BrowserRouter>` 内部需要由一个div包裹\n- `path` 为路由组件的路由属性\n- `exact` 表示当完全符合 `path` 的路径时，只渲染当前 `<Route></Route>` 标签。如果不添加 `exact`，那么按照上面的例子，访问 `/detail` 时，`<Route path='/' exact render={() => <div>home</div>}></Route>` 也会被渲染\n\n## 1.2 将Route渲染的组件抽离为单个页面文件\n\n如果想单独把页面抽离为组件，利用 `Route` 导入组件，就将 `Route` 标签下的 `render` 改为 `component` ，其值为引入的组件，如\n\n```\n新增目录：\nsrc\n|- pages\n|  |- detail\n|  |  |- index.js\n|  |- home\n|  |  |- index.js\n+++++++++++++++++\n```\n\n将主页面文件 `App.js` 改为：\n\n```diff\n  import React, { Component } from 'react'\n  import Header from './common/header'\n  ... ...\n  import { BrowserRouter, Route } from 'react-router-dom'\n+ import Home from './pages/home';\n+ import Detail from './pages/detail';\n\n\n  class App extends Component {\n    render() {\n      return (\n        <div>\n          <Header></Header>\n          <BrowserRouter>\n            <div>\n-             <Route path='/' exact render={() => <div>home</div>}></Route>\n+             <Route path='/' exact component={Home}></Route>\n-             <Route path='/detail' exact render={() => <div>detail</div>}></Route>\n+             <Route path='/detail' exact component={Detail}></Route>\n            </div>\n          </BrowserRouter>\n        </div>\n      );\n    }\n  }\n\n  export default App;\n```\n\n## 1.3 在组件中进行页面跳转\n\n使用 react-router-dom 中的 Link 组件可以实现页面的跳转\n\n```javascript\nimport { Link } from 'react-router-dom'\n... ...\nrender(){\n  return (\n    <Link to=\"detail\"></Link>\n  )\n}\n... ...\n```\n\n## 1.4 在路由中传入参数\n\n### 1.4.1 params动态路由\n\n在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 `/detail/1`。\n\n在 `<Router>` 标签中为其设置路由接收的参数：\n\n```diff\n  // App.js\n  ... ...\n  render() {\n    return (\n      ... ...\n      <BrowserRouter>\n+         <Route path='/detail/:id' exact component={Detail}></Route>\n      </BrowserRouter>\n      ... ...\n    );\n  }\n  ... ...\n```\n\n获取当前路由的参数：\n\n```javascript\nthis.props.match.params\n```\n\n### 1.4.2 query参数路由\n\n在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 `/detail?id=1`。\n\n获取参数路由：\n\n```javascript\nthis.props.location.search // search:\"?id=1\"\n```\n\n我们再 `String` 上挂载一个方法手动解析字符串：\n\n```javascript\nString.prototype.parseQuery = function () {\n  var queryStr = this.split(\"?\")[1];\n  var queryArr = queryStr.split(\"&\");\n  var queryObj = {};\n\n  \n  for (var i in queryArr) {\n    var queryItem = queryArr[i].split('=');\n    queryObj[queryItem[0]] = queryItem[1];\n  }\n  return queryObj;\n}\n\nvar url = \"www.baidu.com/search?id=1&content=hahahahah&time=2019524\"\nconsole.log(url.parseQuery());\n```\n\n## 1.5 使用`<Redirect/>`标签对页面重定向\n\n如果我们希望在进入页面时让页跳转到某一个路由地址，就在当前页面添加一个 `<Redirect/>` 标签，其包含一个 `to` 属性，属性值为希望跳转到的路由地址，如下示例：\n\n```javascript\nimport { Redirect } from 'react-router-dom'\n... ...\nrender(){\n  return (\n    <Redirect to=\"/\" />\n  )\n}\n... ...\n```\n\n\n# 2. 在Styled-components中使用组件Props传入的值\n\n在某组件使用 Styled-components 处理样式时，可以在该组件上添加一个属性值，然后再其对应的 `style.js` 文件中，在编写其组件样式时就可以用 `${ (props) => props.[propsKey] }`\n\n如我们再开发简书项目时，右侧会有不同的板块图片，每个板块图片都是由一个 `RecommentItem` 组件渲染出的，但其每个组件的背景图片都不一样，如下：\n\n![20190523144309.png](http://img.cdn.esunr.xyz/markdown/20190523144309.png)\n\n所以我们可以在 `RecommentItem` 组件中传入一个 `imgUrl` 的参数，来让该组件的CSS样式在渲染时，`background` 渲染出不同的 url 地址，具体做法如下：\n\n```html\n<!-- jsx -->\n<RecommentWrapper>\n  <RecommentItem imgUrl=\"http://img.cdn.esunr.xyz/banner-s-club-aa8bdf19f8cf729a759da42e4a96f366.png\"></RecommentItem>\n  <RecommentItem imgUrl=\"http://img.cdn.esunr.xyz/banner-s-7-1a0222c91694a1f38e610be4bf9669be.png\"></RecommentItem>\n</RecommentWrapper>\n```\n\n```javascript\n// styled-component\nexport const RecommentItem = styled.div`\n  width: 280px;\n  height: 50px; \n  background: url(${(props) => props.imgUrl});\n  background-size: contain;\n  margin-bottom: 10px;\n`\n```\n\n# 3. 使用PureComponent来优化组件性能\n\n在简书项目中首页创建的所有组件几乎都使用了Connect方法来与Store进行了连接，那么只要数据发生了改变，那么每一个组件都会被重新渲染。这时候可以使用之前学到的 `shuoldComponentUpdate` 来判断改变的数据是否与当前组件相关，如果相关才会重新渲染，否则不渲染。\n\n在React16中提供了一个新的方法，使用 `PureComponent` 来代替 `Component` 创建一个纯组件，使用 `PureComponent` 创建的组件将要被重新渲染时，会自动判断自己 `props` 中的数据是否发生了变动，如果发生了变动才会重新渲染自己。\n\n```diff\n- import React, { Component } from 'react'\n+ import React, { PureComponent } from 'react'\n  import { connect } from 'react-redux'\n\n- class Home extends Component {\n+ class Home extends PureComponent {\n    render() {\n      return (\n        ... ...\n      )\n    }\n  }\n\n  const mapState = (state) => ({\n    ... ...\n  })\n\n  const mapDispatch = (dispatch) => ({\n    ... ...\n  })\n\n  export default connect(mapState, mapDispatch)(Home);\n```\n\n注意：PureComponent 与 immutable.js 结合使用才有效\n\n\n# 4. react-loadable的使用\n\n[Guide](https://github.com/jamiebuilds/react-loadable)\n\nreact-loadable 可以实现异步加载路由，用来优化加载，以修改简书项目中的detail页面为例：\n\n1. 在detail页面的根目录下创建一个 `loadable.js` 文件：\n    ```diff\n      /store\n      index.js\n    + loadable.js\n      style.js\n    ```\n\n2. 在 `loadable.js` 中添加\n    ```javascript\n    import Loadable from 'react-loadable';\n    import Loading from './my-loading-component';\n\n    const LoadableComponent = Loadable({\n      loader: () => import('./my-component'),\n      loading: Loading,\n    });\n\n    export default class App extends React.Component {\n      render() {\n        return <LoadableComponent/>;\n      }\n    }\n    ```\n    根据需求修改成合适项目的代码：\n    ```diff\n      import Loadable from 'react-loadable';\n    - import Loading from './my-loading-component';\n    + import React from 'react'; // 获取语法jsx支持\n\n      const LoadableComponent = Loadable({\n        loader: () => import('./my-component'),\n    -   loading: Loading,\n    +   loading(){\n    +     return <div>正在加载</div>\n    +   }\n      });\n\n    + export default () => <LoadableComponent /> \n\n    - export default class App extends React.Component {\n    -   render() {\n    -     return <LoadableComponent/>;\n    -   }\n    - }\n    ```\n\n3. 修改入口文件 `App.js` 的引入代码\n    ```diff\n    - import Detail from './pages/detail';\n    + import Detail from './pages/detail/loadable.js';\n    ```\n\n## 4.1 处理路由参数\n\n我们首先要明白 react-loadable 改变了组件的加载方式，由之前直接读取 `index.js` 加载组件，改变为以读取 `loadable.js` 然后再异步获取 `index.js`，返回 `<LoadableComponent />` 组件来加载新的页面。\n\n我们在入口文件 `App.js` 中将路由传递给了由 `loadable.js` 导出的组件，也就是说，我们将路由传递给的是 `<LoadableComponent />` 组件，而并非 `index.js` 中导出的组件。所以真正的组件无法获取到路由对象，当我们在组件中使用了 `this.props.match` 时就会报错。\n\n这时我们需要改写 `index.js` 来让真正的组件获取到路由的参数。\n\n首先要引入 react-router-dom 中提供的 `withRouter` 方法，这个方法可以让我们渲染出的组件可以读取到当前的路由信息：\n\n```javascript\nimport { withRouter } from 'react-router-dom'\n```\n\n之后再导出组件时，我们要使用 `withRouter` 来渲染组件：\n\n```javascript\nexport default connect(mapState, mapDispatch)(withRouter(Detail));\n```","source":"_posts/2019/React学习笔记06：项目实战（二）.md","raw":"---\ntitle: React学习笔记06：项目实战（二）\ntags: [React, 项目实战]\ncategories:\n  - Front\n  - React\ndate: 2019-05-25 22:10:51\n---\n[Github源码](https://github.com/EsunR/React-Study/tree/master/08-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91)\n\n# 1. 在React项目中使用路由功能\n\n## 1.1 基本使用方法\n\n首先下载 `react-router-dom`：\n\n```shell\nyarn add react-router-dom\n```\n\n在主文件 `App.js` 中引入 `BrowserRouter` ， `Route` 组件，然后在JSX的VDOM树中直接插入路由\n\n```javascript\nimport React, { Component } from 'react'\n... ...\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div> \n        <Header />\n        ... ...\n        <BrowserRouter>\n          <div>\n            <Route path='/' exact render={() => <div>home</div>}></Route>\n            <Route path='/detail' exact render={() => <div>detail</div>}></Route>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n![](http://img.cdn.esunr.xyz/markdown/20190522203023.png)\n\n![](http://img.cdn.esunr.xyz/markdown/20190522203104.png)\n\n需要注意的几点：\n\n- 普通组件与路由组件需要包裹在同一个div中\n- `<BrowserRouter></BrowserRouter>` 内部需要由一个div包裹\n- `path` 为路由组件的路由属性\n- `exact` 表示当完全符合 `path` 的路径时，只渲染当前 `<Route></Route>` 标签。如果不添加 `exact`，那么按照上面的例子，访问 `/detail` 时，`<Route path='/' exact render={() => <div>home</div>}></Route>` 也会被渲染\n\n## 1.2 将Route渲染的组件抽离为单个页面文件\n\n如果想单独把页面抽离为组件，利用 `Route` 导入组件，就将 `Route` 标签下的 `render` 改为 `component` ，其值为引入的组件，如\n\n```\n新增目录：\nsrc\n|- pages\n|  |- detail\n|  |  |- index.js\n|  |- home\n|  |  |- index.js\n+++++++++++++++++\n```\n\n将主页面文件 `App.js` 改为：\n\n```diff\n  import React, { Component } from 'react'\n  import Header from './common/header'\n  ... ...\n  import { BrowserRouter, Route } from 'react-router-dom'\n+ import Home from './pages/home';\n+ import Detail from './pages/detail';\n\n\n  class App extends Component {\n    render() {\n      return (\n        <div>\n          <Header></Header>\n          <BrowserRouter>\n            <div>\n-             <Route path='/' exact render={() => <div>home</div>}></Route>\n+             <Route path='/' exact component={Home}></Route>\n-             <Route path='/detail' exact render={() => <div>detail</div>}></Route>\n+             <Route path='/detail' exact component={Detail}></Route>\n            </div>\n          </BrowserRouter>\n        </div>\n      );\n    }\n  }\n\n  export default App;\n```\n\n## 1.3 在组件中进行页面跳转\n\n使用 react-router-dom 中的 Link 组件可以实现页面的跳转\n\n```javascript\nimport { Link } from 'react-router-dom'\n... ...\nrender(){\n  return (\n    <Link to=\"detail\"></Link>\n  )\n}\n... ...\n```\n\n## 1.4 在路由中传入参数\n\n### 1.4.1 params动态路由\n\n在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 `/detail/1`。\n\n在 `<Router>` 标签中为其设置路由接收的参数：\n\n```diff\n  // App.js\n  ... ...\n  render() {\n    return (\n      ... ...\n      <BrowserRouter>\n+         <Route path='/detail/:id' exact component={Detail}></Route>\n      </BrowserRouter>\n      ... ...\n    );\n  }\n  ... ...\n```\n\n获取当前路由的参数：\n\n```javascript\nthis.props.match.params\n```\n\n### 1.4.2 query参数路由\n\n在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 `/detail?id=1`。\n\n获取参数路由：\n\n```javascript\nthis.props.location.search // search:\"?id=1\"\n```\n\n我们再 `String` 上挂载一个方法手动解析字符串：\n\n```javascript\nString.prototype.parseQuery = function () {\n  var queryStr = this.split(\"?\")[1];\n  var queryArr = queryStr.split(\"&\");\n  var queryObj = {};\n\n  \n  for (var i in queryArr) {\n    var queryItem = queryArr[i].split('=');\n    queryObj[queryItem[0]] = queryItem[1];\n  }\n  return queryObj;\n}\n\nvar url = \"www.baidu.com/search?id=1&content=hahahahah&time=2019524\"\nconsole.log(url.parseQuery());\n```\n\n## 1.5 使用`<Redirect/>`标签对页面重定向\n\n如果我们希望在进入页面时让页跳转到某一个路由地址，就在当前页面添加一个 `<Redirect/>` 标签，其包含一个 `to` 属性，属性值为希望跳转到的路由地址，如下示例：\n\n```javascript\nimport { Redirect } from 'react-router-dom'\n... ...\nrender(){\n  return (\n    <Redirect to=\"/\" />\n  )\n}\n... ...\n```\n\n\n# 2. 在Styled-components中使用组件Props传入的值\n\n在某组件使用 Styled-components 处理样式时，可以在该组件上添加一个属性值，然后再其对应的 `style.js` 文件中，在编写其组件样式时就可以用 `${ (props) => props.[propsKey] }`\n\n如我们再开发简书项目时，右侧会有不同的板块图片，每个板块图片都是由一个 `RecommentItem` 组件渲染出的，但其每个组件的背景图片都不一样，如下：\n\n![20190523144309.png](http://img.cdn.esunr.xyz/markdown/20190523144309.png)\n\n所以我们可以在 `RecommentItem` 组件中传入一个 `imgUrl` 的参数，来让该组件的CSS样式在渲染时，`background` 渲染出不同的 url 地址，具体做法如下：\n\n```html\n<!-- jsx -->\n<RecommentWrapper>\n  <RecommentItem imgUrl=\"http://img.cdn.esunr.xyz/banner-s-club-aa8bdf19f8cf729a759da42e4a96f366.png\"></RecommentItem>\n  <RecommentItem imgUrl=\"http://img.cdn.esunr.xyz/banner-s-7-1a0222c91694a1f38e610be4bf9669be.png\"></RecommentItem>\n</RecommentWrapper>\n```\n\n```javascript\n// styled-component\nexport const RecommentItem = styled.div`\n  width: 280px;\n  height: 50px; \n  background: url(${(props) => props.imgUrl});\n  background-size: contain;\n  margin-bottom: 10px;\n`\n```\n\n# 3. 使用PureComponent来优化组件性能\n\n在简书项目中首页创建的所有组件几乎都使用了Connect方法来与Store进行了连接，那么只要数据发生了改变，那么每一个组件都会被重新渲染。这时候可以使用之前学到的 `shuoldComponentUpdate` 来判断改变的数据是否与当前组件相关，如果相关才会重新渲染，否则不渲染。\n\n在React16中提供了一个新的方法，使用 `PureComponent` 来代替 `Component` 创建一个纯组件，使用 `PureComponent` 创建的组件将要被重新渲染时，会自动判断自己 `props` 中的数据是否发生了变动，如果发生了变动才会重新渲染自己。\n\n```diff\n- import React, { Component } from 'react'\n+ import React, { PureComponent } from 'react'\n  import { connect } from 'react-redux'\n\n- class Home extends Component {\n+ class Home extends PureComponent {\n    render() {\n      return (\n        ... ...\n      )\n    }\n  }\n\n  const mapState = (state) => ({\n    ... ...\n  })\n\n  const mapDispatch = (dispatch) => ({\n    ... ...\n  })\n\n  export default connect(mapState, mapDispatch)(Home);\n```\n\n注意：PureComponent 与 immutable.js 结合使用才有效\n\n\n# 4. react-loadable的使用\n\n[Guide](https://github.com/jamiebuilds/react-loadable)\n\nreact-loadable 可以实现异步加载路由，用来优化加载，以修改简书项目中的detail页面为例：\n\n1. 在detail页面的根目录下创建一个 `loadable.js` 文件：\n    ```diff\n      /store\n      index.js\n    + loadable.js\n      style.js\n    ```\n\n2. 在 `loadable.js` 中添加\n    ```javascript\n    import Loadable from 'react-loadable';\n    import Loading from './my-loading-component';\n\n    const LoadableComponent = Loadable({\n      loader: () => import('./my-component'),\n      loading: Loading,\n    });\n\n    export default class App extends React.Component {\n      render() {\n        return <LoadableComponent/>;\n      }\n    }\n    ```\n    根据需求修改成合适项目的代码：\n    ```diff\n      import Loadable from 'react-loadable';\n    - import Loading from './my-loading-component';\n    + import React from 'react'; // 获取语法jsx支持\n\n      const LoadableComponent = Loadable({\n        loader: () => import('./my-component'),\n    -   loading: Loading,\n    +   loading(){\n    +     return <div>正在加载</div>\n    +   }\n      });\n\n    + export default () => <LoadableComponent /> \n\n    - export default class App extends React.Component {\n    -   render() {\n    -     return <LoadableComponent/>;\n    -   }\n    - }\n    ```\n\n3. 修改入口文件 `App.js` 的引入代码\n    ```diff\n    - import Detail from './pages/detail';\n    + import Detail from './pages/detail/loadable.js';\n    ```\n\n## 4.1 处理路由参数\n\n我们首先要明白 react-loadable 改变了组件的加载方式，由之前直接读取 `index.js` 加载组件，改变为以读取 `loadable.js` 然后再异步获取 `index.js`，返回 `<LoadableComponent />` 组件来加载新的页面。\n\n我们在入口文件 `App.js` 中将路由传递给了由 `loadable.js` 导出的组件，也就是说，我们将路由传递给的是 `<LoadableComponent />` 组件，而并非 `index.js` 中导出的组件。所以真正的组件无法获取到路由对象，当我们在组件中使用了 `this.props.match` 时就会报错。\n\n这时我们需要改写 `index.js` 来让真正的组件获取到路由的参数。\n\n首先要引入 react-router-dom 中提供的 `withRouter` 方法，这个方法可以让我们渲染出的组件可以读取到当前的路由信息：\n\n```javascript\nimport { withRouter } from 'react-router-dom'\n```\n\n之后再导出组件时，我们要使用 `withRouter` 来渲染组件：\n\n```javascript\nexport default connect(mapState, mapDispatch)(withRouter(Detail));\n```","slug":"React学习笔记06：项目实战（二）","published":1,"updated":"2019-11-09T14:11:20.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfi00403w4uhkfc8txh","content":"<p><a href=\"https://github.com/EsunR/React-Study/tree/master/08-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91\" target=\"_blank\" rel=\"noopener\">Github源码</a></p>\n<h1 id=\"1-在React项目中使用路由功能\"><a href=\"#1-在React项目中使用路由功能\" class=\"headerlink\" title=\"1. 在React项目中使用路由功能\"></a>1. 在React项目中使用路由功能</h1><h2 id=\"1-1-基本使用方法\"><a href=\"#1-1-基本使用方法\" class=\"headerlink\" title=\"1.1 基本使用方法\"></a>1.1 基本使用方法</h2><p>首先下载 <code>react-router-dom</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-router-dom</span><br></pre></td></tr></table></figure>\n\n<p>在主文件 <code>App.js</code> 中引入 <code>BrowserRouter</code> ， <code>Route</code> 组件，然后在JSX的VDOM树中直接插入路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt; </span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        &lt;BrowserRouter&gt;</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/'</span> exact render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/detail'</span> exact render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>BrowserRouter&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522203023.png\" alt=\"\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522203104.png\" alt=\"\"></p>\n<p>需要注意的几点：</p>\n<ul>\n<li>普通组件与路由组件需要包裹在同一个div中</li>\n<li><code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code> 内部需要由一个div包裹</li>\n<li><code>path</code> 为路由组件的路由属性</li>\n<li><code>exact</code> 表示当完全符合 <code>path</code> 的路径时，只渲染当前 <code>&lt;Route&gt;&lt;/Route&gt;</code> 标签。如果不添加 <code>exact</code>，那么按照上面的例子，访问 <code>/detail</code> 时，<code>&lt;Route path=&#39;/&#39; exact render={() =&gt; &lt;div&gt;home&lt;/div&gt;}&gt;&lt;/Route&gt;</code> 也会被渲染</li>\n</ul>\n<h2 id=\"1-2-将Route渲染的组件抽离为单个页面文件\"><a href=\"#1-2-将Route渲染的组件抽离为单个页面文件\" class=\"headerlink\" title=\"1.2 将Route渲染的组件抽离为单个页面文件\"></a>1.2 将Route渲染的组件抽离为单个页面文件</h2><p>如果想单独把页面抽离为组件，利用 <code>Route</code> 导入组件，就将 <code>Route</code> 标签下的 <code>render</code> 改为 <code>component</code> ，其值为引入的组件，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新增目录：</span><br><span class=\"line\">src</span><br><span class=\"line\">|- pages</span><br><span class=\"line\">|  |- detail</span><br><span class=\"line\">|  |  |- index.js</span><br><span class=\"line\">|  |- home</span><br><span class=\"line\">|  |  |- index.js</span><br><span class=\"line\">+++++++++++++++++</span><br></pre></td></tr></table></figure>\n\n<p>将主页面文件 <code>App.js</code> 改为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import React, &#123; Component &#125; from 'react'</span><br><span class=\"line\">  import Header from './common/header'</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  import &#123; BrowserRouter, Route &#125; from 'react-router-dom'</span><br><span class=\"line\"><span class=\"addition\">+ import Home from './pages/home';</span></span><br><span class=\"line\"><span class=\"addition\">+ import Detail from './pages/detail';</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class App extends Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;Header&gt;&lt;/Header&gt;</span><br><span class=\"line\">          &lt;BrowserRouter&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\"><span class=\"deletion\">-             &lt;Route path='/' exact render=&#123;() =&gt; &lt;div&gt;home&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+             &lt;Route path='/' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-             &lt;Route path='/detail' exact render=&#123;() =&gt; &lt;div&gt;detail&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+             &lt;Route path='/detail' exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/BrowserRouter&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default App;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-在组件中进行页面跳转\"><a href=\"#1-3-在组件中进行页面跳转\" class=\"headerlink\" title=\"1.3 在组件中进行页面跳转\"></a>1.3 在组件中进行页面跳转</h2><p>使用 react-router-dom 中的 Link 组件可以实现页面的跳转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Link to=<span class=\"string\">\"detail\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">... ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-在路由中传入参数\"><a href=\"#1-4-在路由中传入参数\" class=\"headerlink\" title=\"1.4 在路由中传入参数\"></a>1.4 在路由中传入参数</h2><h3 id=\"1-4-1-params动态路由\"><a href=\"#1-4-1-params动态路由\" class=\"headerlink\" title=\"1.4.1 params动态路由\"></a>1.4.1 params动态路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail/1</code>。</p>\n<p>在 <code>&lt;Router&gt;</code> 标签中为其设置路由接收的参数：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // App.js</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      &lt;BrowserRouter&gt;</span><br><span class=\"line\"><span class=\"addition\">+         &lt;Route path='/detail/:id' exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\">      &lt;/BrowserRouter&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ... ...</span><br></pre></td></tr></table></figure>\n\n<p>获取当前路由的参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.props.match.params</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-2-query参数路由\"><a href=\"#1-4-2-query参数路由\" class=\"headerlink\" title=\"1.4.2 query参数路由\"></a>1.4.2 query参数路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail?id=1</code>。</p>\n<p>获取参数路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.props.location.search <span class=\"comment\">// search:\"?id=1\"</span></span><br></pre></td></tr></table></figure>\n\n<p>我们再 <code>String</code> 上挂载一个方法手动解析字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.parseQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryStr = <span class=\"keyword\">this</span>.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryArr = queryStr.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> queryArr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queryItem = queryArr[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">    queryObj[queryItem[<span class=\"number\">0</span>]] = queryItem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> queryObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"www.baidu.com/search?id=1&amp;content=hahahahah&amp;time=2019524\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url.parseQuery());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-使用-lt-Redirect-gt-标签对页面重定向\"><a href=\"#1-5-使用-lt-Redirect-gt-标签对页面重定向\" class=\"headerlink\" title=\"1.5 使用&lt;Redirect/&gt;标签对页面重定向\"></a>1.5 使用<code>&lt;Redirect/&gt;</code>标签对页面重定向</h2><p>如果我们希望在进入页面时让页跳转到某一个路由地址，就在当前页面添加一个 <code>&lt;Redirect/&gt;</code> 标签，其包含一个 <code>to</code> 属性，属性值为希望跳转到的路由地址，如下示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Redirect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Redirect to=<span class=\"string\">\"/\"</span> /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">... ...</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"2-在Styled-components中使用组件Props传入的值\"><a href=\"#2-在Styled-components中使用组件Props传入的值\" class=\"headerlink\" title=\"2. 在Styled-components中使用组件Props传入的值\"></a>2. 在Styled-components中使用组件Props传入的值</h1><p>在某组件使用 Styled-components 处理样式时，可以在该组件上添加一个属性值，然后再其对应的 <code>style.js</code> 文件中，在编写其组件样式时就可以用 <code>${ (props) =&gt; props.[propsKey] }</code></p>\n<p>如我们再开发简书项目时，右侧会有不同的板块图片，每个板块图片都是由一个 <code>RecommentItem</code> 组件渲染出的，但其每个组件的背景图片都不一样，如下：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190523144309.png\" alt=\"20190523144309.png\"></p>\n<p>所以我们可以在 <code>RecommentItem</code> 组件中传入一个 <code>imgUrl</code> 的参数，来让该组件的CSS样式在渲染时，<code>background</code> 渲染出不同的 url 地址，具体做法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jsx --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RecommentWrapper</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RecommentItem</span> <span class=\"attr\">imgUrl</span>=<span class=\"string\">\"http://img.cdn.esunr.xyz/banner-s-club-aa8bdf19f8cf729a759da42e4a96f366.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RecommentItem</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RecommentItem</span> <span class=\"attr\">imgUrl</span>=<span class=\"string\">\"http://img.cdn.esunr.xyz/banner-s-7-1a0222c91694a1f38e610be4bf9669be.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RecommentItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RecommentWrapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styled-component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> RecommentItem = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 280px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 50px; </span></span><br><span class=\"line\"><span class=\"string\">  background: url(<span class=\"subst\">$&#123;(props) =&gt; props.imgUrl&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">  background-size: contain;</span></span><br><span class=\"line\"><span class=\"string\">  margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-使用PureComponent来优化组件性能\"><a href=\"#3-使用PureComponent来优化组件性能\" class=\"headerlink\" title=\"3. 使用PureComponent来优化组件性能\"></a>3. 使用PureComponent来优化组件性能</h1><p>在简书项目中首页创建的所有组件几乎都使用了Connect方法来与Store进行了连接，那么只要数据发生了改变，那么每一个组件都会被重新渲染。这时候可以使用之前学到的 <code>shuoldComponentUpdate</code> 来判断改变的数据是否与当前组件相关，如果相关才会重新渲染，否则不渲染。</p>\n<p>在React16中提供了一个新的方法，使用 <code>PureComponent</code> 来代替 <code>Component</code> 创建一个纯组件，使用 <code>PureComponent</code> 创建的组件将要被重新渲染时，会自动判断自己 <code>props</code> 中的数据是否发生了变动，如果发生了变动才会重新渲染自己。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import React, &#123; Component &#125; from 'react'</span></span><br><span class=\"line\"><span class=\"addition\">+ import React, &#123; PureComponent &#125; from 'react'</span></span><br><span class=\"line\">  import &#123; connect &#125; from 'react-redux'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- class Home extends Component &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ class Home extends PureComponent &#123;</span></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const mapState = (state) =&gt; (&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  const mapDispatch = (dispatch) =&gt; (&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  export default connect(mapState, mapDispatch)(Home);</span><br></pre></td></tr></table></figure>\n\n<p>注意：PureComponent 与 immutable.js 结合使用才有效</p>\n<h1 id=\"4-react-loadable的使用\"><a href=\"#4-react-loadable的使用\" class=\"headerlink\" title=\"4. react-loadable的使用\"></a>4. react-loadable的使用</h1><p><a href=\"https://github.com/jamiebuilds/react-loadable\" target=\"_blank\" rel=\"noopener\">Guide</a></p>\n<p>react-loadable 可以实现异步加载路由，用来优化加载，以修改简书项目中的detail页面为例：</p>\n<ol>\n<li><p>在detail页面的根目录下创建一个 <code>loadable.js</code> 文件：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /store</span><br><span class=\"line\">  index.js</span><br><span class=\"line\"><span class=\"addition\">+ loadable.js</span></span><br><span class=\"line\">  style.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>loadable.js</code> 中添加</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Loadable <span class=\"keyword\">from</span> <span class=\"string\">'react-loadable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">'./my-loading-component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LoadableComponent = Loadable(&#123;</span><br><span class=\"line\">  loader: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./my-component'</span>),</span><br><span class=\"line\">  loading: Loading,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadableComponent</span>/&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 根据需求修改成合适项目的代码：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import Loadable from 'react-loadable';</span><br><span class=\"line\"><span class=\"deletion\">- import Loading from './my-loading-component';</span></span><br><span class=\"line\"><span class=\"addition\">+ import React from 'react'; // 获取语法jsx支持</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const LoadableComponent = Loadable(&#123;</span><br><span class=\"line\">    loader: () =&gt; import('./my-component'),</span><br><span class=\"line\"><span class=\"deletion\">-   loading: Loading,</span></span><br><span class=\"line\"><span class=\"addition\">+   loading()&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     return &lt;div&gt;正在加载&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ export default () =&gt; &lt;LoadableComponent /&gt; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- export default class App extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   render() &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     return &lt;LoadableComponent/&gt;;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改入口文件 <code>App.js</code> 的引入代码</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import Detail from './pages/detail';</span></span><br><span class=\"line\"><span class=\"addition\">+ import Detail from './pages/detail/loadable.js';</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"4-1-处理路由参数\"><a href=\"#4-1-处理路由参数\" class=\"headerlink\" title=\"4.1 处理路由参数\"></a>4.1 处理路由参数</h2><p>我们首先要明白 react-loadable 改变了组件的加载方式，由之前直接读取 <code>index.js</code> 加载组件，改变为以读取 <code>loadable.js</code> 然后再异步获取 <code>index.js</code>，返回 <code>&lt;LoadableComponent /&gt;</code> 组件来加载新的页面。</p>\n<p>我们在入口文件 <code>App.js</code> 中将路由传递给了由 <code>loadable.js</code> 导出的组件，也就是说，我们将路由传递给的是 <code>&lt;LoadableComponent /&gt;</code> 组件，而并非 <code>index.js</code> 中导出的组件。所以真正的组件无法获取到路由对象，当我们在组件中使用了 <code>this.props.match</code> 时就会报错。</p>\n<p>这时我们需要改写 <code>index.js</code> 来让真正的组件获取到路由的参数。</p>\n<p>首先要引入 react-router-dom 中提供的 <code>withRouter</code> 方法，这个方法可以让我们渲染出的组件可以读取到当前的路由信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br></pre></td></tr></table></figure>\n\n<p>之后再导出组件时，我们要使用 <code>withRouter</code> 来渲染组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapState, mapDispatch)(withRouter(Detail));</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://github.com/EsunR/React-Study/tree/master/08-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91\" target=\"_blank\" rel=\"noopener\">Github源码</a></p>\n<h1 id=\"1-在React项目中使用路由功能\"><a href=\"#1-在React项目中使用路由功能\" class=\"headerlink\" title=\"1. 在React项目中使用路由功能\"></a>1. 在React项目中使用路由功能</h1><h2 id=\"1-1-基本使用方法\"><a href=\"#1-1-基本使用方法\" class=\"headerlink\" title=\"1.1 基本使用方法\"></a>1.1 基本使用方法</h2><p>首先下载 <code>react-router-dom</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-router-dom</span><br></pre></td></tr></table></figure>\n\n<p>在主文件 <code>App.js</code> 中引入 <code>BrowserRouter</code> ， <code>Route</code> 组件，然后在JSX的VDOM树中直接插入路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt; </span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        &lt;BrowserRouter&gt;</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/'</span> exact render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/detail'</span> exact render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>BrowserRouter&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522203023.png\" alt=\"\"></p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190522203104.png\" alt=\"\"></p>\n<p>需要注意的几点：</p>\n<ul>\n<li>普通组件与路由组件需要包裹在同一个div中</li>\n<li><code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code> 内部需要由一个div包裹</li>\n<li><code>path</code> 为路由组件的路由属性</li>\n<li><code>exact</code> 表示当完全符合 <code>path</code> 的路径时，只渲染当前 <code>&lt;Route&gt;&lt;/Route&gt;</code> 标签。如果不添加 <code>exact</code>，那么按照上面的例子，访问 <code>/detail</code> 时，<code>&lt;Route path=&#39;/&#39; exact render={() =&gt; &lt;div&gt;home&lt;/div&gt;}&gt;&lt;/Route&gt;</code> 也会被渲染</li>\n</ul>\n<h2 id=\"1-2-将Route渲染的组件抽离为单个页面文件\"><a href=\"#1-2-将Route渲染的组件抽离为单个页面文件\" class=\"headerlink\" title=\"1.2 将Route渲染的组件抽离为单个页面文件\"></a>1.2 将Route渲染的组件抽离为单个页面文件</h2><p>如果想单独把页面抽离为组件，利用 <code>Route</code> 导入组件，就将 <code>Route</code> 标签下的 <code>render</code> 改为 <code>component</code> ，其值为引入的组件，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新增目录：</span><br><span class=\"line\">src</span><br><span class=\"line\">|- pages</span><br><span class=\"line\">|  |- detail</span><br><span class=\"line\">|  |  |- index.js</span><br><span class=\"line\">|  |- home</span><br><span class=\"line\">|  |  |- index.js</span><br><span class=\"line\">+++++++++++++++++</span><br></pre></td></tr></table></figure>\n\n<p>将主页面文件 <code>App.js</code> 改为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import React, &#123; Component &#125; from 'react'</span><br><span class=\"line\">  import Header from './common/header'</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  import &#123; BrowserRouter, Route &#125; from 'react-router-dom'</span><br><span class=\"line\"><span class=\"addition\">+ import Home from './pages/home';</span></span><br><span class=\"line\"><span class=\"addition\">+ import Detail from './pages/detail';</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class App extends Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;Header&gt;&lt;/Header&gt;</span><br><span class=\"line\">          &lt;BrowserRouter&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\"><span class=\"deletion\">-             &lt;Route path='/' exact render=&#123;() =&gt; &lt;div&gt;home&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+             &lt;Route path='/' exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-             &lt;Route path='/detail' exact render=&#123;() =&gt; &lt;div&gt;detail&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+             &lt;Route path='/detail' exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/BrowserRouter&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default App;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-在组件中进行页面跳转\"><a href=\"#1-3-在组件中进行页面跳转\" class=\"headerlink\" title=\"1.3 在组件中进行页面跳转\"></a>1.3 在组件中进行页面跳转</h2><p>使用 react-router-dom 中的 Link 组件可以实现页面的跳转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Link to=<span class=\"string\">\"detail\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">... ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-在路由中传入参数\"><a href=\"#1-4-在路由中传入参数\" class=\"headerlink\" title=\"1.4 在路由中传入参数\"></a>1.4 在路由中传入参数</h2><h3 id=\"1-4-1-params动态路由\"><a href=\"#1-4-1-params动态路由\" class=\"headerlink\" title=\"1.4.1 params动态路由\"></a>1.4.1 params动态路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail/1</code>。</p>\n<p>在 <code>&lt;Router&gt;</code> 标签中为其设置路由接收的参数：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // App.js</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      &lt;BrowserRouter&gt;</span><br><span class=\"line\"><span class=\"addition\">+         &lt;Route path='/detail/:id' exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class=\"line\">      &lt;/BrowserRouter&gt;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ... ...</span><br></pre></td></tr></table></figure>\n\n<p>获取当前路由的参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.props.match.params</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-2-query参数路由\"><a href=\"#1-4-2-query参数路由\" class=\"headerlink\" title=\"1.4.2 query参数路由\"></a>1.4.2 query参数路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail?id=1</code>。</p>\n<p>获取参数路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.props.location.search <span class=\"comment\">// search:\"?id=1\"</span></span><br></pre></td></tr></table></figure>\n\n<p>我们再 <code>String</code> 上挂载一个方法手动解析字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.parseQuery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryStr = <span class=\"keyword\">this</span>.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryArr = queryStr.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> queryArr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queryItem = queryArr[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">    queryObj[queryItem[<span class=\"number\">0</span>]] = queryItem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> queryObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"www.baidu.com/search?id=1&amp;content=hahahahah&amp;time=2019524\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url.parseQuery());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-使用-lt-Redirect-gt-标签对页面重定向\"><a href=\"#1-5-使用-lt-Redirect-gt-标签对页面重定向\" class=\"headerlink\" title=\"1.5 使用&lt;Redirect/&gt;标签对页面重定向\"></a>1.5 使用<code>&lt;Redirect/&gt;</code>标签对页面重定向</h2><p>如果我们希望在进入页面时让页跳转到某一个路由地址，就在当前页面添加一个 <code>&lt;Redirect/&gt;</code> 标签，其包含一个 <code>to</code> 属性，属性值为希望跳转到的路由地址，如下示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Redirect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">render()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Redirect to=<span class=\"string\">\"/\"</span> /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">... ...</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"2-在Styled-components中使用组件Props传入的值\"><a href=\"#2-在Styled-components中使用组件Props传入的值\" class=\"headerlink\" title=\"2. 在Styled-components中使用组件Props传入的值\"></a>2. 在Styled-components中使用组件Props传入的值</h1><p>在某组件使用 Styled-components 处理样式时，可以在该组件上添加一个属性值，然后再其对应的 <code>style.js</code> 文件中，在编写其组件样式时就可以用 <code>${ (props) =&gt; props.[propsKey] }</code></p>\n<p>如我们再开发简书项目时，右侧会有不同的板块图片，每个板块图片都是由一个 <code>RecommentItem</code> 组件渲染出的，但其每个组件的背景图片都不一样，如下：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190523144309.png\" alt=\"20190523144309.png\"></p>\n<p>所以我们可以在 <code>RecommentItem</code> 组件中传入一个 <code>imgUrl</code> 的参数，来让该组件的CSS样式在渲染时，<code>background</code> 渲染出不同的 url 地址，具体做法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jsx --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RecommentWrapper</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RecommentItem</span> <span class=\"attr\">imgUrl</span>=<span class=\"string\">\"http://img.cdn.esunr.xyz/banner-s-club-aa8bdf19f8cf729a759da42e4a96f366.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RecommentItem</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RecommentItem</span> <span class=\"attr\">imgUrl</span>=<span class=\"string\">\"http://img.cdn.esunr.xyz/banner-s-7-1a0222c91694a1f38e610be4bf9669be.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RecommentItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RecommentWrapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styled-component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> RecommentItem = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 280px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 50px; </span></span><br><span class=\"line\"><span class=\"string\">  background: url(<span class=\"subst\">$&#123;(props) =&gt; props.imgUrl&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">  background-size: contain;</span></span><br><span class=\"line\"><span class=\"string\">  margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-使用PureComponent来优化组件性能\"><a href=\"#3-使用PureComponent来优化组件性能\" class=\"headerlink\" title=\"3. 使用PureComponent来优化组件性能\"></a>3. 使用PureComponent来优化组件性能</h1><p>在简书项目中首页创建的所有组件几乎都使用了Connect方法来与Store进行了连接，那么只要数据发生了改变，那么每一个组件都会被重新渲染。这时候可以使用之前学到的 <code>shuoldComponentUpdate</code> 来判断改变的数据是否与当前组件相关，如果相关才会重新渲染，否则不渲染。</p>\n<p>在React16中提供了一个新的方法，使用 <code>PureComponent</code> 来代替 <code>Component</code> 创建一个纯组件，使用 <code>PureComponent</code> 创建的组件将要被重新渲染时，会自动判断自己 <code>props</code> 中的数据是否发生了变动，如果发生了变动才会重新渲染自己。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import React, &#123; Component &#125; from 'react'</span></span><br><span class=\"line\"><span class=\"addition\">+ import React, &#123; PureComponent &#125; from 'react'</span></span><br><span class=\"line\">  import &#123; connect &#125; from 'react-redux'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- class Home extends Component &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ class Home extends PureComponent &#123;</span></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const mapState = (state) =&gt; (&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  const mapDispatch = (dispatch) =&gt; (&#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  export default connect(mapState, mapDispatch)(Home);</span><br></pre></td></tr></table></figure>\n\n<p>注意：PureComponent 与 immutable.js 结合使用才有效</p>\n<h1 id=\"4-react-loadable的使用\"><a href=\"#4-react-loadable的使用\" class=\"headerlink\" title=\"4. react-loadable的使用\"></a>4. react-loadable的使用</h1><p><a href=\"https://github.com/jamiebuilds/react-loadable\" target=\"_blank\" rel=\"noopener\">Guide</a></p>\n<p>react-loadable 可以实现异步加载路由，用来优化加载，以修改简书项目中的detail页面为例：</p>\n<ol>\n<li><p>在detail页面的根目录下创建一个 <code>loadable.js</code> 文件：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  /store</span><br><span class=\"line\">  index.js</span><br><span class=\"line\"><span class=\"addition\">+ loadable.js</span></span><br><span class=\"line\">  style.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>loadable.js</code> 中添加</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Loadable <span class=\"keyword\">from</span> <span class=\"string\">'react-loadable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">'./my-loading-component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LoadableComponent = Loadable(&#123;</span><br><span class=\"line\">  loader: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./my-component'</span>),</span><br><span class=\"line\">  loading: Loading,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadableComponent</span>/&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 根据需求修改成合适项目的代码：</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  import Loadable from 'react-loadable';</span><br><span class=\"line\"><span class=\"deletion\">- import Loading from './my-loading-component';</span></span><br><span class=\"line\"><span class=\"addition\">+ import React from 'react'; // 获取语法jsx支持</span></span><br><span class=\"line\"></span><br><span class=\"line\">  const LoadableComponent = Loadable(&#123;</span><br><span class=\"line\">    loader: () =&gt; import('./my-component'),</span><br><span class=\"line\"><span class=\"deletion\">-   loading: Loading,</span></span><br><span class=\"line\"><span class=\"addition\">+   loading()&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     return &lt;div&gt;正在加载&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ export default () =&gt; &lt;LoadableComponent /&gt; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- export default class App extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   render() &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     return &lt;LoadableComponent/&gt;;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改入口文件 <code>App.js</code> 的引入代码</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- import Detail from './pages/detail';</span></span><br><span class=\"line\"><span class=\"addition\">+ import Detail from './pages/detail/loadable.js';</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"4-1-处理路由参数\"><a href=\"#4-1-处理路由参数\" class=\"headerlink\" title=\"4.1 处理路由参数\"></a>4.1 处理路由参数</h2><p>我们首先要明白 react-loadable 改变了组件的加载方式，由之前直接读取 <code>index.js</code> 加载组件，改变为以读取 <code>loadable.js</code> 然后再异步获取 <code>index.js</code>，返回 <code>&lt;LoadableComponent /&gt;</code> 组件来加载新的页面。</p>\n<p>我们在入口文件 <code>App.js</code> 中将路由传递给了由 <code>loadable.js</code> 导出的组件，也就是说，我们将路由传递给的是 <code>&lt;LoadableComponent /&gt;</code> 组件，而并非 <code>index.js</code> 中导出的组件。所以真正的组件无法获取到路由对象，当我们在组件中使用了 <code>this.props.match</code> 时就会报错。</p>\n<p>这时我们需要改写 <code>index.js</code> 来让真正的组件获取到路由的参数。</p>\n<p>首先要引入 react-router-dom 中提供的 <code>withRouter</code> 方法，这个方法可以让我们渲染出的组件可以读取到当前的路由信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br></pre></td></tr></table></figure>\n\n<p>之后再导出组件时，我们要使用 <code>withRouter</code> 来渲染组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapState, mapDispatch)(withRouter(Detail));</span><br></pre></td></tr></table></figure>"},{"title":"使用 alipay-sdk-nodejs 让 node 应用接入支付宝付款","date":"2019-10-22T14:20:28.000Z","_content":"# 1. 开发构思\n\n我们的总体需求是让 node js 应用接入支付宝，完成用户付款，具体流程是：\n\n- 当用户在商户应用点击付款后，页面跳转到支付宝界面，这时会出现两种情况：\n\t- 手机用户唤醒支付宝应用\n\t- PC 唤醒支付宝收银台\n- 用户在支付宝页面进行付款，并完成付款\n- 支付宝检测用户完成付款后向商户应用发送一个 POST 请求作为支付完成的异步回调\n- 商户应用对回调信息进行验证后，对订单状态进行变更\n- 用户返回商户应用，刷新订单界面，显示该订单已支付\n\n# 2. 前期准备\n我们以 Koa 为例，简单演示一下接入支付宝的具体流程，首先安装 Koa 本体以及所需的中间件：\n\n```sh\nnpm install koa koa-router koa-static koa-bodyparser -S\n```\n\n之后需要安装阿里官方提供的 nodejs 端的支付宝 sdk：\n\n```sh\nnpm install alipay-node-sdk -S\n```\n\n当所有的开发依赖准备完成之后，我们可以直接申请应用，同时也可以到支付宝开放平台上使用 [沙箱环境](https://openhome.alipay.com/platform/appDaily.htm) 来模拟真实应用。在此我们以沙箱环境进行开发演示，在沙箱界面需要记住 **APPID**：\n\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMjIvaTdWaGUxY3B3MkFiTFBZLnBuZw?x-oss-process=image/format,png)\n同时点击下方的 RSA2 密钥，并下载密钥生成工具，分别生成私钥和公钥。我们要将生成的 **应用私钥** 记录下来，存放到 `private-key.pem` 文件中；之后再将 \"应用公钥\" 填写到页面中，从而会生成一个 **支付宝公钥** ，记录该公钥到 `public-key.pem` 文件中，前期准备工作完成。如果还不清楚以上流程，参考 [说明文档](https://docs.open.alipay.com/291/105971#LDsXr)。\n\n我们来整理一下文件，将密钥文件整理在一起，这样前期准备工作就完成了：\n```js\n.\n├── package.json\n├── package-lock.json\n├── serve.js // 主服务\n└── static\n    ├── index.html // 客户端\n    └── pem // 密钥存放文件夹\n        ├── private-key.pem\n        └── public-key.pem\n```\n\n# 3. 部署应用\n\n## 3.1 alipay-node-sdk 的使用\n当用户点击付款信按钮，会触发我们服务器上的一个路由条件，在这个路由中，我们的服务器主动向支付宝服务器发送了一个请求，请求中携带着该条支付的信息（如订单号、商品价格等），同时还携带了私钥信息，当支付宝服务器收到该条请求后，会向我们的服务器返回一个付款 url，我们的服务器再将该条 url 信息转发到前端页面上，由前端页面完成跳转逻辑。\n\n而使用 `alipay-node-sdk` 就简化了我们的服务器向支付宝服务器发送请求信息的这一过程，它会将必要的参数与加密信息处理好，我们只需要传入业务参数就可以了。\n\n#### 构建 Sdk 实例\n\n当我们引入 `alipay-node-sdk` 时首先要对其进行实例化以及全局参数的设置：\n\n```js\nconst AlipaySdk = require('alipay-sdk').default;\nconst alipaySdk = new AlipaySdk({\n   appId: '2016**********710', // 之前我们所记录的沙箱环境的 sdk\n   privateKey: fs.readFileSync('./static/pem/private-key.pem', 'ascii'), // 传入私钥\n   gateway: \"https://openapi.alipaydev.com/gateway.do\" // 沙箱环境的请求网关与正式环境不一样，需要在此更改，如果是使用正式环境则去掉此处的设置\n });\n```\n\n#### alipaySdk.exec()\n\n`alipaySdk.exec()`  方法可以帮我们简便的发送一个业务请求，在 [支付API文档](https://docs.open.alipay.com/api_1) 中我们可以查看到所有的业务请求列表，我们以发送一个 [统一收单交易关闭接口(alipay.trade.close)](https://docs.open.alipay.com/api_1/alipay.trade.close) 为例：\n\n```js\nconst result = await alipaySdk.exec('alipay.trade.close', {\n  notifyUrl: 'http://notify_url',\n  appAuthToken: '',\n  // 通过 bizContent 传递请求参数\n  bizContent: {\n    tradeNo: '',\n    outTradeNo: '',\n    operatorId: '',\n  },\n});\n\n// 从官方文档看到，result 包含 tradeNo、outTradeNo 2 个 key\nconsole.log('tradeNo: %s, outTradeNo: %s', result.tradeNo, result.outTradeNo);\n```\n\n> 这是 alipay-sdk-nodejs 官方提供的演示 demo\n\n这就引出了我们接下来需要用到的两个接口：\n\n-  [alipay.trade.wap.pay(手机网站支付接口2.0)](https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/)：用于返回手机端的支付唤起地址\n- [alipay.trade.page.pay(统一收单下单并支付页面接口)](https://docs.open.alipay.com/api_1/alipay.trade.page.pay/)：用于返回 PC 端的支付宝收银台地址\n\n#### AlipayFormData.addField()\n\n如果我们按照上述的方式去请求 alipay.trade.wap.pay 以及 alipay.trade.page.pay 两个接口的话是会返回错误信息的。因为这两个接口属于页面类接口，页面类接口默认返回的数据为 html 代码片段。这类接口我们需要创建一个 FormData 去请求，**而不能直接使用 `alipaySdk.exec()` 传入业务参数**。\n\nSdk 提供了一个 `AlipayFormData` 可以方便我们的创建，这里我们以 alipay.trade.page.pay 接口为示例：\n\n```js\n// TypeScript\n// import AlipayFormData from 'alipay-sdk/lib/form'; \n\n// js\nconst AlipayFormData = require('alipay-sdk/lib/form').default\n\nconst formData = new AlipayFormData();\n// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url，否则返回的是一个表单的 html 片段\nformData.setMethod('get');\n\nformData.addField('notifyUrl', 'http://www.com/notify'); // 当支付完成后，支付宝主动向我们的服务器发送回调的地址\nformData.addField('returnUrl', 'http://www.com/return'); // 当支付完成后，当前页面跳转的地址\nformData.addField('bizContent', {\n  outTradeNo: 'out_trade_no',\n  productCode: 'FAST_INSTANT_TRADE_PAY',\n  totalAmount: '0.01',\n  subject: '商品',\n  body: '商品详情',\n});\n\nconst result = await alipaySdk.exec(\n  'alipay.trade.page.pay',\n  {},\n  { formData: formData },\n);\n\n// result 为可以跳转到支付链接的 url\nconsole.log(result);\n```\n\n在这里要特别注意，支付宝在用户付款完成后，会向我们的服务器发送一条 **POST 方式** 的异步回调，这个回调地址必须是外网可以访问到的，也就是说这一过程我们必须在线上开发。\n\n## 3.2 Demo\n\n介绍完了alipay-node-sdk 的使用，那么接下来就上一个完整的示例进行整体的演示，由于上面已经演示了如何请求 alipay.trade.page.pay(统一收单下单并支付页面接口)，那么接下来就演示一下如何请求 alipay.trade.wap.pay(手机网站支付接口2.0) 让用户进行手机支付：\n\n> 注意项目必须在线上开发！否则只会跳转到支付宝界面而接收不到支付宝的异步回调！\n\n整体目录：\n\n```sh\n├── package.json\n├── package-lock.json\n├── serve.js \n└── static\n    ├── index.html\n    └── pem \n        ├── private-key.pem\n        └── public-key.pem\n```\n\nserve.js\n\n```js\nconst Koa = require('koa')\nconst Router = require('koa-router')\nconst static = require('koa-static')\nconst path = require('path')\nconst fs = require('fs')\nconst AlipaySdk = require('alipay-sdk').default;\nconst AlipayFormData = require('alipay-sdk/lib/form').default\nconst bodyParser = require('koa-bodyparser')\n\nconst app = new Koa()\nconst router = new Router()\n\nconst staticPath = './static'\napp.use(static(\n  path.join(__dirname, staticPath)\n))\n\napp.use(bodyParser())\n\nrouter.get('/pay', async (ctx, next) => {\n  const alipaySdk = new AlipaySdk({\n    appId: '20161*******6710',\n    privateKey: fs.readFileSync('./static/pem/private-key.pem', 'ascii'),\n    gateway: \"https://openapi.alipaydev.com/gateway.do\"\n  });\n\n\n  const formData = new AlipayFormData()\n  formData.setMethod(\"get\")\n  formData.addField(\"notifyUrl\", \"http://online_serve_url/paycallback\") // 回调地址必须为当前服务的线上地址！\n  formData.addField(\"returnUrl\", \"http://online_serve_url/success\")\n  formData.addField(\"bizContent\", {\n    body: \"测试商品\",\n    subject: \"女装\",\n    outTradeNo: new Date().valueOf(),\n    totalAmount: \"88.88\",\n    quitUrl: \"http://www.taobao.com/product/113714.html\",\n    productCode: \"QUICK_WAP_WAY\"\n  })\n  const result = await alipaySdk.exec(\"alipay.trade.wap.pay\", {}, {\n    formData: formData,\n    validateSign: true\n  })\n  ctx.body = result\n})\n\nrouter.post('/paycallback', async (ctx, next) => {\n  let postData = ctx.request.body;\n  console.log(\"触发付款\");\n  if (postData.trade_status === \"TRADE_SUCCESS\") {\n    let data = ctx.request.body // 订单信息\n  \t// ========= 由请求体内的订单信息，在这里进行数据库中订单状态的更改 ============\n    console.log(\"支付完成！\");\n  }\n})\n\nrouter.get('/success', async (ctx, next) => {\n  ctx.body = \"支付成功\"\n})\n\n\napp.use(router.routes())\n\napp.listen(9090)\n```\n\nindex.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <script src=\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"></script>\n  <script src=\"https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js\"></script>\n  <script>\n    window.onload = function () {\n      let oPay = document.querySelector(\"#pay\")\n      oPay.addEventListener('click', function () {\n        axios.get('http://47.106.226.190:9090/pay').then(res => {\n          window.open(res.data);\n        })\n      })\n    }\n  </script>\n</head>\n\n<body>\n  <button id=\"pay\">创建付款</button>\n  <div id=\"form\"></div>\n</body>\n\n</html>\n```\n\n> PS：接收到支付宝的异步回调之后，还需要进行异步回调的验签，以保证回调是由支付宝发送的，这个目前还没有研究出来，等研究出来再更新吧。\n","source":"_posts/2019/使用alipay-sdk-nodejs让node应用接入支付宝付款.md","raw":"---\ntitle: 使用 alipay-sdk-nodejs 让 node 应用接入支付宝付款\ndate: 2019-10-22 22:20:28\ntags: [Node, 支付宝]\ncategories:\n  - Back\n  - Node\n---\n# 1. 开发构思\n\n我们的总体需求是让 node js 应用接入支付宝，完成用户付款，具体流程是：\n\n- 当用户在商户应用点击付款后，页面跳转到支付宝界面，这时会出现两种情况：\n\t- 手机用户唤醒支付宝应用\n\t- PC 唤醒支付宝收银台\n- 用户在支付宝页面进行付款，并完成付款\n- 支付宝检测用户完成付款后向商户应用发送一个 POST 请求作为支付完成的异步回调\n- 商户应用对回调信息进行验证后，对订单状态进行变更\n- 用户返回商户应用，刷新订单界面，显示该订单已支付\n\n# 2. 前期准备\n我们以 Koa 为例，简单演示一下接入支付宝的具体流程，首先安装 Koa 本体以及所需的中间件：\n\n```sh\nnpm install koa koa-router koa-static koa-bodyparser -S\n```\n\n之后需要安装阿里官方提供的 nodejs 端的支付宝 sdk：\n\n```sh\nnpm install alipay-node-sdk -S\n```\n\n当所有的开发依赖准备完成之后，我们可以直接申请应用，同时也可以到支付宝开放平台上使用 [沙箱环境](https://openhome.alipay.com/platform/appDaily.htm) 来模拟真实应用。在此我们以沙箱环境进行开发演示，在沙箱界面需要记住 **APPID**：\n\n![image.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMjIvaTdWaGUxY3B3MkFiTFBZLnBuZw?x-oss-process=image/format,png)\n同时点击下方的 RSA2 密钥，并下载密钥生成工具，分别生成私钥和公钥。我们要将生成的 **应用私钥** 记录下来，存放到 `private-key.pem` 文件中；之后再将 \"应用公钥\" 填写到页面中，从而会生成一个 **支付宝公钥** ，记录该公钥到 `public-key.pem` 文件中，前期准备工作完成。如果还不清楚以上流程，参考 [说明文档](https://docs.open.alipay.com/291/105971#LDsXr)。\n\n我们来整理一下文件，将密钥文件整理在一起，这样前期准备工作就完成了：\n```js\n.\n├── package.json\n├── package-lock.json\n├── serve.js // 主服务\n└── static\n    ├── index.html // 客户端\n    └── pem // 密钥存放文件夹\n        ├── private-key.pem\n        └── public-key.pem\n```\n\n# 3. 部署应用\n\n## 3.1 alipay-node-sdk 的使用\n当用户点击付款信按钮，会触发我们服务器上的一个路由条件，在这个路由中，我们的服务器主动向支付宝服务器发送了一个请求，请求中携带着该条支付的信息（如订单号、商品价格等），同时还携带了私钥信息，当支付宝服务器收到该条请求后，会向我们的服务器返回一个付款 url，我们的服务器再将该条 url 信息转发到前端页面上，由前端页面完成跳转逻辑。\n\n而使用 `alipay-node-sdk` 就简化了我们的服务器向支付宝服务器发送请求信息的这一过程，它会将必要的参数与加密信息处理好，我们只需要传入业务参数就可以了。\n\n#### 构建 Sdk 实例\n\n当我们引入 `alipay-node-sdk` 时首先要对其进行实例化以及全局参数的设置：\n\n```js\nconst AlipaySdk = require('alipay-sdk').default;\nconst alipaySdk = new AlipaySdk({\n   appId: '2016**********710', // 之前我们所记录的沙箱环境的 sdk\n   privateKey: fs.readFileSync('./static/pem/private-key.pem', 'ascii'), // 传入私钥\n   gateway: \"https://openapi.alipaydev.com/gateway.do\" // 沙箱环境的请求网关与正式环境不一样，需要在此更改，如果是使用正式环境则去掉此处的设置\n });\n```\n\n#### alipaySdk.exec()\n\n`alipaySdk.exec()`  方法可以帮我们简便的发送一个业务请求，在 [支付API文档](https://docs.open.alipay.com/api_1) 中我们可以查看到所有的业务请求列表，我们以发送一个 [统一收单交易关闭接口(alipay.trade.close)](https://docs.open.alipay.com/api_1/alipay.trade.close) 为例：\n\n```js\nconst result = await alipaySdk.exec('alipay.trade.close', {\n  notifyUrl: 'http://notify_url',\n  appAuthToken: '',\n  // 通过 bizContent 传递请求参数\n  bizContent: {\n    tradeNo: '',\n    outTradeNo: '',\n    operatorId: '',\n  },\n});\n\n// 从官方文档看到，result 包含 tradeNo、outTradeNo 2 个 key\nconsole.log('tradeNo: %s, outTradeNo: %s', result.tradeNo, result.outTradeNo);\n```\n\n> 这是 alipay-sdk-nodejs 官方提供的演示 demo\n\n这就引出了我们接下来需要用到的两个接口：\n\n-  [alipay.trade.wap.pay(手机网站支付接口2.0)](https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/)：用于返回手机端的支付唤起地址\n- [alipay.trade.page.pay(统一收单下单并支付页面接口)](https://docs.open.alipay.com/api_1/alipay.trade.page.pay/)：用于返回 PC 端的支付宝收银台地址\n\n#### AlipayFormData.addField()\n\n如果我们按照上述的方式去请求 alipay.trade.wap.pay 以及 alipay.trade.page.pay 两个接口的话是会返回错误信息的。因为这两个接口属于页面类接口，页面类接口默认返回的数据为 html 代码片段。这类接口我们需要创建一个 FormData 去请求，**而不能直接使用 `alipaySdk.exec()` 传入业务参数**。\n\nSdk 提供了一个 `AlipayFormData` 可以方便我们的创建，这里我们以 alipay.trade.page.pay 接口为示例：\n\n```js\n// TypeScript\n// import AlipayFormData from 'alipay-sdk/lib/form'; \n\n// js\nconst AlipayFormData = require('alipay-sdk/lib/form').default\n\nconst formData = new AlipayFormData();\n// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url，否则返回的是一个表单的 html 片段\nformData.setMethod('get');\n\nformData.addField('notifyUrl', 'http://www.com/notify'); // 当支付完成后，支付宝主动向我们的服务器发送回调的地址\nformData.addField('returnUrl', 'http://www.com/return'); // 当支付完成后，当前页面跳转的地址\nformData.addField('bizContent', {\n  outTradeNo: 'out_trade_no',\n  productCode: 'FAST_INSTANT_TRADE_PAY',\n  totalAmount: '0.01',\n  subject: '商品',\n  body: '商品详情',\n});\n\nconst result = await alipaySdk.exec(\n  'alipay.trade.page.pay',\n  {},\n  { formData: formData },\n);\n\n// result 为可以跳转到支付链接的 url\nconsole.log(result);\n```\n\n在这里要特别注意，支付宝在用户付款完成后，会向我们的服务器发送一条 **POST 方式** 的异步回调，这个回调地址必须是外网可以访问到的，也就是说这一过程我们必须在线上开发。\n\n## 3.2 Demo\n\n介绍完了alipay-node-sdk 的使用，那么接下来就上一个完整的示例进行整体的演示，由于上面已经演示了如何请求 alipay.trade.page.pay(统一收单下单并支付页面接口)，那么接下来就演示一下如何请求 alipay.trade.wap.pay(手机网站支付接口2.0) 让用户进行手机支付：\n\n> 注意项目必须在线上开发！否则只会跳转到支付宝界面而接收不到支付宝的异步回调！\n\n整体目录：\n\n```sh\n├── package.json\n├── package-lock.json\n├── serve.js \n└── static\n    ├── index.html\n    └── pem \n        ├── private-key.pem\n        └── public-key.pem\n```\n\nserve.js\n\n```js\nconst Koa = require('koa')\nconst Router = require('koa-router')\nconst static = require('koa-static')\nconst path = require('path')\nconst fs = require('fs')\nconst AlipaySdk = require('alipay-sdk').default;\nconst AlipayFormData = require('alipay-sdk/lib/form').default\nconst bodyParser = require('koa-bodyparser')\n\nconst app = new Koa()\nconst router = new Router()\n\nconst staticPath = './static'\napp.use(static(\n  path.join(__dirname, staticPath)\n))\n\napp.use(bodyParser())\n\nrouter.get('/pay', async (ctx, next) => {\n  const alipaySdk = new AlipaySdk({\n    appId: '20161*******6710',\n    privateKey: fs.readFileSync('./static/pem/private-key.pem', 'ascii'),\n    gateway: \"https://openapi.alipaydev.com/gateway.do\"\n  });\n\n\n  const formData = new AlipayFormData()\n  formData.setMethod(\"get\")\n  formData.addField(\"notifyUrl\", \"http://online_serve_url/paycallback\") // 回调地址必须为当前服务的线上地址！\n  formData.addField(\"returnUrl\", \"http://online_serve_url/success\")\n  formData.addField(\"bizContent\", {\n    body: \"测试商品\",\n    subject: \"女装\",\n    outTradeNo: new Date().valueOf(),\n    totalAmount: \"88.88\",\n    quitUrl: \"http://www.taobao.com/product/113714.html\",\n    productCode: \"QUICK_WAP_WAY\"\n  })\n  const result = await alipaySdk.exec(\"alipay.trade.wap.pay\", {}, {\n    formData: formData,\n    validateSign: true\n  })\n  ctx.body = result\n})\n\nrouter.post('/paycallback', async (ctx, next) => {\n  let postData = ctx.request.body;\n  console.log(\"触发付款\");\n  if (postData.trade_status === \"TRADE_SUCCESS\") {\n    let data = ctx.request.body // 订单信息\n  \t// ========= 由请求体内的订单信息，在这里进行数据库中订单状态的更改 ============\n    console.log(\"支付完成！\");\n  }\n})\n\nrouter.get('/success', async (ctx, next) => {\n  ctx.body = \"支付成功\"\n})\n\n\napp.use(router.routes())\n\napp.listen(9090)\n```\n\nindex.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <script src=\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"></script>\n  <script src=\"https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js\"></script>\n  <script>\n    window.onload = function () {\n      let oPay = document.querySelector(\"#pay\")\n      oPay.addEventListener('click', function () {\n        axios.get('http://47.106.226.190:9090/pay').then(res => {\n          window.open(res.data);\n        })\n      })\n    }\n  </script>\n</head>\n\n<body>\n  <button id=\"pay\">创建付款</button>\n  <div id=\"form\"></div>\n</body>\n\n</html>\n```\n\n> PS：接收到支付宝的异步回调之后，还需要进行异步回调的验签，以保证回调是由支付宝发送的，这个目前还没有研究出来，等研究出来再更新吧。\n","slug":"使用alipay-sdk-nodejs让node应用接入支付宝付款","published":1,"updated":"2019-11-09T14:21:38.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfj00443w4uebbx91xt","content":"<h1 id=\"1-开发构思\"><a href=\"#1-开发构思\" class=\"headerlink\" title=\"1. 开发构思\"></a>1. 开发构思</h1><p>我们的总体需求是让 node js 应用接入支付宝，完成用户付款，具体流程是：</p>\n<ul>\n<li>当用户在商户应用点击付款后，页面跳转到支付宝界面，这时会出现两种情况：<ul>\n<li>手机用户唤醒支付宝应用</li>\n<li>PC 唤醒支付宝收银台</li>\n</ul>\n</li>\n<li>用户在支付宝页面进行付款，并完成付款</li>\n<li>支付宝检测用户完成付款后向商户应用发送一个 POST 请求作为支付完成的异步回调</li>\n<li>商户应用对回调信息进行验证后，对订单状态进行变更</li>\n<li>用户返回商户应用，刷新订单界面，显示该订单已支付</li>\n</ul>\n<h1 id=\"2-前期准备\"><a href=\"#2-前期准备\" class=\"headerlink\" title=\"2. 前期准备\"></a>2. 前期准备</h1><p>我们以 Koa 为例，简单演示一下接入支付宝的具体流程，首先安装 Koa 本体以及所需的中间件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install koa koa-router koa-static koa-bodyparser -S</span><br></pre></td></tr></table></figure>\n\n<p>之后需要安装阿里官方提供的 nodejs 端的支付宝 sdk：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install alipay-node-sdk -S</span><br></pre></td></tr></table></figure>\n\n<p>当所有的开发依赖准备完成之后，我们可以直接申请应用，同时也可以到支付宝开放平台上使用 <a href=\"https://openhome.alipay.com/platform/appDaily.htm\" target=\"_blank\" rel=\"noopener\">沙箱环境</a> 来模拟真实应用。在此我们以沙箱环境进行开发演示，在沙箱界面需要记住 <strong>APPID</strong>：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMjIvaTdWaGUxY3B3MkFiTFBZLnBuZw?x-oss-process=image/format,png\" alt=\"image.png\"><br>同时点击下方的 RSA2 密钥，并下载密钥生成工具，分别生成私钥和公钥。我们要将生成的 <strong>应用私钥</strong> 记录下来，存放到 <code>private-key.pem</code> 文件中；之后再将 “应用公钥” 填写到页面中，从而会生成一个 <strong>支付宝公钥</strong> ，记录该公钥到 <code>public-key.pem</code> 文件中，前期准备工作完成。如果还不清楚以上流程，参考 <a href=\"https://docs.open.alipay.com/291/105971#LDsXr\" target=\"_blank\" rel=\"noopener\">说明文档</a>。</p>\n<p>我们来整理一下文件，将密钥文件整理在一起，这样前期准备工作就完成了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── serve.js <span class=\"comment\">// 主服务</span></span><br><span class=\"line\">└── <span class=\"keyword\">static</span></span><br><span class=\"line\">    ├── index.html <span class=\"comment\">// 客户端</span></span><br><span class=\"line\">    └── pem <span class=\"comment\">// 密钥存放文件夹</span></span><br><span class=\"line\">        ├── private-key.pem</span><br><span class=\"line\">        └── public-key.pem</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-部署应用\"><a href=\"#3-部署应用\" class=\"headerlink\" title=\"3. 部署应用\"></a>3. 部署应用</h1><h2 id=\"3-1-alipay-node-sdk-的使用\"><a href=\"#3-1-alipay-node-sdk-的使用\" class=\"headerlink\" title=\"3.1 alipay-node-sdk 的使用\"></a>3.1 alipay-node-sdk 的使用</h2><p>当用户点击付款信按钮，会触发我们服务器上的一个路由条件，在这个路由中，我们的服务器主动向支付宝服务器发送了一个请求，请求中携带着该条支付的信息（如订单号、商品价格等），同时还携带了私钥信息，当支付宝服务器收到该条请求后，会向我们的服务器返回一个付款 url，我们的服务器再将该条 url 信息转发到前端页面上，由前端页面完成跳转逻辑。</p>\n<p>而使用 <code>alipay-node-sdk</code> 就简化了我们的服务器向支付宝服务器发送请求信息的这一过程，它会将必要的参数与加密信息处理好，我们只需要传入业务参数就可以了。</p>\n<h4 id=\"构建-Sdk-实例\"><a href=\"#构建-Sdk-实例\" class=\"headerlink\" title=\"构建 Sdk 实例\"></a>构建 Sdk 实例</h4><p>当我们引入 <code>alipay-node-sdk</code> 时首先要对其进行实例化以及全局参数的设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AlipaySdk = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alipaySdk = <span class=\"keyword\">new</span> AlipaySdk(&#123;</span><br><span class=\"line\">   appId: <span class=\"string\">'2016**********710'</span>, <span class=\"comment\">// 之前我们所记录的沙箱环境的 sdk</span></span><br><span class=\"line\">   privateKey: fs.readFileSync(<span class=\"string\">'./static/pem/private-key.pem'</span>, <span class=\"string\">'ascii'</span>), <span class=\"comment\">// 传入私钥</span></span><br><span class=\"line\">   gateway: <span class=\"string\">\"https://openapi.alipaydev.com/gateway.do\"</span> <span class=\"comment\">// 沙箱环境的请求网关与正式环境不一样，需要在此更改，如果是使用正式环境则去掉此处的设置</span></span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"alipaySdk-exec\"><a href=\"#alipaySdk-exec\" class=\"headerlink\" title=\"alipaySdk.exec()\"></a>alipaySdk.exec()</h4><p><code>alipaySdk.exec()</code>  方法可以帮我们简便的发送一个业务请求，在 <a href=\"https://docs.open.alipay.com/api_1\" target=\"_blank\" rel=\"noopener\">支付API文档</a> 中我们可以查看到所有的业务请求列表，我们以发送一个 <a href=\"https://docs.open.alipay.com/api_1/alipay.trade.close\" target=\"_blank\" rel=\"noopener\">统一收单交易关闭接口(alipay.trade.close)</a> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(<span class=\"string\">'alipay.trade.close'</span>, &#123;</span><br><span class=\"line\">  notifyUrl: <span class=\"string\">'http://notify_url'</span>,</span><br><span class=\"line\">  appAuthToken: <span class=\"string\">''</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 通过 bizContent 传递请求参数</span></span><br><span class=\"line\">  bizContent: &#123;</span><br><span class=\"line\">    tradeNo: <span class=\"string\">''</span>,</span><br><span class=\"line\">    outTradeNo: <span class=\"string\">''</span>,</span><br><span class=\"line\">    operatorId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从官方文档看到，result 包含 tradeNo、outTradeNo 2 个 key</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'tradeNo: %s, outTradeNo: %s'</span>, result.tradeNo, result.outTradeNo);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是 alipay-sdk-nodejs 官方提供的演示 demo</p>\n</blockquote>\n<p>这就引出了我们接下来需要用到的两个接口：</p>\n<ul>\n<li><a href=\"https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/\" target=\"_blank\" rel=\"noopener\">alipay.trade.wap.pay(手机网站支付接口2.0)</a>：用于返回手机端的支付唤起地址</li>\n<li><a href=\"https://docs.open.alipay.com/api_1/alipay.trade.page.pay/\" target=\"_blank\" rel=\"noopener\">alipay.trade.page.pay(统一收单下单并支付页面接口)</a>：用于返回 PC 端的支付宝收银台地址</li>\n</ul>\n<h4 id=\"AlipayFormData-addField\"><a href=\"#AlipayFormData-addField\" class=\"headerlink\" title=\"AlipayFormData.addField()\"></a>AlipayFormData.addField()</h4><p>如果我们按照上述的方式去请求 alipay.trade.wap.pay 以及 alipay.trade.page.pay 两个接口的话是会返回错误信息的。因为这两个接口属于页面类接口，页面类接口默认返回的数据为 html 代码片段。这类接口我们需要创建一个 FormData 去请求，<strong>而不能直接使用 <code>alipaySdk.exec()</code> 传入业务参数</strong>。</p>\n<p>Sdk 提供了一个 <code>AlipayFormData</code> 可以方便我们的创建，这里我们以 alipay.trade.page.pay 接口为示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TypeScript</span></span><br><span class=\"line\"><span class=\"comment\">// import AlipayFormData from 'alipay-sdk/lib/form'; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipayFormData = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk/lib/form'</span>).default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> AlipayFormData();</span><br><span class=\"line\"><span class=\"comment\">// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url，否则返回的是一个表单的 html 片段</span></span><br><span class=\"line\">formData.setMethod(<span class=\"string\">'get'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">formData.addField(<span class=\"string\">'notifyUrl'</span>, <span class=\"string\">'http://www.com/notify'</span>); <span class=\"comment\">// 当支付完成后，支付宝主动向我们的服务器发送回调的地址</span></span><br><span class=\"line\">formData.addField(<span class=\"string\">'returnUrl'</span>, <span class=\"string\">'http://www.com/return'</span>); <span class=\"comment\">// 当支付完成后，当前页面跳转的地址</span></span><br><span class=\"line\">formData.addField(<span class=\"string\">'bizContent'</span>, &#123;</span><br><span class=\"line\">  outTradeNo: <span class=\"string\">'out_trade_no'</span>,</span><br><span class=\"line\">  productCode: <span class=\"string\">'FAST_INSTANT_TRADE_PAY'</span>,</span><br><span class=\"line\">  totalAmount: <span class=\"string\">'0.01'</span>,</span><br><span class=\"line\">  subject: <span class=\"string\">'商品'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'商品详情'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(</span><br><span class=\"line\">  <span class=\"string\">'alipay.trade.page.pay'</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">formData</span>: formData &#125;,</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result 为可以跳转到支付链接的 url</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>在这里要特别注意，支付宝在用户付款完成后，会向我们的服务器发送一条 <strong>POST 方式</strong> 的异步回调，这个回调地址必须是外网可以访问到的，也就是说这一过程我们必须在线上开发。</p>\n<h2 id=\"3-2-Demo\"><a href=\"#3-2-Demo\" class=\"headerlink\" title=\"3.2 Demo\"></a>3.2 Demo</h2><p>介绍完了alipay-node-sdk 的使用，那么接下来就上一个完整的示例进行整体的演示，由于上面已经演示了如何请求 alipay.trade.page.pay(统一收单下单并支付页面接口)，那么接下来就演示一下如何请求 alipay.trade.wap.pay(手机网站支付接口2.0) 让用户进行手机支付：</p>\n<blockquote>\n<p>注意项目必须在线上开发！否则只会跳转到支付宝界面而接收不到支付宝的异步回调！</p>\n</blockquote>\n<p>整体目录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── package.json</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── serve.js </span><br><span class=\"line\">└── static</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    └── pem </span><br><span class=\"line\">        ├── private-key.pem</span><br><span class=\"line\">        └── public-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>serve.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipaySdk = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipayFormData = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk/lib/form'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticPath = <span class=\"string\">'./static'</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(</span><br><span class=\"line\">  path.join(__dirname, staticPath)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/pay'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> alipaySdk = <span class=\"keyword\">new</span> AlipaySdk(&#123;</span><br><span class=\"line\">    appId: <span class=\"string\">'20161*******6710'</span>,</span><br><span class=\"line\">    privateKey: fs.readFileSync(<span class=\"string\">'./static/pem/private-key.pem'</span>, <span class=\"string\">'ascii'</span>),</span><br><span class=\"line\">    gateway: <span class=\"string\">\"https://openapi.alipaydev.com/gateway.do\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> AlipayFormData()</span><br><span class=\"line\">  formData.setMethod(<span class=\"string\">\"get\"</span>)</span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"notifyUrl\"</span>, <span class=\"string\">\"http://online_serve_url/paycallback\"</span>) <span class=\"comment\">// 回调地址必须为当前服务的线上地址！</span></span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"returnUrl\"</span>, <span class=\"string\">\"http://online_serve_url/success\"</span>)</span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"bizContent\"</span>, &#123;</span><br><span class=\"line\">    body: <span class=\"string\">\"测试商品\"</span>,</span><br><span class=\"line\">    subject: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    outTradeNo: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf(),</span><br><span class=\"line\">    totalAmount: <span class=\"string\">\"88.88\"</span>,</span><br><span class=\"line\">    quitUrl: <span class=\"string\">\"http://www.taobao.com/product/113714.html\"</span>,</span><br><span class=\"line\">    productCode: <span class=\"string\">\"QUICK_WAP_WAY\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(<span class=\"string\">\"alipay.trade.wap.pay\"</span>, &#123;&#125;, &#123;</span><br><span class=\"line\">    formData: formData,</span><br><span class=\"line\">    validateSign: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ctx.body = result</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/paycallback'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> postData = ctx.request.body;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"触发付款\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (postData.trade_status === <span class=\"string\">\"TRADE_SUCCESS\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = ctx.request.body <span class=\"comment\">// 订单信息</span></span><br><span class=\"line\">  \t<span class=\"comment\">// ========= 由请求体内的订单信息，在这里进行数据库中订单状态的更改 ============</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"支付完成！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/success'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">\"支付成功\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">9090</span>)</span><br></pre></td></tr></table></figure>\n\n<p>index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> oPay = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#pay\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">      oPay.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        axios.get(<span class=\"string\">'http://47.106.226.190:9090/pay'</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">window</span>.open(res.data);</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pay\"</span>&gt;</span>创建付款<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"form\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：接收到支付宝的异步回调之后，还需要进行异步回调的验签，以保证回调是由支付宝发送的，这个目前还没有研究出来，等研究出来再更新吧。</p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-开发构思\"><a href=\"#1-开发构思\" class=\"headerlink\" title=\"1. 开发构思\"></a>1. 开发构思</h1><p>我们的总体需求是让 node js 应用接入支付宝，完成用户付款，具体流程是：</p>\n<ul>\n<li>当用户在商户应用点击付款后，页面跳转到支付宝界面，这时会出现两种情况：<ul>\n<li>手机用户唤醒支付宝应用</li>\n<li>PC 唤醒支付宝收银台</li>\n</ul>\n</li>\n<li>用户在支付宝页面进行付款，并完成付款</li>\n<li>支付宝检测用户完成付款后向商户应用发送一个 POST 请求作为支付完成的异步回调</li>\n<li>商户应用对回调信息进行验证后，对订单状态进行变更</li>\n<li>用户返回商户应用，刷新订单界面，显示该订单已支付</li>\n</ul>\n<h1 id=\"2-前期准备\"><a href=\"#2-前期准备\" class=\"headerlink\" title=\"2. 前期准备\"></a>2. 前期准备</h1><p>我们以 Koa 为例，简单演示一下接入支付宝的具体流程，首先安装 Koa 本体以及所需的中间件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install koa koa-router koa-static koa-bodyparser -S</span><br></pre></td></tr></table></figure>\n\n<p>之后需要安装阿里官方提供的 nodejs 端的支付宝 sdk：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install alipay-node-sdk -S</span><br></pre></td></tr></table></figure>\n\n<p>当所有的开发依赖准备完成之后，我们可以直接申请应用，同时也可以到支付宝开放平台上使用 <a href=\"https://openhome.alipay.com/platform/appDaily.htm\" target=\"_blank\" rel=\"noopener\">沙箱环境</a> 来模拟真实应用。在此我们以沙箱环境进行开发演示，在沙箱界面需要记住 <strong>APPID</strong>：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMjIvaTdWaGUxY3B3MkFiTFBZLnBuZw?x-oss-process=image/format,png\" alt=\"image.png\"><br>同时点击下方的 RSA2 密钥，并下载密钥生成工具，分别生成私钥和公钥。我们要将生成的 <strong>应用私钥</strong> 记录下来，存放到 <code>private-key.pem</code> 文件中；之后再将 “应用公钥” 填写到页面中，从而会生成一个 <strong>支付宝公钥</strong> ，记录该公钥到 <code>public-key.pem</code> 文件中，前期准备工作完成。如果还不清楚以上流程，参考 <a href=\"https://docs.open.alipay.com/291/105971#LDsXr\" target=\"_blank\" rel=\"noopener\">说明文档</a>。</p>\n<p>我们来整理一下文件，将密钥文件整理在一起，这样前期准备工作就完成了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── serve.js <span class=\"comment\">// 主服务</span></span><br><span class=\"line\">└── <span class=\"keyword\">static</span></span><br><span class=\"line\">    ├── index.html <span class=\"comment\">// 客户端</span></span><br><span class=\"line\">    └── pem <span class=\"comment\">// 密钥存放文件夹</span></span><br><span class=\"line\">        ├── private-key.pem</span><br><span class=\"line\">        └── public-key.pem</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-部署应用\"><a href=\"#3-部署应用\" class=\"headerlink\" title=\"3. 部署应用\"></a>3. 部署应用</h1><h2 id=\"3-1-alipay-node-sdk-的使用\"><a href=\"#3-1-alipay-node-sdk-的使用\" class=\"headerlink\" title=\"3.1 alipay-node-sdk 的使用\"></a>3.1 alipay-node-sdk 的使用</h2><p>当用户点击付款信按钮，会触发我们服务器上的一个路由条件，在这个路由中，我们的服务器主动向支付宝服务器发送了一个请求，请求中携带着该条支付的信息（如订单号、商品价格等），同时还携带了私钥信息，当支付宝服务器收到该条请求后，会向我们的服务器返回一个付款 url，我们的服务器再将该条 url 信息转发到前端页面上，由前端页面完成跳转逻辑。</p>\n<p>而使用 <code>alipay-node-sdk</code> 就简化了我们的服务器向支付宝服务器发送请求信息的这一过程，它会将必要的参数与加密信息处理好，我们只需要传入业务参数就可以了。</p>\n<h4 id=\"构建-Sdk-实例\"><a href=\"#构建-Sdk-实例\" class=\"headerlink\" title=\"构建 Sdk 实例\"></a>构建 Sdk 实例</h4><p>当我们引入 <code>alipay-node-sdk</code> 时首先要对其进行实例化以及全局参数的设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AlipaySdk = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alipaySdk = <span class=\"keyword\">new</span> AlipaySdk(&#123;</span><br><span class=\"line\">   appId: <span class=\"string\">'2016**********710'</span>, <span class=\"comment\">// 之前我们所记录的沙箱环境的 sdk</span></span><br><span class=\"line\">   privateKey: fs.readFileSync(<span class=\"string\">'./static/pem/private-key.pem'</span>, <span class=\"string\">'ascii'</span>), <span class=\"comment\">// 传入私钥</span></span><br><span class=\"line\">   gateway: <span class=\"string\">\"https://openapi.alipaydev.com/gateway.do\"</span> <span class=\"comment\">// 沙箱环境的请求网关与正式环境不一样，需要在此更改，如果是使用正式环境则去掉此处的设置</span></span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"alipaySdk-exec\"><a href=\"#alipaySdk-exec\" class=\"headerlink\" title=\"alipaySdk.exec()\"></a>alipaySdk.exec()</h4><p><code>alipaySdk.exec()</code>  方法可以帮我们简便的发送一个业务请求，在 <a href=\"https://docs.open.alipay.com/api_1\" target=\"_blank\" rel=\"noopener\">支付API文档</a> 中我们可以查看到所有的业务请求列表，我们以发送一个 <a href=\"https://docs.open.alipay.com/api_1/alipay.trade.close\" target=\"_blank\" rel=\"noopener\">统一收单交易关闭接口(alipay.trade.close)</a> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(<span class=\"string\">'alipay.trade.close'</span>, &#123;</span><br><span class=\"line\">  notifyUrl: <span class=\"string\">'http://notify_url'</span>,</span><br><span class=\"line\">  appAuthToken: <span class=\"string\">''</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 通过 bizContent 传递请求参数</span></span><br><span class=\"line\">  bizContent: &#123;</span><br><span class=\"line\">    tradeNo: <span class=\"string\">''</span>,</span><br><span class=\"line\">    outTradeNo: <span class=\"string\">''</span>,</span><br><span class=\"line\">    operatorId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从官方文档看到，result 包含 tradeNo、outTradeNo 2 个 key</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'tradeNo: %s, outTradeNo: %s'</span>, result.tradeNo, result.outTradeNo);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是 alipay-sdk-nodejs 官方提供的演示 demo</p>\n</blockquote>\n<p>这就引出了我们接下来需要用到的两个接口：</p>\n<ul>\n<li><a href=\"https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/\" target=\"_blank\" rel=\"noopener\">alipay.trade.wap.pay(手机网站支付接口2.0)</a>：用于返回手机端的支付唤起地址</li>\n<li><a href=\"https://docs.open.alipay.com/api_1/alipay.trade.page.pay/\" target=\"_blank\" rel=\"noopener\">alipay.trade.page.pay(统一收单下单并支付页面接口)</a>：用于返回 PC 端的支付宝收银台地址</li>\n</ul>\n<h4 id=\"AlipayFormData-addField\"><a href=\"#AlipayFormData-addField\" class=\"headerlink\" title=\"AlipayFormData.addField()\"></a>AlipayFormData.addField()</h4><p>如果我们按照上述的方式去请求 alipay.trade.wap.pay 以及 alipay.trade.page.pay 两个接口的话是会返回错误信息的。因为这两个接口属于页面类接口，页面类接口默认返回的数据为 html 代码片段。这类接口我们需要创建一个 FormData 去请求，<strong>而不能直接使用 <code>alipaySdk.exec()</code> 传入业务参数</strong>。</p>\n<p>Sdk 提供了一个 <code>AlipayFormData</code> 可以方便我们的创建，这里我们以 alipay.trade.page.pay 接口为示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TypeScript</span></span><br><span class=\"line\"><span class=\"comment\">// import AlipayFormData from 'alipay-sdk/lib/form'; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipayFormData = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk/lib/form'</span>).default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> AlipayFormData();</span><br><span class=\"line\"><span class=\"comment\">// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url，否则返回的是一个表单的 html 片段</span></span><br><span class=\"line\">formData.setMethod(<span class=\"string\">'get'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">formData.addField(<span class=\"string\">'notifyUrl'</span>, <span class=\"string\">'http://www.com/notify'</span>); <span class=\"comment\">// 当支付完成后，支付宝主动向我们的服务器发送回调的地址</span></span><br><span class=\"line\">formData.addField(<span class=\"string\">'returnUrl'</span>, <span class=\"string\">'http://www.com/return'</span>); <span class=\"comment\">// 当支付完成后，当前页面跳转的地址</span></span><br><span class=\"line\">formData.addField(<span class=\"string\">'bizContent'</span>, &#123;</span><br><span class=\"line\">  outTradeNo: <span class=\"string\">'out_trade_no'</span>,</span><br><span class=\"line\">  productCode: <span class=\"string\">'FAST_INSTANT_TRADE_PAY'</span>,</span><br><span class=\"line\">  totalAmount: <span class=\"string\">'0.01'</span>,</span><br><span class=\"line\">  subject: <span class=\"string\">'商品'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'商品详情'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(</span><br><span class=\"line\">  <span class=\"string\">'alipay.trade.page.pay'</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">formData</span>: formData &#125;,</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result 为可以跳转到支付链接的 url</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>在这里要特别注意，支付宝在用户付款完成后，会向我们的服务器发送一条 <strong>POST 方式</strong> 的异步回调，这个回调地址必须是外网可以访问到的，也就是说这一过程我们必须在线上开发。</p>\n<h2 id=\"3-2-Demo\"><a href=\"#3-2-Demo\" class=\"headerlink\" title=\"3.2 Demo\"></a>3.2 Demo</h2><p>介绍完了alipay-node-sdk 的使用，那么接下来就上一个完整的示例进行整体的演示，由于上面已经演示了如何请求 alipay.trade.page.pay(统一收单下单并支付页面接口)，那么接下来就演示一下如何请求 alipay.trade.wap.pay(手机网站支付接口2.0) 让用户进行手机支付：</p>\n<blockquote>\n<p>注意项目必须在线上开发！否则只会跳转到支付宝界面而接收不到支付宝的异步回调！</p>\n</blockquote>\n<p>整体目录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── package.json</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── serve.js </span><br><span class=\"line\">└── static</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    └── pem </span><br><span class=\"line\">        ├── private-key.pem</span><br><span class=\"line\">        └── public-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>serve.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipaySdk = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> AlipayFormData = <span class=\"built_in\">require</span>(<span class=\"string\">'alipay-sdk/lib/form'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticPath = <span class=\"string\">'./static'</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(</span><br><span class=\"line\">  path.join(__dirname, staticPath)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/pay'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> alipaySdk = <span class=\"keyword\">new</span> AlipaySdk(&#123;</span><br><span class=\"line\">    appId: <span class=\"string\">'20161*******6710'</span>,</span><br><span class=\"line\">    privateKey: fs.readFileSync(<span class=\"string\">'./static/pem/private-key.pem'</span>, <span class=\"string\">'ascii'</span>),</span><br><span class=\"line\">    gateway: <span class=\"string\">\"https://openapi.alipaydev.com/gateway.do\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> AlipayFormData()</span><br><span class=\"line\">  formData.setMethod(<span class=\"string\">\"get\"</span>)</span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"notifyUrl\"</span>, <span class=\"string\">\"http://online_serve_url/paycallback\"</span>) <span class=\"comment\">// 回调地址必须为当前服务的线上地址！</span></span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"returnUrl\"</span>, <span class=\"string\">\"http://online_serve_url/success\"</span>)</span><br><span class=\"line\">  formData.addField(<span class=\"string\">\"bizContent\"</span>, &#123;</span><br><span class=\"line\">    body: <span class=\"string\">\"测试商品\"</span>,</span><br><span class=\"line\">    subject: <span class=\"string\">\"女装\"</span>,</span><br><span class=\"line\">    outTradeNo: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().valueOf(),</span><br><span class=\"line\">    totalAmount: <span class=\"string\">\"88.88\"</span>,</span><br><span class=\"line\">    quitUrl: <span class=\"string\">\"http://www.taobao.com/product/113714.html\"</span>,</span><br><span class=\"line\">    productCode: <span class=\"string\">\"QUICK_WAP_WAY\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> alipaySdk.exec(<span class=\"string\">\"alipay.trade.wap.pay\"</span>, &#123;&#125;, &#123;</span><br><span class=\"line\">    formData: formData,</span><br><span class=\"line\">    validateSign: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ctx.body = result</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/paycallback'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> postData = ctx.request.body;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"触发付款\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (postData.trade_status === <span class=\"string\">\"TRADE_SUCCESS\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = ctx.request.body <span class=\"comment\">// 订单信息</span></span><br><span class=\"line\">  \t<span class=\"comment\">// ========= 由请求体内的订单信息，在这里进行数据库中订单状态的更改 ============</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"支付完成！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/success'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">\"支付成功\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">9090</span>)</span><br></pre></td></tr></table></figure>\n\n<p>index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> oPay = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#pay\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">      oPay.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        axios.get(<span class=\"string\">'http://47.106.226.190:9090/pay'</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">window</span>.open(res.data);</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pay\"</span>&gt;</span>创建付款<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"form\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：接收到支付宝的异步回调之后，还需要进行异步回调的验签，以保证回调是由支付宝发送的，这个目前还没有研究出来，等研究出来再更新吧。</p>\n</blockquote>\n"},{"title":"基于Canvas的FlappyBird小游戏开发总结","date":"2019-05-15T14:05:26.000Z","_content":"[Github 源码地址](https://github.com/EsunR/FlappyBird-Canvas)  \n\n[演示 Demo](https://www.esunr.xyz/git/FlappyBird/index.html)\n\n# 掉落算法\n我们现在要研究一个问题，就是某元素一开始位置是y=100，如果限制变化常数是8，此时第一帧变为y=1e8（变化8），第二帧变为y=124（变化16）。第三帧是y=156（变化32）\n\n![](http://markdown.img.esunr.xyz/20190510210237.png)\n\n```diff\nimg.onload = function () {\n  setInterval(function () {\n    ctx.clearRect(0, 0, 600, 600);\n    f++;\n    ctx.fillText(f, 20, 20);\n    ctx.fillText(`isDropDown: ${isDropDown}`, 20, 40);\n\n    if (isDropDown) {\n+     dropf++\n+     y += dropf * 0.35; // 每帧下落的距离\n+     d += 0.07;  // 每帧旋转的弧度\n    }\n\n    ctx.save();\n    ctx.translate(x, y); // 将坐标系拉到要绘制小鸟的位置\n    ctx.rotate(d);  // 旋转坐标系\n    ctx.drawImage(img, -24, -24); // 绘制小鸟\n    ctx.restore();\n  }, 20)\n}\n```\n\n给界面设置一个 `isEnergy` 的参数，记录小鸟是否拥有能量。当点击屏幕时，小鸟拥有能量，等小鸟上飞一段时间后小鸟失去能量，之后小鸟开始下落。\n\n那么上升的这段距离，与掉落的公式不同，应该为：\n\n```diff\n- y += dropf * 0.35;\n+ y -= (20 - dropf) * 0.35;\n```\n\n`dropf` 为小鸟自身动画的帧编号， `y` 为小鸟在画布上的y轴坐标。当小鸟开始上升，y的值需要线性减小。\n\n当 `drop < 20` 时，`(20 - dropf) * 0.35;` 是一个正数，y越减越小，说明小鸟开始下落。但当 `drop > 20` 时，`(20 - dropf) * 0.35;` 的值是一个负数，y越减越大，说明小鸟又开始下落了，就会产生如下效果：\n\n![](http://markdown.img.esunr.xyz/垃圾箱.gif)\n\n这说明：**小鸟上升了20帧后，开始进行掉落。**\n\n那么我们结合掉落算法与 `hasEnergy` 进行小鸟能量状态的判断，当用户点击Canvas时，小鸟获取能量（hasEnergy == true），之后小鸟上飞一段距离，失去能量（hasEnergy == false），同时进行小鸟头部旋转的调整。\n\n在此要注意，我们要控制 `dropf` 何时归零，因为 `dropf` 控制了每帧小鸟移动的距离，即控制了小鸟的速度，拥有能量和失去能量时，小鸟的速度都需要初始化，即把 `dropf` 归零，我们在以下情况下需要将 `dropf` 归零：\n\n1. 用户点击Canvas时，小鸟获取能量，上升速度初始化\n2. 小鸟准备下落时，`hasEnergy` 改为 `false`，同时小鸟需要以初始速度下落。\n\n这部分的代码入下\n```javascript\n// ... ...\nvar dropf = 0;\nvar hasEnergy = false; // 能量状态\n// ... ...\n\nimg.onload = function () {\nsetInterval(function () {\n  // 清屏... ...\n  \n  dropf++\n  // 鼠标点击屏幕，会给小鸟传递能量\n  if (!hasEnergy) {\n    // 如果没有能量，小鸟掉落并旋转\n    y += dropf * 0.6;\n    d += 0.05;  // 每帧旋转的弧度\n  } else {\n    // 如果有能量，小鸟先想上飞，再掉落\n    y -= (20 - dropf) * 0.35; // 每帧下落的距离\n    d -= 0.03;\n    if (dropf > 20) {\n      // 如果向上飞了20帧，就让小鸟失去能量重新开始下落\n      hasEnergy = false;\n      // 下落时小鸟帧设置为0,归为下落速度的初始值\n      dropf = 0;\n    }\n  }\n\n  // 绘制小鸟... ...\n}, 20)\n\ncanvas.addEventListener(\"click\", function () {\n  hasEnergy = true;\n  // 下落前小鸟帧设置为0,归为上升速度的初始值\n  dropf = 0;\n  d = 0;\n})\n```\n\n\n# 碰撞检测\n管子和小鸟的碰撞，会导致游戏结束，就要检测碰撞。\n类和类之间如何通信？\n\n- 类和类之间没有第三方，需要通过发布订阅模式（观察者模式）\n- 类和类之间有一个中介者，比如这个游戏，此时非常简单，直接通过中介者就能找到对方，比如：\n   ```javascript\n   game.bird.x;\n   game.bord.y\n   ```\n\n因为鸟只有一个，用管子去检查鸟非常方便，所有碰撞检测是管子的方法，管子每一帧都要检测自己是不是撞到鸟了。使用AABB盒来进行碰撞检测，就是一个矩形的包围盒。 \n\n> AABB盒： AABB盒，一个3D的AABB就是一个简单的六面体，每一边都平行于一个坐标平面，矩形边界框不一定都是立方体，它的长、宽、高可以彼此不同。坐标轴平行（Axially-aligned）不仅指盒体与世界坐标轴平行，同时也指盒体的每个面都和一条坐标轴垂直，这样一个基本信息就能减少转换盒体时操作的次数。AABB技术在当今的许多游戏中都得到了应用，开发者经常用它们作为模型的检测模型。但是，提高精度的同时也会降低速度。 \n\n对小鸟和管子进行碰撞检测，分表需要考虑到小鸟的三个边与管子的三个边之间的关系，分为以下两种情况：\n\n1. 小鸟与上管子碰撞时\n\n![20190513150421.png](http://img.cdn.esunr.xyz/markdown/20190513150421.png)\n\n1. 小鸟与下管子碰撞时\n\n![20190513150827.png](http://img.cdn.esunr.xyz/markdown/20190513150827.png)\n\n其中，将相同项合并之后，得出只要满足如下结果，就说名小鸟与管子发生碰撞：\n\n```\n鸟.R > 上管.L 且\n鸟.L < 上管.R 且\n鸟.T < 上管.B 或 鸟.B〉下管.T\n```\n\n再分析管子 LBRT 的各个值：对于管子来说，管子L就是 `this.x` ，管子R就是 `this.x + 52` ，上管子B就是 `this.height` ，下管子T就是`this.height + this.kaikou` 。\n\n![20190513152915.png](http://img.cdn.esunr.xyz/markdown/20190513152915.png)\n\n最终我们总结出如下规则：\n```javascript\nif (game.bird.R > this.x && game.bird.L < this.x + 52) {\n  if (game.bird.T < this.height || game.bird.B > this.height + this.kaikou) {\n    console.log(\"BOOM!\");\n  }\n}\n```\n\n# 计数器处理\n\n对不同位数字要进行不同的处理，处理方式如下：\n\n![20190513171916.png](http://img.cdn.esunr.xyz/markdown/20190513171916.png)\n\n在 Game 类的主循环中添加：\n\n```javascript\nvar scoreLength = this.score.toString().length;\nfor (var i = 0; i < scoreLength; i++) {\n  this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength / 2), 100);\n}\n```\n\n当小鸟通过管子后，需要让 Game 类上挂载的 `score` +1 ，之后再利用函数节流的思想，在 Pipe 类上定义一个 `alreadPass` 用来判断是否让 `score` 进行增加操作，在 Pipe 类的 `update` 函数中加入如下代码：\n```javascript\n// 如果小鸟通过管子就加分\nif(game.bird.L > this.x + 52 && !this.alreadPass){\n  game.score ++ ;\n  this.alreadPass = true;\n}\n```\n\n# 场景管理器\n\nFlappyBird中有三个场景：欢迎界面、游戏界面、Gameover界面。\n\n三个场景的业务、逻辑、监听完全不一样。\n\n所以我们可以用场景管理器来负责管理自己当前场景的演员的更新和渲染。\n\n![场景管理器](http://img.cdn.esunr.xyz/markdown/20190513194730.png)\n\nGame类说起，此时Game不要负责渲染背景、小鸟、大地、管子了。而是仅仅负责渲染、更新场景管理器。\n\n```diff\n// 游戏主循环\n  this.timmer = setInterval(() => {\n    // 清屏\n    this.ctx.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n-   // 渲染、更新所有的演员和渲染所有的演员\n-   _.each(this.actors, function (actor) {\n-     actor.update();\n-     actor.render();\n-   })\n\n-   // 每40帧渲染一组管子\n-   if (this.f % 100 == 0) {\n-     this.pipe = new Pipe();\n-   }\n-   \n-   // 打印分数\n-   var scoreLength = this.score.toString().length;\n-   for (var i = 0; i < scoreLength; i++) {\n-      this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength /-2), 100);\n-   }\n\n+   // 场景管理器的渲染\n+   this.sm.update();\n+   this.sm.render();\n\n    // 打印帧编号\n    this.printFix();\n\n    \n  }, 20)\n}\n```\n\n场景管理器有三个方法 `enter()` 、 `update()` 、 `render()` 。其中定时器在每帧执行 `update()` 方法和 `render()` 方法。\n\n使用 `enter()` 方法由业务来调动：\n\n- 场景1：进入游戏，玩家可以点击开始菜单\n- 场景2：准备开始游戏，向玩家展示游戏教程\n- 场景3：开始游戏，玩家操作小鸟游玩\n- 场景4：小鸟死亡，开始掉落，播放死亡动画\n- 场景5：显示“Game Over”文字提示，用户点击界面可重新返回场景1","source":"_posts/2019/基于Canvas的FlappyBird小游戏开发总结.md","raw":"---\ntitle: 基于Canvas的FlappyBird小游戏开发总结\ntags: [Canvas, 项目实战]\ncategories:\n  - [Front, JS]\n  - [Front, HTML]\ndate: 2019-05-15 22:05:26\n---\n[Github 源码地址](https://github.com/EsunR/FlappyBird-Canvas)  \n\n[演示 Demo](https://www.esunr.xyz/git/FlappyBird/index.html)\n\n# 掉落算法\n我们现在要研究一个问题，就是某元素一开始位置是y=100，如果限制变化常数是8，此时第一帧变为y=1e8（变化8），第二帧变为y=124（变化16）。第三帧是y=156（变化32）\n\n![](http://markdown.img.esunr.xyz/20190510210237.png)\n\n```diff\nimg.onload = function () {\n  setInterval(function () {\n    ctx.clearRect(0, 0, 600, 600);\n    f++;\n    ctx.fillText(f, 20, 20);\n    ctx.fillText(`isDropDown: ${isDropDown}`, 20, 40);\n\n    if (isDropDown) {\n+     dropf++\n+     y += dropf * 0.35; // 每帧下落的距离\n+     d += 0.07;  // 每帧旋转的弧度\n    }\n\n    ctx.save();\n    ctx.translate(x, y); // 将坐标系拉到要绘制小鸟的位置\n    ctx.rotate(d);  // 旋转坐标系\n    ctx.drawImage(img, -24, -24); // 绘制小鸟\n    ctx.restore();\n  }, 20)\n}\n```\n\n给界面设置一个 `isEnergy` 的参数，记录小鸟是否拥有能量。当点击屏幕时，小鸟拥有能量，等小鸟上飞一段时间后小鸟失去能量，之后小鸟开始下落。\n\n那么上升的这段距离，与掉落的公式不同，应该为：\n\n```diff\n- y += dropf * 0.35;\n+ y -= (20 - dropf) * 0.35;\n```\n\n`dropf` 为小鸟自身动画的帧编号， `y` 为小鸟在画布上的y轴坐标。当小鸟开始上升，y的值需要线性减小。\n\n当 `drop < 20` 时，`(20 - dropf) * 0.35;` 是一个正数，y越减越小，说明小鸟开始下落。但当 `drop > 20` 时，`(20 - dropf) * 0.35;` 的值是一个负数，y越减越大，说明小鸟又开始下落了，就会产生如下效果：\n\n![](http://markdown.img.esunr.xyz/垃圾箱.gif)\n\n这说明：**小鸟上升了20帧后，开始进行掉落。**\n\n那么我们结合掉落算法与 `hasEnergy` 进行小鸟能量状态的判断，当用户点击Canvas时，小鸟获取能量（hasEnergy == true），之后小鸟上飞一段距离，失去能量（hasEnergy == false），同时进行小鸟头部旋转的调整。\n\n在此要注意，我们要控制 `dropf` 何时归零，因为 `dropf` 控制了每帧小鸟移动的距离，即控制了小鸟的速度，拥有能量和失去能量时，小鸟的速度都需要初始化，即把 `dropf` 归零，我们在以下情况下需要将 `dropf` 归零：\n\n1. 用户点击Canvas时，小鸟获取能量，上升速度初始化\n2. 小鸟准备下落时，`hasEnergy` 改为 `false`，同时小鸟需要以初始速度下落。\n\n这部分的代码入下\n```javascript\n// ... ...\nvar dropf = 0;\nvar hasEnergy = false; // 能量状态\n// ... ...\n\nimg.onload = function () {\nsetInterval(function () {\n  // 清屏... ...\n  \n  dropf++\n  // 鼠标点击屏幕，会给小鸟传递能量\n  if (!hasEnergy) {\n    // 如果没有能量，小鸟掉落并旋转\n    y += dropf * 0.6;\n    d += 0.05;  // 每帧旋转的弧度\n  } else {\n    // 如果有能量，小鸟先想上飞，再掉落\n    y -= (20 - dropf) * 0.35; // 每帧下落的距离\n    d -= 0.03;\n    if (dropf > 20) {\n      // 如果向上飞了20帧，就让小鸟失去能量重新开始下落\n      hasEnergy = false;\n      // 下落时小鸟帧设置为0,归为下落速度的初始值\n      dropf = 0;\n    }\n  }\n\n  // 绘制小鸟... ...\n}, 20)\n\ncanvas.addEventListener(\"click\", function () {\n  hasEnergy = true;\n  // 下落前小鸟帧设置为0,归为上升速度的初始值\n  dropf = 0;\n  d = 0;\n})\n```\n\n\n# 碰撞检测\n管子和小鸟的碰撞，会导致游戏结束，就要检测碰撞。\n类和类之间如何通信？\n\n- 类和类之间没有第三方，需要通过发布订阅模式（观察者模式）\n- 类和类之间有一个中介者，比如这个游戏，此时非常简单，直接通过中介者就能找到对方，比如：\n   ```javascript\n   game.bird.x;\n   game.bord.y\n   ```\n\n因为鸟只有一个，用管子去检查鸟非常方便，所有碰撞检测是管子的方法，管子每一帧都要检测自己是不是撞到鸟了。使用AABB盒来进行碰撞检测，就是一个矩形的包围盒。 \n\n> AABB盒： AABB盒，一个3D的AABB就是一个简单的六面体，每一边都平行于一个坐标平面，矩形边界框不一定都是立方体，它的长、宽、高可以彼此不同。坐标轴平行（Axially-aligned）不仅指盒体与世界坐标轴平行，同时也指盒体的每个面都和一条坐标轴垂直，这样一个基本信息就能减少转换盒体时操作的次数。AABB技术在当今的许多游戏中都得到了应用，开发者经常用它们作为模型的检测模型。但是，提高精度的同时也会降低速度。 \n\n对小鸟和管子进行碰撞检测，分表需要考虑到小鸟的三个边与管子的三个边之间的关系，分为以下两种情况：\n\n1. 小鸟与上管子碰撞时\n\n![20190513150421.png](http://img.cdn.esunr.xyz/markdown/20190513150421.png)\n\n1. 小鸟与下管子碰撞时\n\n![20190513150827.png](http://img.cdn.esunr.xyz/markdown/20190513150827.png)\n\n其中，将相同项合并之后，得出只要满足如下结果，就说名小鸟与管子发生碰撞：\n\n```\n鸟.R > 上管.L 且\n鸟.L < 上管.R 且\n鸟.T < 上管.B 或 鸟.B〉下管.T\n```\n\n再分析管子 LBRT 的各个值：对于管子来说，管子L就是 `this.x` ，管子R就是 `this.x + 52` ，上管子B就是 `this.height` ，下管子T就是`this.height + this.kaikou` 。\n\n![20190513152915.png](http://img.cdn.esunr.xyz/markdown/20190513152915.png)\n\n最终我们总结出如下规则：\n```javascript\nif (game.bird.R > this.x && game.bird.L < this.x + 52) {\n  if (game.bird.T < this.height || game.bird.B > this.height + this.kaikou) {\n    console.log(\"BOOM!\");\n  }\n}\n```\n\n# 计数器处理\n\n对不同位数字要进行不同的处理，处理方式如下：\n\n![20190513171916.png](http://img.cdn.esunr.xyz/markdown/20190513171916.png)\n\n在 Game 类的主循环中添加：\n\n```javascript\nvar scoreLength = this.score.toString().length;\nfor (var i = 0; i < scoreLength; i++) {\n  this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength / 2), 100);\n}\n```\n\n当小鸟通过管子后，需要让 Game 类上挂载的 `score` +1 ，之后再利用函数节流的思想，在 Pipe 类上定义一个 `alreadPass` 用来判断是否让 `score` 进行增加操作，在 Pipe 类的 `update` 函数中加入如下代码：\n```javascript\n// 如果小鸟通过管子就加分\nif(game.bird.L > this.x + 52 && !this.alreadPass){\n  game.score ++ ;\n  this.alreadPass = true;\n}\n```\n\n# 场景管理器\n\nFlappyBird中有三个场景：欢迎界面、游戏界面、Gameover界面。\n\n三个场景的业务、逻辑、监听完全不一样。\n\n所以我们可以用场景管理器来负责管理自己当前场景的演员的更新和渲染。\n\n![场景管理器](http://img.cdn.esunr.xyz/markdown/20190513194730.png)\n\nGame类说起，此时Game不要负责渲染背景、小鸟、大地、管子了。而是仅仅负责渲染、更新场景管理器。\n\n```diff\n// 游戏主循环\n  this.timmer = setInterval(() => {\n    // 清屏\n    this.ctx.clearRect(0, 0, this.canvas.height, this.canvas.width);\n\n-   // 渲染、更新所有的演员和渲染所有的演员\n-   _.each(this.actors, function (actor) {\n-     actor.update();\n-     actor.render();\n-   })\n\n-   // 每40帧渲染一组管子\n-   if (this.f % 100 == 0) {\n-     this.pipe = new Pipe();\n-   }\n-   \n-   // 打印分数\n-   var scoreLength = this.score.toString().length;\n-   for (var i = 0; i < scoreLength; i++) {\n-      this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength /-2), 100);\n-   }\n\n+   // 场景管理器的渲染\n+   this.sm.update();\n+   this.sm.render();\n\n    // 打印帧编号\n    this.printFix();\n\n    \n  }, 20)\n}\n```\n\n场景管理器有三个方法 `enter()` 、 `update()` 、 `render()` 。其中定时器在每帧执行 `update()` 方法和 `render()` 方法。\n\n使用 `enter()` 方法由业务来调动：\n\n- 场景1：进入游戏，玩家可以点击开始菜单\n- 场景2：准备开始游戏，向玩家展示游戏教程\n- 场景3：开始游戏，玩家操作小鸟游玩\n- 场景4：小鸟死亡，开始掉落，播放死亡动画\n- 场景5：显示“Game Over”文字提示，用户点击界面可重新返回场景1","slug":"基于Canvas的FlappyBird小游戏开发总结","published":1,"updated":"2019-11-09T14:10:33.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrfl00483w4ueanodvja","content":"<p><a href=\"https://github.com/EsunR/FlappyBird-Canvas\" target=\"_blank\" rel=\"noopener\">Github 源码地址</a>  </p>\n<p><a href=\"https://www.esunr.xyz/git/FlappyBird/index.html\" target=\"_blank\" rel=\"noopener\">演示 Demo</a></p>\n<h1 id=\"掉落算法\"><a href=\"#掉落算法\" class=\"headerlink\" title=\"掉落算法\"></a>掉落算法</h1><p>我们现在要研究一个问题，就是某元素一开始位置是y=100，如果限制变化常数是8，此时第一帧变为y=1e8（变化8），第二帧变为y=124（变化16）。第三帧是y=156（变化32）</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20190510210237.png\" alt=\"\"></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.onload = function () &#123;</span><br><span class=\"line\">  setInterval(function () &#123;</span><br><span class=\"line\">    ctx.clearRect(0, 0, 600, 600);</span><br><span class=\"line\">    f++;</span><br><span class=\"line\">    ctx.fillText(f, 20, 20);</span><br><span class=\"line\">    ctx.fillText(`isDropDown: $&#123;isDropDown&#125;`, 20, 40);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (isDropDown) &#123;</span><br><span class=\"line\"><span class=\"addition\">+     dropf++</span></span><br><span class=\"line\"><span class=\"addition\">+     y += dropf * 0.35; // 每帧下落的距离</span></span><br><span class=\"line\"><span class=\"addition\">+     d += 0.07;  // 每帧旋转的弧度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.save();</span><br><span class=\"line\">    ctx.translate(x, y); // 将坐标系拉到要绘制小鸟的位置</span><br><span class=\"line\">    ctx.rotate(d);  // 旋转坐标系</span><br><span class=\"line\">    ctx.drawImage(img, -24, -24); // 绘制小鸟</span><br><span class=\"line\">    ctx.restore();</span><br><span class=\"line\">  &#125;, 20)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给界面设置一个 <code>isEnergy</code> 的参数，记录小鸟是否拥有能量。当点击屏幕时，小鸟拥有能量，等小鸟上飞一段时间后小鸟失去能量，之后小鸟开始下落。</p>\n<p>那么上升的这段距离，与掉落的公式不同，应该为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- y += dropf * 0.35;</span></span><br><span class=\"line\"><span class=\"addition\">+ y -= (20 - dropf) * 0.35;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>dropf</code> 为小鸟自身动画的帧编号， <code>y</code> 为小鸟在画布上的y轴坐标。当小鸟开始上升，y的值需要线性减小。</p>\n<p>当 <code>drop &lt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 是一个正数，y越减越小，说明小鸟开始下落。但当 <code>drop &gt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 的值是一个负数，y越减越大，说明小鸟又开始下落了，就会产生如下效果：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/%E5%9E%83%E5%9C%BE%E7%AE%B1.gif\" alt=\"\"></p>\n<p>这说明：<strong>小鸟上升了20帧后，开始进行掉落。</strong></p>\n<p>那么我们结合掉落算法与 <code>hasEnergy</code> 进行小鸟能量状态的判断，当用户点击Canvas时，小鸟获取能量（hasEnergy == true），之后小鸟上飞一段距离，失去能量（hasEnergy == false），同时进行小鸟头部旋转的调整。</p>\n<p>在此要注意，我们要控制 <code>dropf</code> 何时归零，因为 <code>dropf</code> 控制了每帧小鸟移动的距离，即控制了小鸟的速度，拥有能量和失去能量时，小鸟的速度都需要初始化，即把 <code>dropf</code> 归零，我们在以下情况下需要将 <code>dropf</code> 归零：</p>\n<ol>\n<li>用户点击Canvas时，小鸟获取能量，上升速度初始化</li>\n<li>小鸟准备下落时，<code>hasEnergy</code> 改为 <code>false</code>，同时小鸟需要以初始速度下落。</li>\n</ol>\n<p>这部分的代码入下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasEnergy = <span class=\"literal\">false</span>; <span class=\"comment\">// 能量状态</span></span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清屏... ...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  dropf++</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标点击屏幕，会给小鸟传递能量</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!hasEnergy) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有能量，小鸟掉落并旋转</span></span><br><span class=\"line\">    y += dropf * <span class=\"number\">0.6</span>;</span><br><span class=\"line\">    d += <span class=\"number\">0.05</span>;  <span class=\"comment\">// 每帧旋转的弧度</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有能量，小鸟先想上飞，再掉落</span></span><br><span class=\"line\">    y -= (<span class=\"number\">20</span> - dropf) * <span class=\"number\">0.35</span>; <span class=\"comment\">// 每帧下落的距离</span></span><br><span class=\"line\">    d -= <span class=\"number\">0.03</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dropf &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果向上飞了20帧，就让小鸟失去能量重新开始下落</span></span><br><span class=\"line\">      hasEnergy = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 下落时小鸟帧设置为0,归为下落速度的初始值</span></span><br><span class=\"line\">      dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绘制小鸟... ...</span></span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  hasEnergy = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下落前小鸟帧设置为0,归为上升速度的初始值</span></span><br><span class=\"line\">  dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\">  d = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h1><p>管子和小鸟的碰撞，会导致游戏结束，就要检测碰撞。<br>类和类之间如何通信？</p>\n<ul>\n<li>类和类之间没有第三方，需要通过发布订阅模式（观察者模式）</li>\n<li>类和类之间有一个中介者，比如这个游戏，此时非常简单，直接通过中介者就能找到对方，比如： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">game.bird.x;</span><br><span class=\"line\">game.bord.y</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>因为鸟只有一个，用管子去检查鸟非常方便，所有碰撞检测是管子的方法，管子每一帧都要检测自己是不是撞到鸟了。使用AABB盒来进行碰撞检测，就是一个矩形的包围盒。 </p>\n<blockquote>\n<p>AABB盒： AABB盒，一个3D的AABB就是一个简单的六面体，每一边都平行于一个坐标平面，矩形边界框不一定都是立方体，它的长、宽、高可以彼此不同。坐标轴平行（Axially-aligned）不仅指盒体与世界坐标轴平行，同时也指盒体的每个面都和一条坐标轴垂直，这样一个基本信息就能减少转换盒体时操作的次数。AABB技术在当今的许多游戏中都得到了应用，开发者经常用它们作为模型的检测模型。但是，提高精度的同时也会降低速度。 </p>\n</blockquote>\n<p>对小鸟和管子进行碰撞检测，分表需要考虑到小鸟的三个边与管子的三个边之间的关系，分为以下两种情况：</p>\n<ol>\n<li>小鸟与上管子碰撞时</li>\n</ol>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513150421.png\" alt=\"20190513150421.png\"></p>\n<ol>\n<li>小鸟与下管子碰撞时</li>\n</ol>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513150827.png\" alt=\"20190513150827.png\"></p>\n<p>其中，将相同项合并之后，得出只要满足如下结果，就说名小鸟与管子发生碰撞：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鸟.R &gt; 上管.L 且</span><br><span class=\"line\">鸟.L &lt; 上管.R 且</span><br><span class=\"line\">鸟.T &lt; 上管.B 或 鸟.B〉下管.T</span><br></pre></td></tr></table></figure>\n\n<p>再分析管子 LBRT 的各个值：对于管子来说，管子L就是 <code>this.x</code> ，管子R就是 <code>this.x + 52</code> ，上管子B就是 <code>this.height</code> ，下管子T就是<code>this.height + this.kaikou</code> 。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513152915.png\" alt=\"20190513152915.png\"></p>\n<p>最终我们总结出如下规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (game.bird.R &gt; <span class=\"keyword\">this</span>.x &amp;&amp; game.bird.L &lt; <span class=\"keyword\">this</span>.x + <span class=\"number\">52</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (game.bird.T &lt; <span class=\"keyword\">this</span>.height || game.bird.B &gt; <span class=\"keyword\">this</span>.height + <span class=\"keyword\">this</span>.kaikou) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"BOOM!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"计数器处理\"><a href=\"#计数器处理\" class=\"headerlink\" title=\"计数器处理\"></a>计数器处理</h1><p>对不同位数字要进行不同的处理，处理方式如下：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513171916.png\" alt=\"20190513171916.png\"></p>\n<p>在 Game 类的主循环中添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scoreLength = <span class=\"keyword\">this</span>.score.toString().length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; scoreLength; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ctx.drawImage(<span class=\"keyword\">this</span>.R[<span class=\"string\">'shuzi'</span> + <span class=\"keyword\">this</span>.score.toString().charAt(i)], <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> + <span class=\"number\">32</span> * (i - scoreLength / <span class=\"number\">2</span>), <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当小鸟通过管子后，需要让 Game 类上挂载的 <code>score</code> +1 ，之后再利用函数节流的思想，在 Pipe 类上定义一个 <code>alreadPass</code> 用来判断是否让 <code>score</code> 进行增加操作，在 Pipe 类的 <code>update</code> 函数中加入如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果小鸟通过管子就加分</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(game.bird.L &gt; <span class=\"keyword\">this</span>.x + <span class=\"number\">52</span> &amp;&amp; !<span class=\"keyword\">this</span>.alreadPass)&#123;</span><br><span class=\"line\">  game.score ++ ;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.alreadPass = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"场景管理器\"><a href=\"#场景管理器\" class=\"headerlink\" title=\"场景管理器\"></a>场景管理器</h1><p>FlappyBird中有三个场景：欢迎界面、游戏界面、Gameover界面。</p>\n<p>三个场景的业务、逻辑、监听完全不一样。</p>\n<p>所以我们可以用场景管理器来负责管理自己当前场景的演员的更新和渲染。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513194730.png\" alt=\"场景管理器\"></p>\n<p>Game类说起，此时Game不要负责渲染背景、小鸟、大地、管子了。而是仅仅负责渲染、更新场景管理器。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 游戏主循环</span><br><span class=\"line\">  this.timmer = setInterval(() =&gt; &#123;</span><br><span class=\"line\">    // 清屏</span><br><span class=\"line\">    this.ctx.clearRect(0, 0, this.canvas.height, this.canvas.width);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // 渲染、更新所有的演员和渲染所有的演员</span></span><br><span class=\"line\"><span class=\"deletion\">-   _.each(this.actors, function (actor) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     actor.update();</span></span><br><span class=\"line\"><span class=\"deletion\">-     actor.render();</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // 每40帧渲染一组管子</span></span><br><span class=\"line\"><span class=\"deletion\">-   if (this.f % 100 == 0) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     this.pipe = new Pipe();</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-   </span></span><br><span class=\"line\"><span class=\"deletion\">-   // 打印分数</span></span><br><span class=\"line\"><span class=\"deletion\">-   var scoreLength = this.score.toString().length;</span></span><br><span class=\"line\"><span class=\"deletion\">-   for (var i = 0; i &lt; scoreLength; i++) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-      this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength /-2), 100);</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+   // 场景管理器的渲染</span></span><br><span class=\"line\"><span class=\"addition\">+   this.sm.update();</span></span><br><span class=\"line\"><span class=\"addition\">+   this.sm.render();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // 打印帧编号</span><br><span class=\"line\">    this.printFix();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, 20)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>场景管理器有三个方法 <code>enter()</code> 、 <code>update()</code> 、 <code>render()</code> 。其中定时器在每帧执行 <code>update()</code> 方法和 <code>render()</code> 方法。</p>\n<p>使用 <code>enter()</code> 方法由业务来调动：</p>\n<ul>\n<li>场景1：进入游戏，玩家可以点击开始菜单</li>\n<li>场景2：准备开始游戏，向玩家展示游戏教程</li>\n<li>场景3：开始游戏，玩家操作小鸟游玩</li>\n<li>场景4：小鸟死亡，开始掉落，播放死亡动画</li>\n<li>场景5：显示“Game Over”文字提示，用户点击界面可重新返回场景1</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://github.com/EsunR/FlappyBird-Canvas\" target=\"_blank\" rel=\"noopener\">Github 源码地址</a>  </p>\n<p><a href=\"https://www.esunr.xyz/git/FlappyBird/index.html\" target=\"_blank\" rel=\"noopener\">演示 Demo</a></p>\n<h1 id=\"掉落算法\"><a href=\"#掉落算法\" class=\"headerlink\" title=\"掉落算法\"></a>掉落算法</h1><p>我们现在要研究一个问题，就是某元素一开始位置是y=100，如果限制变化常数是8，此时第一帧变为y=1e8（变化8），第二帧变为y=124（变化16）。第三帧是y=156（变化32）</p>\n<p><img src=\"http://markdown.img.esunr.xyz/20190510210237.png\" alt=\"\"></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.onload = function () &#123;</span><br><span class=\"line\">  setInterval(function () &#123;</span><br><span class=\"line\">    ctx.clearRect(0, 0, 600, 600);</span><br><span class=\"line\">    f++;</span><br><span class=\"line\">    ctx.fillText(f, 20, 20);</span><br><span class=\"line\">    ctx.fillText(`isDropDown: $&#123;isDropDown&#125;`, 20, 40);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (isDropDown) &#123;</span><br><span class=\"line\"><span class=\"addition\">+     dropf++</span></span><br><span class=\"line\"><span class=\"addition\">+     y += dropf * 0.35; // 每帧下落的距离</span></span><br><span class=\"line\"><span class=\"addition\">+     d += 0.07;  // 每帧旋转的弧度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.save();</span><br><span class=\"line\">    ctx.translate(x, y); // 将坐标系拉到要绘制小鸟的位置</span><br><span class=\"line\">    ctx.rotate(d);  // 旋转坐标系</span><br><span class=\"line\">    ctx.drawImage(img, -24, -24); // 绘制小鸟</span><br><span class=\"line\">    ctx.restore();</span><br><span class=\"line\">  &#125;, 20)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给界面设置一个 <code>isEnergy</code> 的参数，记录小鸟是否拥有能量。当点击屏幕时，小鸟拥有能量，等小鸟上飞一段时间后小鸟失去能量，之后小鸟开始下落。</p>\n<p>那么上升的这段距离，与掉落的公式不同，应该为：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- y += dropf * 0.35;</span></span><br><span class=\"line\"><span class=\"addition\">+ y -= (20 - dropf) * 0.35;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>dropf</code> 为小鸟自身动画的帧编号， <code>y</code> 为小鸟在画布上的y轴坐标。当小鸟开始上升，y的值需要线性减小。</p>\n<p>当 <code>drop &lt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 是一个正数，y越减越小，说明小鸟开始下落。但当 <code>drop &gt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 的值是一个负数，y越减越大，说明小鸟又开始下落了，就会产生如下效果：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/%E5%9E%83%E5%9C%BE%E7%AE%B1.gif\" alt=\"\"></p>\n<p>这说明：<strong>小鸟上升了20帧后，开始进行掉落。</strong></p>\n<p>那么我们结合掉落算法与 <code>hasEnergy</code> 进行小鸟能量状态的判断，当用户点击Canvas时，小鸟获取能量（hasEnergy == true），之后小鸟上飞一段距离，失去能量（hasEnergy == false），同时进行小鸟头部旋转的调整。</p>\n<p>在此要注意，我们要控制 <code>dropf</code> 何时归零，因为 <code>dropf</code> 控制了每帧小鸟移动的距离，即控制了小鸟的速度，拥有能量和失去能量时，小鸟的速度都需要初始化，即把 <code>dropf</code> 归零，我们在以下情况下需要将 <code>dropf</code> 归零：</p>\n<ol>\n<li>用户点击Canvas时，小鸟获取能量，上升速度初始化</li>\n<li>小鸟准备下落时，<code>hasEnergy</code> 改为 <code>false</code>，同时小鸟需要以初始速度下落。</li>\n</ol>\n<p>这部分的代码入下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasEnergy = <span class=\"literal\">false</span>; <span class=\"comment\">// 能量状态</span></span><br><span class=\"line\"><span class=\"comment\">// ... ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清屏... ...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  dropf++</span><br><span class=\"line\">  <span class=\"comment\">// 鼠标点击屏幕，会给小鸟传递能量</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!hasEnergy) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有能量，小鸟掉落并旋转</span></span><br><span class=\"line\">    y += dropf * <span class=\"number\">0.6</span>;</span><br><span class=\"line\">    d += <span class=\"number\">0.05</span>;  <span class=\"comment\">// 每帧旋转的弧度</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有能量，小鸟先想上飞，再掉落</span></span><br><span class=\"line\">    y -= (<span class=\"number\">20</span> - dropf) * <span class=\"number\">0.35</span>; <span class=\"comment\">// 每帧下落的距离</span></span><br><span class=\"line\">    d -= <span class=\"number\">0.03</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dropf &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果向上飞了20帧，就让小鸟失去能量重新开始下落</span></span><br><span class=\"line\">      hasEnergy = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 下落时小鸟帧设置为0,归为下落速度的初始值</span></span><br><span class=\"line\">      dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绘制小鸟... ...</span></span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  hasEnergy = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下落前小鸟帧设置为0,归为上升速度的初始值</span></span><br><span class=\"line\">  dropf = <span class=\"number\">0</span>;</span><br><span class=\"line\">  d = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h1><p>管子和小鸟的碰撞，会导致游戏结束，就要检测碰撞。<br>类和类之间如何通信？</p>\n<ul>\n<li>类和类之间没有第三方，需要通过发布订阅模式（观察者模式）</li>\n<li>类和类之间有一个中介者，比如这个游戏，此时非常简单，直接通过中介者就能找到对方，比如： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">game.bird.x;</span><br><span class=\"line\">game.bord.y</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>因为鸟只有一个，用管子去检查鸟非常方便，所有碰撞检测是管子的方法，管子每一帧都要检测自己是不是撞到鸟了。使用AABB盒来进行碰撞检测，就是一个矩形的包围盒。 </p>\n<blockquote>\n<p>AABB盒： AABB盒，一个3D的AABB就是一个简单的六面体，每一边都平行于一个坐标平面，矩形边界框不一定都是立方体，它的长、宽、高可以彼此不同。坐标轴平行（Axially-aligned）不仅指盒体与世界坐标轴平行，同时也指盒体的每个面都和一条坐标轴垂直，这样一个基本信息就能减少转换盒体时操作的次数。AABB技术在当今的许多游戏中都得到了应用，开发者经常用它们作为模型的检测模型。但是，提高精度的同时也会降低速度。 </p>\n</blockquote>\n<p>对小鸟和管子进行碰撞检测，分表需要考虑到小鸟的三个边与管子的三个边之间的关系，分为以下两种情况：</p>\n<ol>\n<li>小鸟与上管子碰撞时</li>\n</ol>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513150421.png\" alt=\"20190513150421.png\"></p>\n<ol>\n<li>小鸟与下管子碰撞时</li>\n</ol>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513150827.png\" alt=\"20190513150827.png\"></p>\n<p>其中，将相同项合并之后，得出只要满足如下结果，就说名小鸟与管子发生碰撞：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鸟.R &gt; 上管.L 且</span><br><span class=\"line\">鸟.L &lt; 上管.R 且</span><br><span class=\"line\">鸟.T &lt; 上管.B 或 鸟.B〉下管.T</span><br></pre></td></tr></table></figure>\n\n<p>再分析管子 LBRT 的各个值：对于管子来说，管子L就是 <code>this.x</code> ，管子R就是 <code>this.x + 52</code> ，上管子B就是 <code>this.height</code> ，下管子T就是<code>this.height + this.kaikou</code> 。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513152915.png\" alt=\"20190513152915.png\"></p>\n<p>最终我们总结出如下规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (game.bird.R &gt; <span class=\"keyword\">this</span>.x &amp;&amp; game.bird.L &lt; <span class=\"keyword\">this</span>.x + <span class=\"number\">52</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (game.bird.T &lt; <span class=\"keyword\">this</span>.height || game.bird.B &gt; <span class=\"keyword\">this</span>.height + <span class=\"keyword\">this</span>.kaikou) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"BOOM!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"计数器处理\"><a href=\"#计数器处理\" class=\"headerlink\" title=\"计数器处理\"></a>计数器处理</h1><p>对不同位数字要进行不同的处理，处理方式如下：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513171916.png\" alt=\"20190513171916.png\"></p>\n<p>在 Game 类的主循环中添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scoreLength = <span class=\"keyword\">this</span>.score.toString().length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; scoreLength; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ctx.drawImage(<span class=\"keyword\">this</span>.R[<span class=\"string\">'shuzi'</span> + <span class=\"keyword\">this</span>.score.toString().charAt(i)], <span class=\"keyword\">this</span>.canvas.width / <span class=\"number\">2</span> + <span class=\"number\">32</span> * (i - scoreLength / <span class=\"number\">2</span>), <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当小鸟通过管子后，需要让 Game 类上挂载的 <code>score</code> +1 ，之后再利用函数节流的思想，在 Pipe 类上定义一个 <code>alreadPass</code> 用来判断是否让 <code>score</code> 进行增加操作，在 Pipe 类的 <code>update</code> 函数中加入如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果小鸟通过管子就加分</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(game.bird.L &gt; <span class=\"keyword\">this</span>.x + <span class=\"number\">52</span> &amp;&amp; !<span class=\"keyword\">this</span>.alreadPass)&#123;</span><br><span class=\"line\">  game.score ++ ;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.alreadPass = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"场景管理器\"><a href=\"#场景管理器\" class=\"headerlink\" title=\"场景管理器\"></a>场景管理器</h1><p>FlappyBird中有三个场景：欢迎界面、游戏界面、Gameover界面。</p>\n<p>三个场景的业务、逻辑、监听完全不一样。</p>\n<p>所以我们可以用场景管理器来负责管理自己当前场景的演员的更新和渲染。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190513194730.png\" alt=\"场景管理器\"></p>\n<p>Game类说起，此时Game不要负责渲染背景、小鸟、大地、管子了。而是仅仅负责渲染、更新场景管理器。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 游戏主循环</span><br><span class=\"line\">  this.timmer = setInterval(() =&gt; &#123;</span><br><span class=\"line\">    // 清屏</span><br><span class=\"line\">    this.ctx.clearRect(0, 0, this.canvas.height, this.canvas.width);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // 渲染、更新所有的演员和渲染所有的演员</span></span><br><span class=\"line\"><span class=\"deletion\">-   _.each(this.actors, function (actor) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     actor.update();</span></span><br><span class=\"line\"><span class=\"deletion\">-     actor.render();</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-   // 每40帧渲染一组管子</span></span><br><span class=\"line\"><span class=\"deletion\">-   if (this.f % 100 == 0) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     this.pipe = new Pipe();</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-   </span></span><br><span class=\"line\"><span class=\"deletion\">-   // 打印分数</span></span><br><span class=\"line\"><span class=\"deletion\">-   var scoreLength = this.score.toString().length;</span></span><br><span class=\"line\"><span class=\"deletion\">-   for (var i = 0; i &lt; scoreLength; i++) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-      this.ctx.drawImage(this.R['shuzi' + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength /-2), 100);</span></span><br><span class=\"line\"><span class=\"deletion\">-   &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+   // 场景管理器的渲染</span></span><br><span class=\"line\"><span class=\"addition\">+   this.sm.update();</span></span><br><span class=\"line\"><span class=\"addition\">+   this.sm.render();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // 打印帧编号</span><br><span class=\"line\">    this.printFix();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, 20)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>场景管理器有三个方法 <code>enter()</code> 、 <code>update()</code> 、 <code>render()</code> 。其中定时器在每帧执行 <code>update()</code> 方法和 <code>render()</code> 方法。</p>\n<p>使用 <code>enter()</code> 方法由业务来调动：</p>\n<ul>\n<li>场景1：进入游戏，玩家可以点击开始菜单</li>\n<li>场景2：准备开始游戏，向玩家展示游戏教程</li>\n<li>场景3：开始游戏，玩家操作小鸟游玩</li>\n<li>场景4：小鸟死亡，开始掉落，播放死亡动画</li>\n<li>场景5：显示“Game Over”文字提示，用户点击界面可重新返回场景1</li>\n</ul>\n"},{"title":"2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比","date":"2019-10-11T14:18:51.000Z","_content":"# 1. 常见框架\n\n## 1.1 框架排名\n\n- Gin      \t31k **[Lite]**\n- Beego     22k\n- Iris           16k\n- Echo        15k **[Lite]**\n- Revel       11k \n- Martini    10k **[×]**\n- buffalo    5k   **[Lite]**\n\n## 1.2 框架特性\n\n**Gin：**\n\nGin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.\n\n快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。\n\n支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。\n\nCrash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！\n\nJSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。\n\n路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。\n\n错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。\n\n内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。\n\n可扩展性：新建一个中间件非常简单，去查看示例代码吧。\n\n[文档链接](https://gin-gonic.com/zh-cn/docs/) | 文档详细度：低\n\n**Beego：**\n\nbee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。\n\n简单化：RESTful 支持、MVC 模型，可以使用 bee 工具快速地开发应用，包括监控代码修改进行热编译、自动化测试代码以及自动化打包部署。\n\n智能化：支持智能路由、智能监控，可以监控 QPS、内存消耗、CPU 使用，以及 goroutine 的运行状况，让您的线上应用尽在掌握。\n\n模块化：beego 内置了强大的模块，包括 Session、缓存操作、日志记录、配置解析、性能监控、上下文操作、ORM 模块、请求模拟等强大的模块，足以支撑你任何的应用。\n\n高性能：beego 采用了 Go 原生的 http 包来处理请求，goroutine 的并发效率足以应付大流量的 Web 应用和 API 应用，目前已经应用于大量高并发的产品中。\n\n[文档链接](https://beego.me/docs/mvc/view/tutorial.md) | 文档详细度：高\n\n**Iris：**\n\n- 专注于高性能\n- 简单流畅的API\n- 高扩展性\n- 强大的路由和中间件生态系统\n  - 使用iris独特的表达主义路径解释器构建RESTful API\n  - 动态路径参数化或通配符路由与静态路由不冲突\n  - 使用重定向选项从URL中删除尾部斜杠\n  - 使用虚拟主机和子域名变得容易\n  - 分组API和静态或甚至动态子域名\n  - net / http和negroni-like处理程序通过iris.FromStd兼容\n  - 针对任意Http请求错误 定义处理函数\n  - 支持事务和回滚\n  - 支持响应缓存\n  - 使用简单的函数嵌入资源并与go-bindata 保持兼容\n  - mvc\n- 上下文\n  - 高度可扩展的试图渲染(目前支持markdown,json,xml，jsonp等等)\n  - 正文绑定器和发送HTTP响应的便捷功能\n  - 限制请求正文\n  - 提供静态资源或嵌入式资产\n  - 本地化i18N\n  - 压缩（Gzip是内置的）\n- 身份验证\n  - Basic Authentication\n  - OAuth, OAuth2 (支持27个以上的热门网站)\n  - JWT *服务器\n  - 通过TLS提供服务时，自动安装和提供来自[https://letsencrypt.org的证书](https://letsencrypt.xn--org-ge9dz74pcw0a/)\n  - 默认为关闭状态\n  - 在关闭，错误或中断事件时注册\n  - 连接多个服务器，完全兼容 net/http#Server\n- 视图系统.支持五种模板引擎 完全兼容 html/template\n- Websocket库，其API类似于socket.io [如果你愿意，你仍然可以使用你最喜欢的]\n- 热重启\n- Typescript集成 + Web IDE\n- Iris是最具特色的网络框架之一\n\n[文档链接1](https://studyiris.com/doc/irisDoc/DynamicPathParameters.html) [文档链接2](https://www.studyiris.com/example/) [wiki](https://github.com/kataras/iris/wiki) | 文档详细度：中\n\n## 1.3 性能测试\n\n- (1)：在一定的时间内实现的总调用数，越高越好\n- (2)：单次操作耗时（ns/op），越低越好\n- (3)：堆内存分配 （B/op）, 越低越好\n- (4)：每次操作的平均内存分配次数（allocs/op），越低越好\n\n| Benchmark name                 | (1)       | (2)         | (3)        | (4)      |\n| ------------------------------ | --------- | ----------- | ---------- | -------- |\n| **BenchmarkGin_GithubAll**     | **30000** | **48375**   | **0**      | **0**    |\n| BenchmarkAce_GithubAll         | 10000     | 134059      | 13792      | 167      |\n| BenchmarkBear_GithubAll        | 5000      | 534445      | 86448      | 943      |\n| **BenchmarkBeego_GithubAll**   | **3000**  | **592444**  | **74705**  | **812**  |\n| BenchmarkBone_GithubAll        | 200       | 6957308     | 698784     | 8453     |\n| BenchmarkDenco_GithubAll       | 10000     | 158819      | 20224      | 167      |\n| **BenchmarkEcho_GithubAll**    | **10000** | **154700**  | **6496**   | **203**  |\n| BenchmarkGocraftWeb_GithubAll  | 3000      | 570806      | 131656     | 1686     |\n| BenchmarkGoji_GithubAll        | 2000      | 818034      | 56112      | 334      |\n| BenchmarkGojiv2_GithubAll      | 2000      | 1213973     | 274768     | 3712     |\n| BenchmarkGoJsonRest_GithubAll  | 2000      | 785796      | 134371     | 2737     |\n| BenchmarkGoRestful_GithubAll   | 300       | 5238188     | 689672     | 4519     |\n| BenchmarkGorillaMux_GithubAll  | 100       | 10257726    | 211840     | 2272     |\n| BenchmarkHttpRouter_GithubAll  | 20000     | 105414      | 13792      | 167      |\n| BenchmarkHttpTreeMux_GithubAll | 10000     | 319934      | 65856      | 671      |\n| BenchmarkKocha_GithubAll       | 10000     | 209442      | 23304      | 843      |\n| BenchmarkLARS_GithubAll        | 20000     | 62565       | 0          | 0        |\n| BenchmarkMacaron_GithubAll     | 2000      | 1161270     | 204194     | 2000     |\n| **BenchmarkMartini_GithubAll** | **200**   | **9991713** | **226549** | **2325** |\n| BenchmarkPat_GithubAll         | 200       | 5590793     | 1499568    | 27435    |\n| BenchmarkPossum_GithubAll      | 10000     | 319768      | 84448      | 609      |\n| BenchmarkR2router_GithubAll    | 10000     | 305134      | 77328      | 979      |\n| BenchmarkRivet_GithubAll       | 10000     | 132134      | 16272      | 167      |\n| BenchmarkTango_GithubAll       | 3000      | 552754      | 63826      | 1618     |\n| BenchmarkTigerTonic_GithubAll  | 1000      | 1439483     | 239104     | 5374     |\n| BenchmarkTraffic_GithubAll     | 100       | 11383067    | 2659329    | 21848    |\n| BenchmarkVulcan_GithubAll      | 5000      | 394253      | 19894      | 609      |\n\n# 2. 应用\n\n## 2.1 主机服务\n\n#### Gin\n\nGin 拥有灵活的开发环境，在运行时可以选择默认的服务器来运行，也可以选择原生的  `http.ListenAndServe(\":8080\", router)` 来开启服务，这是因为其本身使用 `gin.Default()` 创建的 `router` 对象实现了 Handler 接口，这就以为着其可以选择其他的 HTTP 服务器，如 [fvbock/endless](https://github.com/fvbock/endless) 、 [manners](https://github.com/braintree/manners) 或者原生的 http.Server 内置的 Shutdown 方法进行服务重启。\n\n```go\nr := gin.Default()\n_ = r.Run()\n// 或者启动原生服务\nmanners.ListenAndServe(\":8888\", r)\n```\n\n#### BeeGo\n\nBeego 提供了一个构建工具，有着标准的开发环境规范，可以一键生成工程目录，并在工程目录使用 `run` 指令可以直接运行项目，并且支持开发模式下的热更新。\n\n```go\nbeego.Run()\n```\n\n#### Iris\n\nIris 的主机有多种拓展功能，包括自定义监听服务、主机配置，同时也支持多主机服务。与 Gin 相似的 iris.Router与 net/http/Handler 功能兼容，它可以在任何net/http服务器上进行调整：\n\n```go\napp := iris.New()\napp.Run(iris.Addr(\":8080\"))\n\n// 或者自定义链接方式与端口号\nl, err := listenerCfg.NewListener(\"tcp\", \":8080\")\nif err != nil {\n    app.Logger().Fatal(err)\n}\napp.Run(iris.Listener(l))\n\n// 或者启动原生服务\napp.Run(iris.Raw(&http.Server{Addr:\":8080\"}).ListenAndServe)\n```\n\n## 2.2 路由\n\n#### Gin\n\nGin 在路由系统上集成了 [HttpRouter](https://github.com/julienschmidt/httprouter) 拥有高性能的优势，同时拥有其丰富的功能，包括组合路由、路由验证、CORS 等。\n\n简单路由：\n\n```go\nr := gin.Default()\nr.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n})\n```\n\n分层路由：\n\n```go\nsomeGroup := router.Group(\"/someGroup\") {\n    someGroup.GET(\"/someGet\", getting)\n    someGroup.POST(\"/somePost\", posting)\n}\n```\n\n[引用来源](https://juejin.im/post/5cc7e726f265da03452be820)\n\n#### BeeGo\n\nBeeGo 的路由功能较为丰富，拥有基础路由、固定路由、正则路由、注解路由、namespace等多个功能，其 REST 风格性较强，且有固定的路由层规范。\n\n简单路由：\n\n```go\nbeego.Get(\"/\",func(ctx *context.Context){\n     ctx.Output.Body([]byte(\"hello world\"))\n})\n```\n\n固定路由：\n\n```go\nbeego.Router(\"/\", &controllers.MainController{})\nbeego.Router(\"/admin\", &admin.UserController{})\nbeego.Router(\"/admin/index\", &admin.ArticleController{})\nbeego.Router(\"/admin/addpkg\", &admin.AddController{})\n```\n\nnamespace（分层路由）：\n\n```go\n//初始化 namespace\nns :=\nbeego.NewNamespace(\"/v1\",\n    beego.NSCond(func(ctx *context.Context) bool {\n        if ctx.Input.Domain() == \"api.beego.me\" {\n            return true\n        }\n        return false\n    }),\n    beego.NSBefore(auth),\n    beego.NSGet(\"/notallowed\", func(ctx *context.Context) {\n        ctx.Output.Body([]byte(\"notAllowed\"))\n    }),\n    beego.NSRouter(\"/version\", &AdminController{}, \"get:ShowAPIVersion\"),\n    beego.NSRouter(\"/changepassword\", &UserController{}),\n    beego.NSNamespace(\"/shop\",\n        beego.NSBefore(sentry),\n        beego.NSGet(\"/:id\", func(ctx *context.Context) {\n            ctx.Output.Body([]byte(\"notAllowed\"))\n        }),\n    ),\n    beego.NSNamespace(\"/cms\",\n        beego.NSInclude(\n            &controllers.MainController{},\n            &controllers.CMSController{},\n            &controllers.BlockController{},\n        ),\n    ),\n)\n//注册 namespace\nbeego.AddNamespace(ns)\n```\n\n#### Irisi\n\n简单路由：\n\n```go\napp.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"<h1> Hello from /contact </h1>\")\n})\n```\n\n分层路由：\n\n```go\nusers := app.Party(\"/users\", myAuthMiddlewareHandler)\n// http://localhost:8080/users/42/profile\nusers.Get(\"/{id:int}/profile\", userProfileHandler)\n// http://localhost:8080/users/inbox/1\nusers.Get(\"/inbox/{id:int}\", userMessageHandler)\n\n// 或者使用嵌套风格\napp.PartyFunc(\"/users\", func(users iris.Party) {\n    users.Use(myAuthMiddlewareHandler)\n    // http://localhost:8080/users/42/profile\n    users.Get(\"/{id:int}/profile\", userProfileHandler)\n    // http://localhost:8080/users/messages/1\n    users.Get(\"/inbox/{id:int}\", userMessageHandler)\n})\n```\n\n## 2.3 上下文对象\n\n在进行路由匹配之后，可以获取到上下文对象，三套框架都对 Context 进行了封装。\n\nGin 与 Iris 对 context 的封装均是为其增加了必要的新功能，同时可以返回原生的 `http.Request` 对象。但 Beego 的 context 模块是对原生的 `http.ResponseWriter` 和 `http.Request` 对象进行了彻底的封装，将其分为两个部分，分别为 Input 对象与 Output 对象，对应的将常用方法进行封装，并不能调出原生的对象。\n\n## 2.4 数据操作\n\n#### 原生\n\n在原生开发中，Go 支持解析 JSON 格式的数据处理能力：\n\n```go\n// 解析 JSON\nfunc Unmarshal(data []byte, v interface{}) error\n\n// 生成 JSON\nfunc Marshal(v interface{}) ([]byte, error)\n```\n\n如果使用 `simplejson` 可以简化 JSON 数据的操作：\n\n```go\njs, err := NewJson([]byte(`{\n    \"test\": {\n        \"array\": [1, \"2\", 3],\n        \"int\": 10,\n        \"float\": 5.150,\n        \"bignum\": 9223372036854775807,\n        \"string\": \"simplejson\",\n        \"bool\": true\n    }\n}`))\n\narr, _ := js.Get(\"test\").Get(\"array\").Array()\ni, _ := js.Get(\"test\").Get(\"int\").Int()\nms := js.Get(\"test\").Get(\"string\").MustString()\n```\n\n#### Gin\n\nGin 可以使用 `c.ShouldBind`方法，可以将参数自动绑定到 `struct`.该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 `content-type`类型，优先匹配`JSON`或者 `XML`,之后才是 `Form`。\n\n接收数据：\n\n```go\nfunc main() {\n    route := gin.Default()\n    route.POST(\"/testing\", (c *gin.Context) {\n        var person Person // 定义结构体步骤省略\n        // 绑定到 person\n        if c.ShouldBind(&person) == nil {\n            log.Println(person.Name)\n            log.Println(person.Address)\n            log.Println(person.Birthday)\n        }\n        c.String(200, \"Success\")\n    })\n    route.Run(\":8085\")\n}\n```\n\n发送数据：\n\nGin 输出这 JSON、 XML、 YAML 三种格式非常方便，直接使用对用方法并赋值一个结构体给它就行了。\n\n同时还可以使用`gin.H`。`gin.H` 是一个很巧妙的设计，你可以像`javascript`定义`json`一样，直接一层层写键值对，只需要在每一层加上 `gin.H`即可：\n\n```go\nfunc main() {\n    r := gin.Default()\n\n    // gin.H 本质是 map[string]interface{}\n    r.GET(\"/someJSON\", func(c *gin.Context) {\n        // 会输出头格式为 application/json; charset=UTF-8 的 json 字符串\n        c.JSON(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.GET(\"/moreJSON\", func(c *gin.Context) {\n        // 直接使用结构体定义\n        var msg struct {\n            Name    string `json:\"user\"`\n            Message string\n            Number  int\n        }\n        msg.Name = \"Lena\"\n        msg.Message = \"hey\"\n        msg.Number = 123\n        // 会输出  {\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123}\n        c.JSON(http.StatusOK, msg)\n    })\n\n    r.GET(\"/someXML\", func(c *gin.Context) {\n        // 会输出头格式为 text/xml; charset=UTF-8 的 xml 字符串\n        c.XML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.GET(\"/someYAML\", func(c *gin.Context) {\n        // 会输出头格式为 text/yaml; charset=UTF-8 的 yaml 字符串\n        c.YAML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.Run(\":8080\")\n}\n```\n\n[引用来源](https://www.yoytang.com/go-gin-doc.html)\n\nGin 支持返回的数据格式有：HTML, String，JSON， XML， YAML\n\n#### BeeGo\n\nBeego 对与JSON 数据处理则比较复杂，如果接受数据则需要从 `context.RequestBody` 中取出数据，之后需要使用断言解析数据，实际上，这里的处理方式与原生的是一样的，并未进行功能优化：\n\n```go\nvar body map[string]interface{}\n_ = json.Unmarshal(ctx.Input.RequestBody, &body) // 将 json 数据解析到 body 变量中\nusername := body[\"name\"].(string) // 使用断言取出单个数据\n```\n\n对于返回一个 json 数据，BeeGo 只是将我们创建的 json 结构对象存放于 `context.Data` 下的 `“json”` 字段中，然后调用 `context.ServeJSON()` 方法时，会去获取 `c.Data[\"json\"]` 下存放的结构然后将结果转换成 json 的数据格式并发送：\n\n```go\ntype User struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n}\n\nfunc (c *TestController) TestData() {\n\tuser := User{\n\t\tName: \"huahua\",\n\t\tAge:  18,\n\t}\n\tc.Data[\"json\"] = user\n\tc.ServeJSON()\n}\n```\n\n起始在处理 json 这一步，Beego 只是做了非常简单的替换工作，`context.ServeJSON()` 的方法调用后，取到我们设置的结构体后调用了：\n\n```go\nfunc (output *BeegoOutput) JSON(data interface{}, hasIndent bool, encoding bool) error\n```\n\n该方法将结构体通过 `json.Marshal()` 转成了 json 格式，同时又为响应报文添加了相应响应数据格式信息，之后将数据送出。\n\n此外，BeeGo 支持返回的数据类型由有：JSON、XML、JSONP\n\n#### Iris\n\nIrisi 对处理 JSON 数据的方法进行了封装，同时也拥有验证数据的能力。\n\n发送数据与前两者无差别，都是先定义结构体，然后底层使用 JSON 库的能力对 JSON 数据进行解析并赋值于创建的对象。\n\n接收数据：\n\n```go\nfunc MyHandler(ctx iris.Context) {\n    var c Company // 定义结构体省略\n    if err := ctx.ReadJSON(&c); err != nil {\n        ctx.StatusCode(iris.StatusBadRequest)\n        ctx.WriteString(err.Error())\n        return\n    }\n    ctx.Writef(\"Received: %#+v\\n\", c)\n}\n```\n\n在对于返回数据的处理上，与 Gin 相似，采用了在 `iris.Context.JSON()` 方法可以将对象转化为 JSON 数据输出。\n\n返回数据：\n\n```go\napp.Get(\"/encode\", func(ctx iris.Context) {\n    peter := User{\n        Firstname: \"John\",\n        Lastname:  \"Doe\",\n        City:      \"Neither FBI knows!!!\",\n        Age:       25,\n    }\n    //手动设置内容类型: ctx.ContentType(\"application/javascript\")\n    ctx.JSON(peter)\n})\n```\n\n[引用来源](https://studyiris.com/example/responseWriter/writeRest.html)\n\n此外，Iris 支持返回的数据格式有：binary, text, json, jsonp, xml, markdown\n\n## 2.5 模板引擎\n\n#### 原生\n\nGo web 能力中包含了模板引擎的支持，可以使用 `template` 包来进行模板处理，使用类似 `Parse`、`ParseFile`、`Execute` 等方法从文件或者字符串加载模板，然后执行类似下图展示的模板的 merge 操作：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvUEtnYnNWYW0xUXkzd0ZwLnBuZw?x-oss-process=image/format,png)\n\n```go\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    t := template.New(\"some template\") // 创建一个模板\n    t, _ = t.ParseFiles(\"tmpl/welcome.html\")  // 解析模板文件\n    user := GetUser() // 获取当前用户信息\n    t.Execute(w, user)  // 执行模板的 merger 操作\n}\n```\n\n原生的模板引擎支持以下的能力：\n\n```\n- 字段操作：`{{.}}`\n- 数据遍历： `{{with …}}…{{end}}`  `{{range …}}{{end}}`\n- 条件处理：`if ... else ...`\n- 管道符 （基于模板函数）\n- 模板函数\n- 模板变量\n- Must 操作：作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。\n\n- 嵌套模板\n```\n\n[引用来源](https://learnku.com/docs/build-web-application-with-golang/074-template-processing/3198)\n\n#### Gin\n\nGin 可以通过配置 `LoadHTMLGlob()` 或者 `LoadHTMLFiles()` 启用模板渲染，这两个方法挂载与 `gin.Defalut()` 生成的 router 对象上，用于设置，模板目录 。匹配完成后可以调用 `Context.HTML` 进行渲染和数据注入。\n\n同时，与原生不同的是，Gin 可以使用 `gin.H()` 来向模板注入 json 格式的数据，而不需要创建额外的结构体。\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.LoadHTMLGlob(\"templates/*\")\n\t//router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")\n\trouter.GET(\"/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\nGin 的模板引擎支持以下能力：\n\n- 使用自定义的 html 模板渲染\n- 自定义分隔符（模板标签）\n- 继承原生能力\n\n相比原生，Gin 定义模板的方式是采用创建全局模板对象（LoadHTMLGlob），然后在上下文对象中使用 `c.HTML` 去直接调用模板路径下的文件渲染模板。而原生则是在路由的上下文对象中创建 Template 对象，然后在上下文对象中渲染 Template 对象完成渲染工作。\n\n[引用来源](https://gin-gonic.com/zh-cn/docs/examples/html-rendering/)\n\n#### Beego\n\nbeego 的模板处理引擎采用的是 Go 内置的 `html/template` 包进行处理，而且 beego 的模板处理逻辑是采用了缓存编译方式，也就是所有的模板会在 beego 应用启动的时候全部编译然后缓存在 map 里面，Beego 的模板引擎支持以下能力：\n\n- 自定义模板目录\n- 自动渲染\n- 自定义模板标签\n- 模板数据：模板中的数据是通过在 Controller 中 `this.Data` 获取的\n- 自定义模板名称\n- layout 设计、LayoutSection：实际上是模板的组合、嵌套\n- renderform\n\n[引用来源](https://beego.me/docs/mvc/view/view.md)\n\n#### Iris\n\nIris 自身并没有创建一种直接可用的模板引擎，而是交给用户可以选择任意一种模板引擎，且完全兼容 html/template。\n\n官方推荐使用 Hero 引擎，可以预编译`html`模板以获取代码，其拥有以下特性：\n\n- 高性能.\n- 非常易用.\n- 功能强大，支持模板继承和模板include.\n- 自动编译.\n\n[Hero 文档](https://github.com/shiyanhui/hero/blob/master/README_CN.md)\n\n同时可以选用 quicktemplate 引擎，其拥有以下特性：\n\n1. 非常快。 模板转换为Go代码然后编译\n2. `Quicktemplate`语法非常接近`Go` - 在开始使用`quicktemplate`之前无需学习另一种模板语言\n3. 在模板编译期间几乎所有错误都被捕获，因此生产受模板相关错误的影响较小\n4. 使用方便。有关详细信息，请参阅快速入门和示例\n5. 强大。任意`Go`代码可以嵌入到模板中并与模板混合。小心这个功能 - 不要从模板中查询数据库`and/or`外部资源，除非你错过`Go`中的`PHP`方 式`:)`这种功能主要用于任意数据转换\n6. 易于使用的模板继承由`Go`接口提供支持。 请参阅此示例以获取详细信\n7. 模板被编译为单个二进制文件，因此无需将模板文件复制到服务器\n\n[quicktemplate 文档](https://github.com/valyala/fasttemplate)\n\n## 2.6 MVC 架构\n\n#### GIn\n\nGin 不支持 MVC 架构模式，需要开发者自行实现，具有一定的灵活性。\n\n[Gin MVC 的实现参考](https://github.com/mydevc/go-gin-mvc)\n\n#### Beego\n\nBeego 是标准的 MVC 框架，对 MVC 有着良好的支持，同时提供了 Model 层的 ORM 引擎。\n\n#### Iris\n\nIris对MVC(模型视图控制器)模式有一流的支持，Iris web框架支持请求数据、模型、持久数据和以最快的速度执行的绑定。其模式流程图如下：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvdWkyVVJXUHdqU0tNZ0RKLnBuZw?x-oss-process=image/format,png)\n\n[Iris MVC 的实现参考](https://studyiris.com/doc/irisDoc/MoviesMVCApplication.html)","source":"_posts/2019/2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比.md","raw":"---\ntitle: 2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比\ntags: [Gin, Beego, Iris, 研究报告]\ncategories:\n  - Back\n  - GoLang\ndate: 2019-10-11 22:18:51\n---\n# 1. 常见框架\n\n## 1.1 框架排名\n\n- Gin      \t31k **[Lite]**\n- Beego     22k\n- Iris           16k\n- Echo        15k **[Lite]**\n- Revel       11k \n- Martini    10k **[×]**\n- buffalo    5k   **[Lite]**\n\n## 1.2 框架特性\n\n**Gin：**\n\nGin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.\n\n快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。\n\n支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。\n\nCrash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！\n\nJSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。\n\n路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。\n\n错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。\n\n内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。\n\n可扩展性：新建一个中间件非常简单，去查看示例代码吧。\n\n[文档链接](https://gin-gonic.com/zh-cn/docs/) | 文档详细度：低\n\n**Beego：**\n\nbee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。\n\n简单化：RESTful 支持、MVC 模型，可以使用 bee 工具快速地开发应用，包括监控代码修改进行热编译、自动化测试代码以及自动化打包部署。\n\n智能化：支持智能路由、智能监控，可以监控 QPS、内存消耗、CPU 使用，以及 goroutine 的运行状况，让您的线上应用尽在掌握。\n\n模块化：beego 内置了强大的模块，包括 Session、缓存操作、日志记录、配置解析、性能监控、上下文操作、ORM 模块、请求模拟等强大的模块，足以支撑你任何的应用。\n\n高性能：beego 采用了 Go 原生的 http 包来处理请求，goroutine 的并发效率足以应付大流量的 Web 应用和 API 应用，目前已经应用于大量高并发的产品中。\n\n[文档链接](https://beego.me/docs/mvc/view/tutorial.md) | 文档详细度：高\n\n**Iris：**\n\n- 专注于高性能\n- 简单流畅的API\n- 高扩展性\n- 强大的路由和中间件生态系统\n  - 使用iris独特的表达主义路径解释器构建RESTful API\n  - 动态路径参数化或通配符路由与静态路由不冲突\n  - 使用重定向选项从URL中删除尾部斜杠\n  - 使用虚拟主机和子域名变得容易\n  - 分组API和静态或甚至动态子域名\n  - net / http和negroni-like处理程序通过iris.FromStd兼容\n  - 针对任意Http请求错误 定义处理函数\n  - 支持事务和回滚\n  - 支持响应缓存\n  - 使用简单的函数嵌入资源并与go-bindata 保持兼容\n  - mvc\n- 上下文\n  - 高度可扩展的试图渲染(目前支持markdown,json,xml，jsonp等等)\n  - 正文绑定器和发送HTTP响应的便捷功能\n  - 限制请求正文\n  - 提供静态资源或嵌入式资产\n  - 本地化i18N\n  - 压缩（Gzip是内置的）\n- 身份验证\n  - Basic Authentication\n  - OAuth, OAuth2 (支持27个以上的热门网站)\n  - JWT *服务器\n  - 通过TLS提供服务时，自动安装和提供来自[https://letsencrypt.org的证书](https://letsencrypt.xn--org-ge9dz74pcw0a/)\n  - 默认为关闭状态\n  - 在关闭，错误或中断事件时注册\n  - 连接多个服务器，完全兼容 net/http#Server\n- 视图系统.支持五种模板引擎 完全兼容 html/template\n- Websocket库，其API类似于socket.io [如果你愿意，你仍然可以使用你最喜欢的]\n- 热重启\n- Typescript集成 + Web IDE\n- Iris是最具特色的网络框架之一\n\n[文档链接1](https://studyiris.com/doc/irisDoc/DynamicPathParameters.html) [文档链接2](https://www.studyiris.com/example/) [wiki](https://github.com/kataras/iris/wiki) | 文档详细度：中\n\n## 1.3 性能测试\n\n- (1)：在一定的时间内实现的总调用数，越高越好\n- (2)：单次操作耗时（ns/op），越低越好\n- (3)：堆内存分配 （B/op）, 越低越好\n- (4)：每次操作的平均内存分配次数（allocs/op），越低越好\n\n| Benchmark name                 | (1)       | (2)         | (3)        | (4)      |\n| ------------------------------ | --------- | ----------- | ---------- | -------- |\n| **BenchmarkGin_GithubAll**     | **30000** | **48375**   | **0**      | **0**    |\n| BenchmarkAce_GithubAll         | 10000     | 134059      | 13792      | 167      |\n| BenchmarkBear_GithubAll        | 5000      | 534445      | 86448      | 943      |\n| **BenchmarkBeego_GithubAll**   | **3000**  | **592444**  | **74705**  | **812**  |\n| BenchmarkBone_GithubAll        | 200       | 6957308     | 698784     | 8453     |\n| BenchmarkDenco_GithubAll       | 10000     | 158819      | 20224      | 167      |\n| **BenchmarkEcho_GithubAll**    | **10000** | **154700**  | **6496**   | **203**  |\n| BenchmarkGocraftWeb_GithubAll  | 3000      | 570806      | 131656     | 1686     |\n| BenchmarkGoji_GithubAll        | 2000      | 818034      | 56112      | 334      |\n| BenchmarkGojiv2_GithubAll      | 2000      | 1213973     | 274768     | 3712     |\n| BenchmarkGoJsonRest_GithubAll  | 2000      | 785796      | 134371     | 2737     |\n| BenchmarkGoRestful_GithubAll   | 300       | 5238188     | 689672     | 4519     |\n| BenchmarkGorillaMux_GithubAll  | 100       | 10257726    | 211840     | 2272     |\n| BenchmarkHttpRouter_GithubAll  | 20000     | 105414      | 13792      | 167      |\n| BenchmarkHttpTreeMux_GithubAll | 10000     | 319934      | 65856      | 671      |\n| BenchmarkKocha_GithubAll       | 10000     | 209442      | 23304      | 843      |\n| BenchmarkLARS_GithubAll        | 20000     | 62565       | 0          | 0        |\n| BenchmarkMacaron_GithubAll     | 2000      | 1161270     | 204194     | 2000     |\n| **BenchmarkMartini_GithubAll** | **200**   | **9991713** | **226549** | **2325** |\n| BenchmarkPat_GithubAll         | 200       | 5590793     | 1499568    | 27435    |\n| BenchmarkPossum_GithubAll      | 10000     | 319768      | 84448      | 609      |\n| BenchmarkR2router_GithubAll    | 10000     | 305134      | 77328      | 979      |\n| BenchmarkRivet_GithubAll       | 10000     | 132134      | 16272      | 167      |\n| BenchmarkTango_GithubAll       | 3000      | 552754      | 63826      | 1618     |\n| BenchmarkTigerTonic_GithubAll  | 1000      | 1439483     | 239104     | 5374     |\n| BenchmarkTraffic_GithubAll     | 100       | 11383067    | 2659329    | 21848    |\n| BenchmarkVulcan_GithubAll      | 5000      | 394253      | 19894      | 609      |\n\n# 2. 应用\n\n## 2.1 主机服务\n\n#### Gin\n\nGin 拥有灵活的开发环境，在运行时可以选择默认的服务器来运行，也可以选择原生的  `http.ListenAndServe(\":8080\", router)` 来开启服务，这是因为其本身使用 `gin.Default()` 创建的 `router` 对象实现了 Handler 接口，这就以为着其可以选择其他的 HTTP 服务器，如 [fvbock/endless](https://github.com/fvbock/endless) 、 [manners](https://github.com/braintree/manners) 或者原生的 http.Server 内置的 Shutdown 方法进行服务重启。\n\n```go\nr := gin.Default()\n_ = r.Run()\n// 或者启动原生服务\nmanners.ListenAndServe(\":8888\", r)\n```\n\n#### BeeGo\n\nBeego 提供了一个构建工具，有着标准的开发环境规范，可以一键生成工程目录，并在工程目录使用 `run` 指令可以直接运行项目，并且支持开发模式下的热更新。\n\n```go\nbeego.Run()\n```\n\n#### Iris\n\nIris 的主机有多种拓展功能，包括自定义监听服务、主机配置，同时也支持多主机服务。与 Gin 相似的 iris.Router与 net/http/Handler 功能兼容，它可以在任何net/http服务器上进行调整：\n\n```go\napp := iris.New()\napp.Run(iris.Addr(\":8080\"))\n\n// 或者自定义链接方式与端口号\nl, err := listenerCfg.NewListener(\"tcp\", \":8080\")\nif err != nil {\n    app.Logger().Fatal(err)\n}\napp.Run(iris.Listener(l))\n\n// 或者启动原生服务\napp.Run(iris.Raw(&http.Server{Addr:\":8080\"}).ListenAndServe)\n```\n\n## 2.2 路由\n\n#### Gin\n\nGin 在路由系统上集成了 [HttpRouter](https://github.com/julienschmidt/httprouter) 拥有高性能的优势，同时拥有其丰富的功能，包括组合路由、路由验证、CORS 等。\n\n简单路由：\n\n```go\nr := gin.Default()\nr.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n})\n```\n\n分层路由：\n\n```go\nsomeGroup := router.Group(\"/someGroup\") {\n    someGroup.GET(\"/someGet\", getting)\n    someGroup.POST(\"/somePost\", posting)\n}\n```\n\n[引用来源](https://juejin.im/post/5cc7e726f265da03452be820)\n\n#### BeeGo\n\nBeeGo 的路由功能较为丰富，拥有基础路由、固定路由、正则路由、注解路由、namespace等多个功能，其 REST 风格性较强，且有固定的路由层规范。\n\n简单路由：\n\n```go\nbeego.Get(\"/\",func(ctx *context.Context){\n     ctx.Output.Body([]byte(\"hello world\"))\n})\n```\n\n固定路由：\n\n```go\nbeego.Router(\"/\", &controllers.MainController{})\nbeego.Router(\"/admin\", &admin.UserController{})\nbeego.Router(\"/admin/index\", &admin.ArticleController{})\nbeego.Router(\"/admin/addpkg\", &admin.AddController{})\n```\n\nnamespace（分层路由）：\n\n```go\n//初始化 namespace\nns :=\nbeego.NewNamespace(\"/v1\",\n    beego.NSCond(func(ctx *context.Context) bool {\n        if ctx.Input.Domain() == \"api.beego.me\" {\n            return true\n        }\n        return false\n    }),\n    beego.NSBefore(auth),\n    beego.NSGet(\"/notallowed\", func(ctx *context.Context) {\n        ctx.Output.Body([]byte(\"notAllowed\"))\n    }),\n    beego.NSRouter(\"/version\", &AdminController{}, \"get:ShowAPIVersion\"),\n    beego.NSRouter(\"/changepassword\", &UserController{}),\n    beego.NSNamespace(\"/shop\",\n        beego.NSBefore(sentry),\n        beego.NSGet(\"/:id\", func(ctx *context.Context) {\n            ctx.Output.Body([]byte(\"notAllowed\"))\n        }),\n    ),\n    beego.NSNamespace(\"/cms\",\n        beego.NSInclude(\n            &controllers.MainController{},\n            &controllers.CMSController{},\n            &controllers.BlockController{},\n        ),\n    ),\n)\n//注册 namespace\nbeego.AddNamespace(ns)\n```\n\n#### Irisi\n\n简单路由：\n\n```go\napp.Get(\"/\", func(ctx iris.Context) {\n    ctx.HTML(\"<h1> Hello from /contact </h1>\")\n})\n```\n\n分层路由：\n\n```go\nusers := app.Party(\"/users\", myAuthMiddlewareHandler)\n// http://localhost:8080/users/42/profile\nusers.Get(\"/{id:int}/profile\", userProfileHandler)\n// http://localhost:8080/users/inbox/1\nusers.Get(\"/inbox/{id:int}\", userMessageHandler)\n\n// 或者使用嵌套风格\napp.PartyFunc(\"/users\", func(users iris.Party) {\n    users.Use(myAuthMiddlewareHandler)\n    // http://localhost:8080/users/42/profile\n    users.Get(\"/{id:int}/profile\", userProfileHandler)\n    // http://localhost:8080/users/messages/1\n    users.Get(\"/inbox/{id:int}\", userMessageHandler)\n})\n```\n\n## 2.3 上下文对象\n\n在进行路由匹配之后，可以获取到上下文对象，三套框架都对 Context 进行了封装。\n\nGin 与 Iris 对 context 的封装均是为其增加了必要的新功能，同时可以返回原生的 `http.Request` 对象。但 Beego 的 context 模块是对原生的 `http.ResponseWriter` 和 `http.Request` 对象进行了彻底的封装，将其分为两个部分，分别为 Input 对象与 Output 对象，对应的将常用方法进行封装，并不能调出原生的对象。\n\n## 2.4 数据操作\n\n#### 原生\n\n在原生开发中，Go 支持解析 JSON 格式的数据处理能力：\n\n```go\n// 解析 JSON\nfunc Unmarshal(data []byte, v interface{}) error\n\n// 生成 JSON\nfunc Marshal(v interface{}) ([]byte, error)\n```\n\n如果使用 `simplejson` 可以简化 JSON 数据的操作：\n\n```go\njs, err := NewJson([]byte(`{\n    \"test\": {\n        \"array\": [1, \"2\", 3],\n        \"int\": 10,\n        \"float\": 5.150,\n        \"bignum\": 9223372036854775807,\n        \"string\": \"simplejson\",\n        \"bool\": true\n    }\n}`))\n\narr, _ := js.Get(\"test\").Get(\"array\").Array()\ni, _ := js.Get(\"test\").Get(\"int\").Int()\nms := js.Get(\"test\").Get(\"string\").MustString()\n```\n\n#### Gin\n\nGin 可以使用 `c.ShouldBind`方法，可以将参数自动绑定到 `struct`.该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 `content-type`类型，优先匹配`JSON`或者 `XML`,之后才是 `Form`。\n\n接收数据：\n\n```go\nfunc main() {\n    route := gin.Default()\n    route.POST(\"/testing\", (c *gin.Context) {\n        var person Person // 定义结构体步骤省略\n        // 绑定到 person\n        if c.ShouldBind(&person) == nil {\n            log.Println(person.Name)\n            log.Println(person.Address)\n            log.Println(person.Birthday)\n        }\n        c.String(200, \"Success\")\n    })\n    route.Run(\":8085\")\n}\n```\n\n发送数据：\n\nGin 输出这 JSON、 XML、 YAML 三种格式非常方便，直接使用对用方法并赋值一个结构体给它就行了。\n\n同时还可以使用`gin.H`。`gin.H` 是一个很巧妙的设计，你可以像`javascript`定义`json`一样，直接一层层写键值对，只需要在每一层加上 `gin.H`即可：\n\n```go\nfunc main() {\n    r := gin.Default()\n\n    // gin.H 本质是 map[string]interface{}\n    r.GET(\"/someJSON\", func(c *gin.Context) {\n        // 会输出头格式为 application/json; charset=UTF-8 的 json 字符串\n        c.JSON(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.GET(\"/moreJSON\", func(c *gin.Context) {\n        // 直接使用结构体定义\n        var msg struct {\n            Name    string `json:\"user\"`\n            Message string\n            Number  int\n        }\n        msg.Name = \"Lena\"\n        msg.Message = \"hey\"\n        msg.Number = 123\n        // 会输出  {\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123}\n        c.JSON(http.StatusOK, msg)\n    })\n\n    r.GET(\"/someXML\", func(c *gin.Context) {\n        // 会输出头格式为 text/xml; charset=UTF-8 的 xml 字符串\n        c.XML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.GET(\"/someYAML\", func(c *gin.Context) {\n        // 会输出头格式为 text/yaml; charset=UTF-8 的 yaml 字符串\n        c.YAML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n    })\n\n    r.Run(\":8080\")\n}\n```\n\n[引用来源](https://www.yoytang.com/go-gin-doc.html)\n\nGin 支持返回的数据格式有：HTML, String，JSON， XML， YAML\n\n#### BeeGo\n\nBeego 对与JSON 数据处理则比较复杂，如果接受数据则需要从 `context.RequestBody` 中取出数据，之后需要使用断言解析数据，实际上，这里的处理方式与原生的是一样的，并未进行功能优化：\n\n```go\nvar body map[string]interface{}\n_ = json.Unmarshal(ctx.Input.RequestBody, &body) // 将 json 数据解析到 body 变量中\nusername := body[\"name\"].(string) // 使用断言取出单个数据\n```\n\n对于返回一个 json 数据，BeeGo 只是将我们创建的 json 结构对象存放于 `context.Data` 下的 `“json”` 字段中，然后调用 `context.ServeJSON()` 方法时，会去获取 `c.Data[\"json\"]` 下存放的结构然后将结果转换成 json 的数据格式并发送：\n\n```go\ntype User struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n}\n\nfunc (c *TestController) TestData() {\n\tuser := User{\n\t\tName: \"huahua\",\n\t\tAge:  18,\n\t}\n\tc.Data[\"json\"] = user\n\tc.ServeJSON()\n}\n```\n\n起始在处理 json 这一步，Beego 只是做了非常简单的替换工作，`context.ServeJSON()` 的方法调用后，取到我们设置的结构体后调用了：\n\n```go\nfunc (output *BeegoOutput) JSON(data interface{}, hasIndent bool, encoding bool) error\n```\n\n该方法将结构体通过 `json.Marshal()` 转成了 json 格式，同时又为响应报文添加了相应响应数据格式信息，之后将数据送出。\n\n此外，BeeGo 支持返回的数据类型由有：JSON、XML、JSONP\n\n#### Iris\n\nIrisi 对处理 JSON 数据的方法进行了封装，同时也拥有验证数据的能力。\n\n发送数据与前两者无差别，都是先定义结构体，然后底层使用 JSON 库的能力对 JSON 数据进行解析并赋值于创建的对象。\n\n接收数据：\n\n```go\nfunc MyHandler(ctx iris.Context) {\n    var c Company // 定义结构体省略\n    if err := ctx.ReadJSON(&c); err != nil {\n        ctx.StatusCode(iris.StatusBadRequest)\n        ctx.WriteString(err.Error())\n        return\n    }\n    ctx.Writef(\"Received: %#+v\\n\", c)\n}\n```\n\n在对于返回数据的处理上，与 Gin 相似，采用了在 `iris.Context.JSON()` 方法可以将对象转化为 JSON 数据输出。\n\n返回数据：\n\n```go\napp.Get(\"/encode\", func(ctx iris.Context) {\n    peter := User{\n        Firstname: \"John\",\n        Lastname:  \"Doe\",\n        City:      \"Neither FBI knows!!!\",\n        Age:       25,\n    }\n    //手动设置内容类型: ctx.ContentType(\"application/javascript\")\n    ctx.JSON(peter)\n})\n```\n\n[引用来源](https://studyiris.com/example/responseWriter/writeRest.html)\n\n此外，Iris 支持返回的数据格式有：binary, text, json, jsonp, xml, markdown\n\n## 2.5 模板引擎\n\n#### 原生\n\nGo web 能力中包含了模板引擎的支持，可以使用 `template` 包来进行模板处理，使用类似 `Parse`、`ParseFile`、`Execute` 等方法从文件或者字符串加载模板，然后执行类似下图展示的模板的 merge 操作：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvUEtnYnNWYW0xUXkzd0ZwLnBuZw?x-oss-process=image/format,png)\n\n```go\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    t := template.New(\"some template\") // 创建一个模板\n    t, _ = t.ParseFiles(\"tmpl/welcome.html\")  // 解析模板文件\n    user := GetUser() // 获取当前用户信息\n    t.Execute(w, user)  // 执行模板的 merger 操作\n}\n```\n\n原生的模板引擎支持以下的能力：\n\n```\n- 字段操作：`{{.}}`\n- 数据遍历： `{{with …}}…{{end}}`  `{{range …}}{{end}}`\n- 条件处理：`if ... else ...`\n- 管道符 （基于模板函数）\n- 模板函数\n- 模板变量\n- Must 操作：作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。\n\n- 嵌套模板\n```\n\n[引用来源](https://learnku.com/docs/build-web-application-with-golang/074-template-processing/3198)\n\n#### Gin\n\nGin 可以通过配置 `LoadHTMLGlob()` 或者 `LoadHTMLFiles()` 启用模板渲染，这两个方法挂载与 `gin.Defalut()` 生成的 router 对象上，用于设置，模板目录 。匹配完成后可以调用 `Context.HTML` 进行渲染和数据注入。\n\n同时，与原生不同的是，Gin 可以使用 `gin.H()` 来向模板注入 json 格式的数据，而不需要创建额外的结构体。\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.LoadHTMLGlob(\"templates/*\")\n\t//router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")\n\trouter.GET(\"/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\nGin 的模板引擎支持以下能力：\n\n- 使用自定义的 html 模板渲染\n- 自定义分隔符（模板标签）\n- 继承原生能力\n\n相比原生，Gin 定义模板的方式是采用创建全局模板对象（LoadHTMLGlob），然后在上下文对象中使用 `c.HTML` 去直接调用模板路径下的文件渲染模板。而原生则是在路由的上下文对象中创建 Template 对象，然后在上下文对象中渲染 Template 对象完成渲染工作。\n\n[引用来源](https://gin-gonic.com/zh-cn/docs/examples/html-rendering/)\n\n#### Beego\n\nbeego 的模板处理引擎采用的是 Go 内置的 `html/template` 包进行处理，而且 beego 的模板处理逻辑是采用了缓存编译方式，也就是所有的模板会在 beego 应用启动的时候全部编译然后缓存在 map 里面，Beego 的模板引擎支持以下能力：\n\n- 自定义模板目录\n- 自动渲染\n- 自定义模板标签\n- 模板数据：模板中的数据是通过在 Controller 中 `this.Data` 获取的\n- 自定义模板名称\n- layout 设计、LayoutSection：实际上是模板的组合、嵌套\n- renderform\n\n[引用来源](https://beego.me/docs/mvc/view/view.md)\n\n#### Iris\n\nIris 自身并没有创建一种直接可用的模板引擎，而是交给用户可以选择任意一种模板引擎，且完全兼容 html/template。\n\n官方推荐使用 Hero 引擎，可以预编译`html`模板以获取代码，其拥有以下特性：\n\n- 高性能.\n- 非常易用.\n- 功能强大，支持模板继承和模板include.\n- 自动编译.\n\n[Hero 文档](https://github.com/shiyanhui/hero/blob/master/README_CN.md)\n\n同时可以选用 quicktemplate 引擎，其拥有以下特性：\n\n1. 非常快。 模板转换为Go代码然后编译\n2. `Quicktemplate`语法非常接近`Go` - 在开始使用`quicktemplate`之前无需学习另一种模板语言\n3. 在模板编译期间几乎所有错误都被捕获，因此生产受模板相关错误的影响较小\n4. 使用方便。有关详细信息，请参阅快速入门和示例\n5. 强大。任意`Go`代码可以嵌入到模板中并与模板混合。小心这个功能 - 不要从模板中查询数据库`and/or`外部资源，除非你错过`Go`中的`PHP`方 式`:)`这种功能主要用于任意数据转换\n6. 易于使用的模板继承由`Go`接口提供支持。 请参阅此示例以获取详细信\n7. 模板被编译为单个二进制文件，因此无需将模板文件复制到服务器\n\n[quicktemplate 文档](https://github.com/valyala/fasttemplate)\n\n## 2.6 MVC 架构\n\n#### GIn\n\nGin 不支持 MVC 架构模式，需要开发者自行实现，具有一定的灵活性。\n\n[Gin MVC 的实现参考](https://github.com/mydevc/go-gin-mvc)\n\n#### Beego\n\nBeego 是标准的 MVC 框架，对 MVC 有着良好的支持，同时提供了 Model 层的 ORM 引擎。\n\n#### Iris\n\nIris对MVC(模型视图控制器)模式有一流的支持，Iris web框架支持请求数据、模型、持久数据和以最快的速度执行的绑定。其模式流程图如下：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvdWkyVVJXUHdqU0tNZ0RKLnBuZw?x-oss-process=image/format,png)\n\n[Iris MVC 的实现参考](https://studyiris.com/doc/irisDoc/MoviesMVCApplication.html)","slug":"2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比","published":1,"updated":"2019-11-09T14:55:03.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrje005e3w4ufp5hczuk","content":"<h1 id=\"1-常见框架\"><a href=\"#1-常见框架\" class=\"headerlink\" title=\"1. 常见框架\"></a>1. 常见框架</h1><h2 id=\"1-1-框架排名\"><a href=\"#1-1-框架排名\" class=\"headerlink\" title=\"1.1 框架排名\"></a>1.1 框架排名</h2><ul>\n<li>Gin          31k <strong>[Lite]</strong></li>\n<li>Beego     22k</li>\n<li>Iris           16k</li>\n<li>Echo        15k <strong>[Lite]</strong></li>\n<li>Revel       11k </li>\n<li>Martini    10k <strong>[×]</strong></li>\n<li>buffalo    5k   <strong>[Lite]</strong></li>\n</ul>\n<h2 id=\"1-2-框架特性\"><a href=\"#1-2-框架特性\" class=\"headerlink\" title=\"1.2 框架特性\"></a>1.2 框架特性</h2><p><strong>Gin：</strong></p>\n<p>Gin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.</p>\n<p>快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</p>\n<p>支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p>\n<p>Crash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</p>\n<p>JSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</p>\n<p>路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</p>\n<p>错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</p>\n<p>内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</p>\n<p>可扩展性：新建一个中间件非常简单，去查看示例代码吧。</p>\n<p><a href=\"https://gin-gonic.com/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档链接</a> | 文档详细度：低</p>\n<p><strong>Beego：</strong></p>\n<p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p>\n<p>简单化：RESTful 支持、MVC 模型，可以使用 bee 工具快速地开发应用，包括监控代码修改进行热编译、自动化测试代码以及自动化打包部署。</p>\n<p>智能化：支持智能路由、智能监控，可以监控 QPS、内存消耗、CPU 使用，以及 goroutine 的运行状况，让您的线上应用尽在掌握。</p>\n<p>模块化：beego 内置了强大的模块，包括 Session、缓存操作、日志记录、配置解析、性能监控、上下文操作、ORM 模块、请求模拟等强大的模块，足以支撑你任何的应用。</p>\n<p>高性能：beego 采用了 Go 原生的 http 包来处理请求，goroutine 的并发效率足以应付大流量的 Web 应用和 API 应用，目前已经应用于大量高并发的产品中。</p>\n<p><a href=\"https://beego.me/docs/mvc/view/tutorial.md\" target=\"_blank\" rel=\"noopener\">文档链接</a> | 文档详细度：高</p>\n<p><strong>Iris：</strong></p>\n<ul>\n<li>专注于高性能</li>\n<li>简单流畅的API</li>\n<li>高扩展性</li>\n<li>强大的路由和中间件生态系统<ul>\n<li>使用iris独特的表达主义路径解释器构建RESTful API</li>\n<li>动态路径参数化或通配符路由与静态路由不冲突</li>\n<li>使用重定向选项从URL中删除尾部斜杠</li>\n<li>使用虚拟主机和子域名变得容易</li>\n<li>分组API和静态或甚至动态子域名</li>\n<li>net / http和negroni-like处理程序通过iris.FromStd兼容</li>\n<li>针对任意Http请求错误 定义处理函数</li>\n<li>支持事务和回滚</li>\n<li>支持响应缓存</li>\n<li>使用简单的函数嵌入资源并与go-bindata 保持兼容</li>\n<li>mvc</li>\n</ul>\n</li>\n<li>上下文<ul>\n<li>高度可扩展的试图渲染(目前支持markdown,json,xml，jsonp等等)</li>\n<li>正文绑定器和发送HTTP响应的便捷功能</li>\n<li>限制请求正文</li>\n<li>提供静态资源或嵌入式资产</li>\n<li>本地化i18N</li>\n<li>压缩（Gzip是内置的）</li>\n</ul>\n</li>\n<li>身份验证<ul>\n<li>Basic Authentication</li>\n<li>OAuth, OAuth2 (支持27个以上的热门网站)</li>\n<li>JWT *服务器</li>\n<li>通过TLS提供服务时，自动安装和提供来自<a href=\"https://letsencrypt.xn--org-ge9dz74pcw0a/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org的证书</a></li>\n<li>默认为关闭状态</li>\n<li>在关闭，错误或中断事件时注册</li>\n<li>连接多个服务器，完全兼容 net/http#Server</li>\n</ul>\n</li>\n<li>视图系统.支持五种模板引擎 完全兼容 html/template</li>\n<li>Websocket库，其API类似于socket.io [如果你愿意，你仍然可以使用你最喜欢的]</li>\n<li>热重启</li>\n<li>Typescript集成 + Web IDE</li>\n<li>Iris是最具特色的网络框架之一</li>\n</ul>\n<p><a href=\"https://studyiris.com/doc/irisDoc/DynamicPathParameters.html\" target=\"_blank\" rel=\"noopener\">文档链接1</a> <a href=\"https://www.studyiris.com/example/\" target=\"_blank\" rel=\"noopener\">文档链接2</a> <a href=\"https://github.com/kataras/iris/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a> | 文档详细度：中</p>\n<h2 id=\"1-3-性能测试\"><a href=\"#1-3-性能测试\" class=\"headerlink\" title=\"1.3 性能测试\"></a>1.3 性能测试</h2><ul>\n<li>(1)：在一定的时间内实现的总调用数，越高越好</li>\n<li>(2)：单次操作耗时（ns/op），越低越好</li>\n<li>(3)：堆内存分配 （B/op）, 越低越好</li>\n<li>(4)：每次操作的平均内存分配次数（allocs/op），越低越好</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Benchmark name</th>\n<th>(1)</th>\n<th>(2)</th>\n<th>(3)</th>\n<th>(4)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>BenchmarkGin_GithubAll</strong></td>\n<td><strong>30000</strong></td>\n<td><strong>48375</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n</tr>\n<tr>\n<td>BenchmarkAce_GithubAll</td>\n<td>10000</td>\n<td>134059</td>\n<td>13792</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkBear_GithubAll</td>\n<td>5000</td>\n<td>534445</td>\n<td>86448</td>\n<td>943</td>\n</tr>\n<tr>\n<td><strong>BenchmarkBeego_GithubAll</strong></td>\n<td><strong>3000</strong></td>\n<td><strong>592444</strong></td>\n<td><strong>74705</strong></td>\n<td><strong>812</strong></td>\n</tr>\n<tr>\n<td>BenchmarkBone_GithubAll</td>\n<td>200</td>\n<td>6957308</td>\n<td>698784</td>\n<td>8453</td>\n</tr>\n<tr>\n<td>BenchmarkDenco_GithubAll</td>\n<td>10000</td>\n<td>158819</td>\n<td>20224</td>\n<td>167</td>\n</tr>\n<tr>\n<td><strong>BenchmarkEcho_GithubAll</strong></td>\n<td><strong>10000</strong></td>\n<td><strong>154700</strong></td>\n<td><strong>6496</strong></td>\n<td><strong>203</strong></td>\n</tr>\n<tr>\n<td>BenchmarkGocraftWeb_GithubAll</td>\n<td>3000</td>\n<td>570806</td>\n<td>131656</td>\n<td>1686</td>\n</tr>\n<tr>\n<td>BenchmarkGoji_GithubAll</td>\n<td>2000</td>\n<td>818034</td>\n<td>56112</td>\n<td>334</td>\n</tr>\n<tr>\n<td>BenchmarkGojiv2_GithubAll</td>\n<td>2000</td>\n<td>1213973</td>\n<td>274768</td>\n<td>3712</td>\n</tr>\n<tr>\n<td>BenchmarkGoJsonRest_GithubAll</td>\n<td>2000</td>\n<td>785796</td>\n<td>134371</td>\n<td>2737</td>\n</tr>\n<tr>\n<td>BenchmarkGoRestful_GithubAll</td>\n<td>300</td>\n<td>5238188</td>\n<td>689672</td>\n<td>4519</td>\n</tr>\n<tr>\n<td>BenchmarkGorillaMux_GithubAll</td>\n<td>100</td>\n<td>10257726</td>\n<td>211840</td>\n<td>2272</td>\n</tr>\n<tr>\n<td>BenchmarkHttpRouter_GithubAll</td>\n<td>20000</td>\n<td>105414</td>\n<td>13792</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkHttpTreeMux_GithubAll</td>\n<td>10000</td>\n<td>319934</td>\n<td>65856</td>\n<td>671</td>\n</tr>\n<tr>\n<td>BenchmarkKocha_GithubAll</td>\n<td>10000</td>\n<td>209442</td>\n<td>23304</td>\n<td>843</td>\n</tr>\n<tr>\n<td>BenchmarkLARS_GithubAll</td>\n<td>20000</td>\n<td>62565</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>BenchmarkMacaron_GithubAll</td>\n<td>2000</td>\n<td>1161270</td>\n<td>204194</td>\n<td>2000</td>\n</tr>\n<tr>\n<td><strong>BenchmarkMartini_GithubAll</strong></td>\n<td><strong>200</strong></td>\n<td><strong>9991713</strong></td>\n<td><strong>226549</strong></td>\n<td><strong>2325</strong></td>\n</tr>\n<tr>\n<td>BenchmarkPat_GithubAll</td>\n<td>200</td>\n<td>5590793</td>\n<td>1499568</td>\n<td>27435</td>\n</tr>\n<tr>\n<td>BenchmarkPossum_GithubAll</td>\n<td>10000</td>\n<td>319768</td>\n<td>84448</td>\n<td>609</td>\n</tr>\n<tr>\n<td>BenchmarkR2router_GithubAll</td>\n<td>10000</td>\n<td>305134</td>\n<td>77328</td>\n<td>979</td>\n</tr>\n<tr>\n<td>BenchmarkRivet_GithubAll</td>\n<td>10000</td>\n<td>132134</td>\n<td>16272</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkTango_GithubAll</td>\n<td>3000</td>\n<td>552754</td>\n<td>63826</td>\n<td>1618</td>\n</tr>\n<tr>\n<td>BenchmarkTigerTonic_GithubAll</td>\n<td>1000</td>\n<td>1439483</td>\n<td>239104</td>\n<td>5374</td>\n</tr>\n<tr>\n<td>BenchmarkTraffic_GithubAll</td>\n<td>100</td>\n<td>11383067</td>\n<td>2659329</td>\n<td>21848</td>\n</tr>\n<tr>\n<td>BenchmarkVulcan_GithubAll</td>\n<td>5000</td>\n<td>394253</td>\n<td>19894</td>\n<td>609</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-应用\"><a href=\"#2-应用\" class=\"headerlink\" title=\"2. 应用\"></a>2. 应用</h1><h2 id=\"2-1-主机服务\"><a href=\"#2-1-主机服务\" class=\"headerlink\" title=\"2.1 主机服务\"></a>2.1 主机服务</h2><h4 id=\"Gin\"><a href=\"#Gin\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 拥有灵活的开发环境，在运行时可以选择默认的服务器来运行，也可以选择原生的  <code>http.ListenAndServe(&quot;:8080&quot;, router)</code> 来开启服务，这是因为其本身使用 <code>gin.Default()</code> 创建的 <code>router</code> 对象实现了 Handler 接口，这就以为着其可以选择其他的 HTTP 服务器，如 <a href=\"https://github.com/fvbock/endless\" target=\"_blank\" rel=\"noopener\">fvbock/endless</a> 、 <a href=\"https://github.com/braintree/manners\" target=\"_blank\" rel=\"noopener\">manners</a> 或者原生的 http.Server 内置的 Shutdown 方法进行服务重启。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r := gin.Default()</span><br><span class=\"line\">_ = r.Run()</span><br><span class=\"line\"><span class=\"comment\">// 或者启动原生服务</span></span><br><span class=\"line\">manners.ListenAndServe(<span class=\"string\">\":8888\"</span>, r)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BeeGo\"><a href=\"#BeeGo\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>Beego 提供了一个构建工具，有着标准的开发环境规范，可以一键生成工程目录，并在工程目录使用 <code>run</code> 指令可以直接运行项目，并且支持开发模式下的热更新。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Iris\"><a href=\"#Iris\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris 的主机有多种拓展功能，包括自定义监听服务、主机配置，同时也支持多主机服务。与 Gin 相似的 iris.Router与 net/http/Handler 功能兼容，它可以在任何net/http服务器上进行调整：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app := iris.New()</span><br><span class=\"line\">app.Run(iris.Addr(<span class=\"string\">\":8080\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者自定义链接方式与端口号</span></span><br><span class=\"line\">l, err := listenerCfg.NewListener(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    app.Logger().Fatal(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.Run(iris.Listener(l))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者启动原生服务</span></span><br><span class=\"line\">app.Run(iris.Raw(&amp;http.Server&#123;Addr:<span class=\"string\">\":8080\"</span>&#125;).ListenAndServe)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-路由\"><a href=\"#2-2-路由\" class=\"headerlink\" title=\"2.2 路由\"></a>2.2 路由</h2><h4 id=\"Gin-1\"><a href=\"#Gin-1\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 在路由系统上集成了 <a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\" rel=\"noopener\">HttpRouter</a> 拥有高性能的优势，同时拥有其丰富的功能，包括组合路由、路由验证、CORS 等。</p>\n<p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r := gin.Default()</span><br><span class=\"line\">r.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"pong\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分层路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someGroup := router.Group(<span class=\"string\">\"/someGroup\"</span>) &#123;</span><br><span class=\"line\">    someGroup.GET(<span class=\"string\">\"/someGet\"</span>, getting)</span><br><span class=\"line\">    someGroup.POST(<span class=\"string\">\"/somePost\"</span>, posting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.im/post/5cc7e726f265da03452be820\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"BeeGo-1\"><a href=\"#BeeGo-1\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>BeeGo 的路由功能较为丰富，拥有基础路由、固定路由、正则路由、注解路由、namespace等多个功能，其 REST 风格性较强，且有固定的路由层规范。</p>\n<p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Get(<span class=\"string\">\"/\"</span>,<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span>&#123;</span><br><span class=\"line\">     ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello world\"</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>固定路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin\"</span>, &amp;admin.UserController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin/index\"</span>, &amp;admin.ArticleController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin/addpkg\"</span>, &amp;admin.AddController&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>namespace（分层路由）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化 namespace</span></span><br><span class=\"line\">ns :=</span><br><span class=\"line\">beego.NewNamespace(<span class=\"string\">\"/v1\"</span>,</span><br><span class=\"line\">    beego.NSCond(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ctx.Input.Domain() == <span class=\"string\">\"api.beego.me\"</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    beego.NSBefore(auth),</span><br><span class=\"line\">    beego.NSGet(<span class=\"string\">\"/notallowed\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span> &#123;</span><br><span class=\"line\">        ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"notAllowed\"</span>))</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    beego.NSRouter(<span class=\"string\">\"/version\"</span>, &amp;AdminController&#123;&#125;, <span class=\"string\">\"get:ShowAPIVersion\"</span>),</span><br><span class=\"line\">    beego.NSRouter(<span class=\"string\">\"/changepassword\"</span>, &amp;UserController&#123;&#125;),</span><br><span class=\"line\">    beego.NSNamespace(<span class=\"string\">\"/shop\"</span>,</span><br><span class=\"line\">        beego.NSBefore(sentry),</span><br><span class=\"line\">        beego.NSGet(<span class=\"string\">\"/:id\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span> &#123;</span><br><span class=\"line\">            ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"notAllowed\"</span>))</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    beego.NSNamespace(<span class=\"string\">\"/cms\"</span>,</span><br><span class=\"line\">        beego.NSInclude(</span><br><span class=\"line\">            &amp;controllers.MainController&#123;&#125;,</span><br><span class=\"line\">            &amp;controllers.CMSController&#123;&#125;,</span><br><span class=\"line\">            &amp;controllers.BlockController&#123;&#125;,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//注册 namespace</span></span><br><span class=\"line\">beego.AddNamespace(ns)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Irisi\"><a href=\"#Irisi\" class=\"headerlink\" title=\"Irisi\"></a>Irisi</h4><p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.Get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    ctx.HTML(<span class=\"string\">\"&lt;h1&gt; Hello from /contact &lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分层路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users := app.Party(<span class=\"string\">\"/users\"</span>, myAuthMiddlewareHandler)</span><br><span class=\"line\"><span class=\"comment\">// http://localhost:8080/users/42/profile</span></span><br><span class=\"line\">users.Get(<span class=\"string\">\"/&#123;id:int&#125;/profile\"</span>, userProfileHandler)</span><br><span class=\"line\"><span class=\"comment\">// http://localhost:8080/users/inbox/1</span></span><br><span class=\"line\">users.Get(<span class=\"string\">\"/inbox/&#123;id:int&#125;\"</span>, userMessageHandler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用嵌套风格</span></span><br><span class=\"line\">app.PartyFunc(<span class=\"string\">\"/users\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(users iris.Party)</span></span> &#123;</span><br><span class=\"line\">    users.Use(myAuthMiddlewareHandler)</span><br><span class=\"line\">    <span class=\"comment\">// http://localhost:8080/users/42/profile</span></span><br><span class=\"line\">    users.Get(<span class=\"string\">\"/&#123;id:int&#125;/profile\"</span>, userProfileHandler)</span><br><span class=\"line\">    <span class=\"comment\">// http://localhost:8080/users/messages/1</span></span><br><span class=\"line\">    users.Get(<span class=\"string\">\"/inbox/&#123;id:int&#125;\"</span>, userMessageHandler)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-上下文对象\"><a href=\"#2-3-上下文对象\" class=\"headerlink\" title=\"2.3 上下文对象\"></a>2.3 上下文对象</h2><p>在进行路由匹配之后，可以获取到上下文对象，三套框架都对 Context 进行了封装。</p>\n<p>Gin 与 Iris 对 context 的封装均是为其增加了必要的新功能，同时可以返回原生的 <code>http.Request</code> 对象。但 Beego 的 context 模块是对原生的 <code>http.ResponseWriter</code> 和 <code>http.Request</code> 对象进行了彻底的封装，将其分为两个部分，分别为 Input 对象与 Output 对象，对应的将常用方法进行封装，并不能调出原生的对象。</p>\n<h2 id=\"2-4-数据操作\"><a href=\"#2-4-数据操作\" class=\"headerlink\" title=\"2.4 数据操作\"></a>2.4 数据操作</h2><h4 id=\"原生\"><a href=\"#原生\" class=\"headerlink\" title=\"原生\"></a>原生</h4><p>在原生开发中，Go 支持解析 JSON 格式的数据处理能力：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析 JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Unmarshal</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成 JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Marshal</span><span class=\"params\">(v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用 <code>simplejson</code> 可以简化 JSON 数据的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js, err := NewJson([]<span class=\"keyword\">byte</span>(<span class=\"string\">`&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"test\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"array\": [1, \"2\", 3],</span></span><br><span class=\"line\"><span class=\"string\">        \"int\": 10,</span></span><br><span class=\"line\"><span class=\"string\">        \"float\": 5.150,</span></span><br><span class=\"line\"><span class=\"string\">        \"bignum\": 9223372036854775807,</span></span><br><span class=\"line\"><span class=\"string\">        \"string\": \"simplejson\",</span></span><br><span class=\"line\"><span class=\"string\">        \"bool\": true</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">arr, _ := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"array\"</span>).Array()</span><br><span class=\"line\">i, _ := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"int\"</span>).Int()</span><br><span class=\"line\">ms := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"string\"</span>).MustString()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gin-2\"><a href=\"#Gin-2\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 可以使用 <code>c.ShouldBind</code>方法，可以将参数自动绑定到 <code>struct</code>.该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 <code>content-type</code>类型，优先匹配<code>JSON</code>或者 <code>XML</code>,之后才是 <code>Form</code>。</p>\n<p>接收数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    route := gin.Default()</span><br><span class=\"line\">    route.POST(<span class=\"string\">\"/testing\"</span>, (c *gin.Context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person Person <span class=\"comment\">// 定义结构体步骤省略</span></span><br><span class=\"line\">        <span class=\"comment\">// 绑定到 person</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> c.ShouldBind(&amp;person) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            log.Println(person.Name)</span><br><span class=\"line\">            log.Println(person.Address)</span><br><span class=\"line\">            log.Println(person.Birthday)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.String(<span class=\"number\">200</span>, <span class=\"string\">\"Success\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    route.Run(<span class=\"string\">\":8085\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送数据：</p>\n<p>Gin 输出这 JSON、 XML、 YAML 三种格式非常方便，直接使用对用方法并赋值一个结构体给它就行了。</p>\n<p>同时还可以使用<code>gin.H</code>。<code>gin.H</code> 是一个很巧妙的设计，你可以像<code>javascript</code>定义<code>json</code>一样，直接一层层写键值对，只需要在每一层加上 <code>gin.H</code>即可：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    r := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gin.H 本质是 map[string]interface&#123;&#125;</span></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 application/json; charset=UTF-8 的 json 字符串</span></span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/moreJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接使用结构体定义</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> msg <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">            Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"user\"`</span></span><br><span class=\"line\">            Message <span class=\"keyword\">string</span></span><br><span class=\"line\">            Number  <span class=\"keyword\">int</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.Name = <span class=\"string\">\"Lena\"</span></span><br><span class=\"line\">        msg.Message = <span class=\"string\">\"hey\"</span></span><br><span class=\"line\">        msg.Number = <span class=\"number\">123</span></span><br><span class=\"line\">        <span class=\"comment\">// 会输出  &#123;\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123&#125;</span></span><br><span class=\"line\">        c.JSON(http.StatusOK, msg)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someXML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 text/xml; charset=UTF-8 的 xml 字符串</span></span><br><span class=\"line\">        c.XML(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someYAML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 text/yaml; charset=UTF-8 的 yaml 字符串</span></span><br><span class=\"line\">        c.YAML(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.yoytang.com/go-gin-doc.html\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<p>Gin 支持返回的数据格式有：HTML, String，JSON， XML， YAML</p>\n<h4 id=\"BeeGo-2\"><a href=\"#BeeGo-2\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>Beego 对与JSON 数据处理则比较复杂，如果接受数据则需要从 <code>context.RequestBody</code> 中取出数据，之后需要使用断言解析数据，实际上，这里的处理方式与原生的是一样的，并未进行功能优化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">_ = json.Unmarshal(ctx.Input.RequestBody, &amp;body) <span class=\"comment\">// 将 json 数据解析到 body 变量中</span></span><br><span class=\"line\">username := body[<span class=\"string\">\"name\"</span>].(<span class=\"keyword\">string</span>) <span class=\"comment\">// 使用断言取出单个数据</span></span><br></pre></td></tr></table></figure>\n\n<p>对于返回一个 json 数据，BeeGo 只是将我们创建的 json 结构对象存放于 <code>context.Data</code> 下的 <code>“json”</code> 字段中，然后调用 <code>context.ServeJSON()</code> 方法时，会去获取 <code>c.Data[&quot;json&quot;]</code> 下存放的结构然后将结果转换成 json 的数据格式并发送：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">    Age  <span class=\"keyword\">int</span>    <span class=\"string\">`json:\"age\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *TestController)</span> <span class=\"title\">TestData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuser := User&#123;</span><br><span class=\"line\">\t\tName: <span class=\"string\">\"huahua\"</span>,</span><br><span class=\"line\">\t\tAge:  <span class=\"number\">18</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"json\"</span>] = user</span><br><span class=\"line\">\tc.ServeJSON()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>起始在处理 json 这一步，Beego 只是做了非常简单的替换工作，<code>context.ServeJSON()</code> 的方法调用后，取到我们设置的结构体后调用了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(output *BeegoOutput)</span> <span class=\"title\">JSON</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;, hasIndent <span class=\"keyword\">bool</span>, encoding <span class=\"keyword\">bool</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将结构体通过 <code>json.Marshal()</code> 转成了 json 格式，同时又为响应报文添加了相应响应数据格式信息，之后将数据送出。</p>\n<p>此外，BeeGo 支持返回的数据类型由有：JSON、XML、JSONP</p>\n<h4 id=\"Iris-1\"><a href=\"#Iris-1\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Irisi 对处理 JSON 数据的方法进行了封装，同时也拥有验证数据的能力。</p>\n<p>发送数据与前两者无差别，都是先定义结构体，然后底层使用 JSON 库的能力对 JSON 数据进行解析并赋值于创建的对象。</p>\n<p>接收数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyHandler</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c Company <span class=\"comment\">// 定义结构体省略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := ctx.ReadJSON(&amp;c); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        ctx.StatusCode(iris.StatusBadRequest)</span><br><span class=\"line\">        ctx.WriteString(err.Error())</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.Writef(<span class=\"string\">\"Received: %#+v\\n\"</span>, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对于返回数据的处理上，与 Gin 相似，采用了在 <code>iris.Context.JSON()</code> 方法可以将对象转化为 JSON 数据输出。</p>\n<p>返回数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.Get(<span class=\"string\">\"/encode\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    peter := User&#123;</span><br><span class=\"line\">        Firstname: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">        Lastname:  <span class=\"string\">\"Doe\"</span>,</span><br><span class=\"line\">        City:      <span class=\"string\">\"Neither FBI knows!!!\"</span>,</span><br><span class=\"line\">        Age:       <span class=\"number\">25</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//手动设置内容类型: ctx.ContentType(\"application/javascript\")</span></span><br><span class=\"line\">    ctx.JSON(peter)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://studyiris.com/example/responseWriter/writeRest.html\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<p>此外，Iris 支持返回的数据格式有：binary, text, json, jsonp, xml, markdown</p>\n<h2 id=\"2-5-模板引擎\"><a href=\"#2-5-模板引擎\" class=\"headerlink\" title=\"2.5 模板引擎\"></a>2.5 模板引擎</h2><h4 id=\"原生-1\"><a href=\"#原生-1\" class=\"headerlink\" title=\"原生\"></a>原生</h4><p>Go web 能力中包含了模板引擎的支持，可以使用 <code>template</code> 包来进行模板处理，使用类似 <code>Parse</code>、<code>ParseFile</code>、<code>Execute</code> 等方法从文件或者字符串加载模板，然后执行类似下图展示的模板的 merge 操作：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvUEtnYnNWYW0xUXkzd0ZwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    t := template.New(<span class=\"string\">\"some template\"</span>) <span class=\"comment\">// 创建一个模板</span></span><br><span class=\"line\">    t, _ = t.ParseFiles(<span class=\"string\">\"tmpl/welcome.html\"</span>)  <span class=\"comment\">// 解析模板文件</span></span><br><span class=\"line\">    user := GetUser() <span class=\"comment\">// 获取当前用户信息</span></span><br><span class=\"line\">    t.Execute(w, user)  <span class=\"comment\">// 执行模板的 merger 操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原生的模板引擎支持以下的能力：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 字段操作：`&#123;&#123;.&#125;&#125;`</span><br><span class=\"line\">- 数据遍历： `&#123;&#123;with …&#125;&#125;…&#123;&#123;end&#125;&#125;`  `&#123;&#123;range …&#125;&#125;&#123;&#123;end&#125;&#125;`</span><br><span class=\"line\">- 条件处理：`if ... else ...`</span><br><span class=\"line\">- 管道符 （基于模板函数）</span><br><span class=\"line\">- 模板函数</span><br><span class=\"line\">- 模板变量</span><br><span class=\"line\">- Must 操作：作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。</span><br><span class=\"line\"></span><br><span class=\"line\">- 嵌套模板</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://learnku.com/docs/build-web-application-with-golang/074-template-processing/3198\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Gin-3\"><a href=\"#Gin-3\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 可以通过配置 <code>LoadHTMLGlob()</code> 或者 <code>LoadHTMLFiles()</code> 启用模板渲染，这两个方法挂载与 <code>gin.Defalut()</code> 生成的 router 对象上，用于设置，模板目录 。匹配完成后可以调用 <code>Context.HTML</code> 进行渲染和数据注入。</p>\n<p>同时，与原生不同的是，Gin 可以使用 <code>gin.H()</code> 来向模板注入 json 格式的数据，而不需要创建额外的结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\trouter.LoadHTMLGlob(<span class=\"string\">\"templates/*\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")</span></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/index\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">\"index.tmpl\"</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"title\"</span>: <span class=\"string\">\"Main website\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Gin 的模板引擎支持以下能力：</p>\n<ul>\n<li>使用自定义的 html 模板渲染</li>\n<li>自定义分隔符（模板标签）</li>\n<li>继承原生能力</li>\n</ul>\n<p>相比原生，Gin 定义模板的方式是采用创建全局模板对象（LoadHTMLGlob），然后在上下文对象中使用 <code>c.HTML</code> 去直接调用模板路径下的文件渲染模板。而原生则是在路由的上下文对象中创建 Template 对象，然后在上下文对象中渲染 Template 对象完成渲染工作。</p>\n<p><a href=\"https://gin-gonic.com/zh-cn/docs/examples/html-rendering/\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Beego\"><a href=\"#Beego\" class=\"headerlink\" title=\"Beego\"></a>Beego</h4><p>beego 的模板处理引擎采用的是 Go 内置的 <code>html/template</code> 包进行处理，而且 beego 的模板处理逻辑是采用了缓存编译方式，也就是所有的模板会在 beego 应用启动的时候全部编译然后缓存在 map 里面，Beego 的模板引擎支持以下能力：</p>\n<ul>\n<li>自定义模板目录</li>\n<li>自动渲染</li>\n<li>自定义模板标签</li>\n<li>模板数据：模板中的数据是通过在 Controller 中 <code>this.Data</code> 获取的</li>\n<li>自定义模板名称</li>\n<li>layout 设计、LayoutSection：实际上是模板的组合、嵌套</li>\n<li>renderform</li>\n</ul>\n<p><a href=\"https://beego.me/docs/mvc/view/view.md\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Iris-2\"><a href=\"#Iris-2\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris 自身并没有创建一种直接可用的模板引擎，而是交给用户可以选择任意一种模板引擎，且完全兼容 html/template。</p>\n<p>官方推荐使用 Hero 引擎，可以预编译<code>html</code>模板以获取代码，其拥有以下特性：</p>\n<ul>\n<li>高性能.</li>\n<li>非常易用.</li>\n<li>功能强大，支持模板继承和模板include.</li>\n<li>自动编译.</li>\n</ul>\n<p><a href=\"https://github.com/shiyanhui/hero/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">Hero 文档</a></p>\n<p>同时可以选用 quicktemplate 引擎，其拥有以下特性：</p>\n<ol>\n<li>非常快。 模板转换为Go代码然后编译</li>\n<li><code>Quicktemplate</code>语法非常接近<code>Go</code> - 在开始使用<code>quicktemplate</code>之前无需学习另一种模板语言</li>\n<li>在模板编译期间几乎所有错误都被捕获，因此生产受模板相关错误的影响较小</li>\n<li>使用方便。有关详细信息，请参阅快速入门和示例</li>\n<li>强大。任意<code>Go</code>代码可以嵌入到模板中并与模板混合。小心这个功能 - 不要从模板中查询数据库<code>and/or</code>外部资源，除非你错过<code>Go</code>中的<code>PHP</code>方 式<code>:)</code>这种功能主要用于任意数据转换</li>\n<li>易于使用的模板继承由<code>Go</code>接口提供支持。 请参阅此示例以获取详细信</li>\n<li>模板被编译为单个二进制文件，因此无需将模板文件复制到服务器</li>\n</ol>\n<p><a href=\"https://github.com/valyala/fasttemplate\" target=\"_blank\" rel=\"noopener\">quicktemplate 文档</a></p>\n<h2 id=\"2-6-MVC-架构\"><a href=\"#2-6-MVC-架构\" class=\"headerlink\" title=\"2.6 MVC 架构\"></a>2.6 MVC 架构</h2><h4 id=\"GIn\"><a href=\"#GIn\" class=\"headerlink\" title=\"GIn\"></a>GIn</h4><p>Gin 不支持 MVC 架构模式，需要开发者自行实现，具有一定的灵活性。</p>\n<p><a href=\"https://github.com/mydevc/go-gin-mvc\" target=\"_blank\" rel=\"noopener\">Gin MVC 的实现参考</a></p>\n<h4 id=\"Beego-1\"><a href=\"#Beego-1\" class=\"headerlink\" title=\"Beego\"></a>Beego</h4><p>Beego 是标准的 MVC 框架，对 MVC 有着良好的支持，同时提供了 Model 层的 ORM 引擎。</p>\n<h4 id=\"Iris-3\"><a href=\"#Iris-3\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris对MVC(模型视图控制器)模式有一流的支持，Iris web框架支持请求数据、模型、持久数据和以最快的速度执行的绑定。其模式流程图如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvdWkyVVJXUHdqU0tNZ0RKLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p><a href=\"https://studyiris.com/doc/irisDoc/MoviesMVCApplication.html\" target=\"_blank\" rel=\"noopener\">Iris MVC 的实现参考</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-常见框架\"><a href=\"#1-常见框架\" class=\"headerlink\" title=\"1. 常见框架\"></a>1. 常见框架</h1><h2 id=\"1-1-框架排名\"><a href=\"#1-1-框架排名\" class=\"headerlink\" title=\"1.1 框架排名\"></a>1.1 框架排名</h2><ul>\n<li>Gin          31k <strong>[Lite]</strong></li>\n<li>Beego     22k</li>\n<li>Iris           16k</li>\n<li>Echo        15k <strong>[Lite]</strong></li>\n<li>Revel       11k </li>\n<li>Martini    10k <strong>[×]</strong></li>\n<li>buffalo    5k   <strong>[Lite]</strong></li>\n</ul>\n<h2 id=\"1-2-框架特性\"><a href=\"#1-2-框架特性\" class=\"headerlink\" title=\"1.2 框架特性\"></a>1.2 框架特性</h2><p><strong>Gin：</strong></p>\n<p>Gin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.</p>\n<p>快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</p>\n<p>支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p>\n<p>Crash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</p>\n<p>JSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</p>\n<p>路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</p>\n<p>错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</p>\n<p>内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</p>\n<p>可扩展性：新建一个中间件非常简单，去查看示例代码吧。</p>\n<p><a href=\"https://gin-gonic.com/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档链接</a> | 文档详细度：低</p>\n<p><strong>Beego：</strong></p>\n<p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p>\n<p>简单化：RESTful 支持、MVC 模型，可以使用 bee 工具快速地开发应用，包括监控代码修改进行热编译、自动化测试代码以及自动化打包部署。</p>\n<p>智能化：支持智能路由、智能监控，可以监控 QPS、内存消耗、CPU 使用，以及 goroutine 的运行状况，让您的线上应用尽在掌握。</p>\n<p>模块化：beego 内置了强大的模块，包括 Session、缓存操作、日志记录、配置解析、性能监控、上下文操作、ORM 模块、请求模拟等强大的模块，足以支撑你任何的应用。</p>\n<p>高性能：beego 采用了 Go 原生的 http 包来处理请求，goroutine 的并发效率足以应付大流量的 Web 应用和 API 应用，目前已经应用于大量高并发的产品中。</p>\n<p><a href=\"https://beego.me/docs/mvc/view/tutorial.md\" target=\"_blank\" rel=\"noopener\">文档链接</a> | 文档详细度：高</p>\n<p><strong>Iris：</strong></p>\n<ul>\n<li>专注于高性能</li>\n<li>简单流畅的API</li>\n<li>高扩展性</li>\n<li>强大的路由和中间件生态系统<ul>\n<li>使用iris独特的表达主义路径解释器构建RESTful API</li>\n<li>动态路径参数化或通配符路由与静态路由不冲突</li>\n<li>使用重定向选项从URL中删除尾部斜杠</li>\n<li>使用虚拟主机和子域名变得容易</li>\n<li>分组API和静态或甚至动态子域名</li>\n<li>net / http和negroni-like处理程序通过iris.FromStd兼容</li>\n<li>针对任意Http请求错误 定义处理函数</li>\n<li>支持事务和回滚</li>\n<li>支持响应缓存</li>\n<li>使用简单的函数嵌入资源并与go-bindata 保持兼容</li>\n<li>mvc</li>\n</ul>\n</li>\n<li>上下文<ul>\n<li>高度可扩展的试图渲染(目前支持markdown,json,xml，jsonp等等)</li>\n<li>正文绑定器和发送HTTP响应的便捷功能</li>\n<li>限制请求正文</li>\n<li>提供静态资源或嵌入式资产</li>\n<li>本地化i18N</li>\n<li>压缩（Gzip是内置的）</li>\n</ul>\n</li>\n<li>身份验证<ul>\n<li>Basic Authentication</li>\n<li>OAuth, OAuth2 (支持27个以上的热门网站)</li>\n<li>JWT *服务器</li>\n<li>通过TLS提供服务时，自动安装和提供来自<a href=\"https://letsencrypt.xn--org-ge9dz74pcw0a/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org的证书</a></li>\n<li>默认为关闭状态</li>\n<li>在关闭，错误或中断事件时注册</li>\n<li>连接多个服务器，完全兼容 net/http#Server</li>\n</ul>\n</li>\n<li>视图系统.支持五种模板引擎 完全兼容 html/template</li>\n<li>Websocket库，其API类似于socket.io [如果你愿意，你仍然可以使用你最喜欢的]</li>\n<li>热重启</li>\n<li>Typescript集成 + Web IDE</li>\n<li>Iris是最具特色的网络框架之一</li>\n</ul>\n<p><a href=\"https://studyiris.com/doc/irisDoc/DynamicPathParameters.html\" target=\"_blank\" rel=\"noopener\">文档链接1</a> <a href=\"https://www.studyiris.com/example/\" target=\"_blank\" rel=\"noopener\">文档链接2</a> <a href=\"https://github.com/kataras/iris/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a> | 文档详细度：中</p>\n<h2 id=\"1-3-性能测试\"><a href=\"#1-3-性能测试\" class=\"headerlink\" title=\"1.3 性能测试\"></a>1.3 性能测试</h2><ul>\n<li>(1)：在一定的时间内实现的总调用数，越高越好</li>\n<li>(2)：单次操作耗时（ns/op），越低越好</li>\n<li>(3)：堆内存分配 （B/op）, 越低越好</li>\n<li>(4)：每次操作的平均内存分配次数（allocs/op），越低越好</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Benchmark name</th>\n<th>(1)</th>\n<th>(2)</th>\n<th>(3)</th>\n<th>(4)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>BenchmarkGin_GithubAll</strong></td>\n<td><strong>30000</strong></td>\n<td><strong>48375</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n</tr>\n<tr>\n<td>BenchmarkAce_GithubAll</td>\n<td>10000</td>\n<td>134059</td>\n<td>13792</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkBear_GithubAll</td>\n<td>5000</td>\n<td>534445</td>\n<td>86448</td>\n<td>943</td>\n</tr>\n<tr>\n<td><strong>BenchmarkBeego_GithubAll</strong></td>\n<td><strong>3000</strong></td>\n<td><strong>592444</strong></td>\n<td><strong>74705</strong></td>\n<td><strong>812</strong></td>\n</tr>\n<tr>\n<td>BenchmarkBone_GithubAll</td>\n<td>200</td>\n<td>6957308</td>\n<td>698784</td>\n<td>8453</td>\n</tr>\n<tr>\n<td>BenchmarkDenco_GithubAll</td>\n<td>10000</td>\n<td>158819</td>\n<td>20224</td>\n<td>167</td>\n</tr>\n<tr>\n<td><strong>BenchmarkEcho_GithubAll</strong></td>\n<td><strong>10000</strong></td>\n<td><strong>154700</strong></td>\n<td><strong>6496</strong></td>\n<td><strong>203</strong></td>\n</tr>\n<tr>\n<td>BenchmarkGocraftWeb_GithubAll</td>\n<td>3000</td>\n<td>570806</td>\n<td>131656</td>\n<td>1686</td>\n</tr>\n<tr>\n<td>BenchmarkGoji_GithubAll</td>\n<td>2000</td>\n<td>818034</td>\n<td>56112</td>\n<td>334</td>\n</tr>\n<tr>\n<td>BenchmarkGojiv2_GithubAll</td>\n<td>2000</td>\n<td>1213973</td>\n<td>274768</td>\n<td>3712</td>\n</tr>\n<tr>\n<td>BenchmarkGoJsonRest_GithubAll</td>\n<td>2000</td>\n<td>785796</td>\n<td>134371</td>\n<td>2737</td>\n</tr>\n<tr>\n<td>BenchmarkGoRestful_GithubAll</td>\n<td>300</td>\n<td>5238188</td>\n<td>689672</td>\n<td>4519</td>\n</tr>\n<tr>\n<td>BenchmarkGorillaMux_GithubAll</td>\n<td>100</td>\n<td>10257726</td>\n<td>211840</td>\n<td>2272</td>\n</tr>\n<tr>\n<td>BenchmarkHttpRouter_GithubAll</td>\n<td>20000</td>\n<td>105414</td>\n<td>13792</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkHttpTreeMux_GithubAll</td>\n<td>10000</td>\n<td>319934</td>\n<td>65856</td>\n<td>671</td>\n</tr>\n<tr>\n<td>BenchmarkKocha_GithubAll</td>\n<td>10000</td>\n<td>209442</td>\n<td>23304</td>\n<td>843</td>\n</tr>\n<tr>\n<td>BenchmarkLARS_GithubAll</td>\n<td>20000</td>\n<td>62565</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>BenchmarkMacaron_GithubAll</td>\n<td>2000</td>\n<td>1161270</td>\n<td>204194</td>\n<td>2000</td>\n</tr>\n<tr>\n<td><strong>BenchmarkMartini_GithubAll</strong></td>\n<td><strong>200</strong></td>\n<td><strong>9991713</strong></td>\n<td><strong>226549</strong></td>\n<td><strong>2325</strong></td>\n</tr>\n<tr>\n<td>BenchmarkPat_GithubAll</td>\n<td>200</td>\n<td>5590793</td>\n<td>1499568</td>\n<td>27435</td>\n</tr>\n<tr>\n<td>BenchmarkPossum_GithubAll</td>\n<td>10000</td>\n<td>319768</td>\n<td>84448</td>\n<td>609</td>\n</tr>\n<tr>\n<td>BenchmarkR2router_GithubAll</td>\n<td>10000</td>\n<td>305134</td>\n<td>77328</td>\n<td>979</td>\n</tr>\n<tr>\n<td>BenchmarkRivet_GithubAll</td>\n<td>10000</td>\n<td>132134</td>\n<td>16272</td>\n<td>167</td>\n</tr>\n<tr>\n<td>BenchmarkTango_GithubAll</td>\n<td>3000</td>\n<td>552754</td>\n<td>63826</td>\n<td>1618</td>\n</tr>\n<tr>\n<td>BenchmarkTigerTonic_GithubAll</td>\n<td>1000</td>\n<td>1439483</td>\n<td>239104</td>\n<td>5374</td>\n</tr>\n<tr>\n<td>BenchmarkTraffic_GithubAll</td>\n<td>100</td>\n<td>11383067</td>\n<td>2659329</td>\n<td>21848</td>\n</tr>\n<tr>\n<td>BenchmarkVulcan_GithubAll</td>\n<td>5000</td>\n<td>394253</td>\n<td>19894</td>\n<td>609</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-应用\"><a href=\"#2-应用\" class=\"headerlink\" title=\"2. 应用\"></a>2. 应用</h1><h2 id=\"2-1-主机服务\"><a href=\"#2-1-主机服务\" class=\"headerlink\" title=\"2.1 主机服务\"></a>2.1 主机服务</h2><h4 id=\"Gin\"><a href=\"#Gin\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 拥有灵活的开发环境，在运行时可以选择默认的服务器来运行，也可以选择原生的  <code>http.ListenAndServe(&quot;:8080&quot;, router)</code> 来开启服务，这是因为其本身使用 <code>gin.Default()</code> 创建的 <code>router</code> 对象实现了 Handler 接口，这就以为着其可以选择其他的 HTTP 服务器，如 <a href=\"https://github.com/fvbock/endless\" target=\"_blank\" rel=\"noopener\">fvbock/endless</a> 、 <a href=\"https://github.com/braintree/manners\" target=\"_blank\" rel=\"noopener\">manners</a> 或者原生的 http.Server 内置的 Shutdown 方法进行服务重启。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r := gin.Default()</span><br><span class=\"line\">_ = r.Run()</span><br><span class=\"line\"><span class=\"comment\">// 或者启动原生服务</span></span><br><span class=\"line\">manners.ListenAndServe(<span class=\"string\">\":8888\"</span>, r)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BeeGo\"><a href=\"#BeeGo\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>Beego 提供了一个构建工具，有着标准的开发环境规范，可以一键生成工程目录，并在工程目录使用 <code>run</code> 指令可以直接运行项目，并且支持开发模式下的热更新。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Iris\"><a href=\"#Iris\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris 的主机有多种拓展功能，包括自定义监听服务、主机配置，同时也支持多主机服务。与 Gin 相似的 iris.Router与 net/http/Handler 功能兼容，它可以在任何net/http服务器上进行调整：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app := iris.New()</span><br><span class=\"line\">app.Run(iris.Addr(<span class=\"string\">\":8080\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者自定义链接方式与端口号</span></span><br><span class=\"line\">l, err := listenerCfg.NewListener(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    app.Logger().Fatal(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.Run(iris.Listener(l))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者启动原生服务</span></span><br><span class=\"line\">app.Run(iris.Raw(&amp;http.Server&#123;Addr:<span class=\"string\">\":8080\"</span>&#125;).ListenAndServe)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-路由\"><a href=\"#2-2-路由\" class=\"headerlink\" title=\"2.2 路由\"></a>2.2 路由</h2><h4 id=\"Gin-1\"><a href=\"#Gin-1\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 在路由系统上集成了 <a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\" rel=\"noopener\">HttpRouter</a> 拥有高性能的优势，同时拥有其丰富的功能，包括组合路由、路由验证、CORS 等。</p>\n<p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r := gin.Default()</span><br><span class=\"line\">r.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">\"pong\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分层路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someGroup := router.Group(<span class=\"string\">\"/someGroup\"</span>) &#123;</span><br><span class=\"line\">    someGroup.GET(<span class=\"string\">\"/someGet\"</span>, getting)</span><br><span class=\"line\">    someGroup.POST(<span class=\"string\">\"/somePost\"</span>, posting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.im/post/5cc7e726f265da03452be820\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"BeeGo-1\"><a href=\"#BeeGo-1\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>BeeGo 的路由功能较为丰富，拥有基础路由、固定路由、正则路由、注解路由、namespace等多个功能，其 REST 风格性较强，且有固定的路由层规范。</p>\n<p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Get(<span class=\"string\">\"/\"</span>,<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span>&#123;</span><br><span class=\"line\">     ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello world\"</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>固定路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beego.Router(<span class=\"string\">\"/\"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin\"</span>, &amp;admin.UserController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin/index\"</span>, &amp;admin.ArticleController&#123;&#125;)</span><br><span class=\"line\">beego.Router(<span class=\"string\">\"/admin/addpkg\"</span>, &amp;admin.AddController&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>namespace（分层路由）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化 namespace</span></span><br><span class=\"line\">ns :=</span><br><span class=\"line\">beego.NewNamespace(<span class=\"string\">\"/v1\"</span>,</span><br><span class=\"line\">    beego.NSCond(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ctx.Input.Domain() == <span class=\"string\">\"api.beego.me\"</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    beego.NSBefore(auth),</span><br><span class=\"line\">    beego.NSGet(<span class=\"string\">\"/notallowed\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span> &#123;</span><br><span class=\"line\">        ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"notAllowed\"</span>))</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    beego.NSRouter(<span class=\"string\">\"/version\"</span>, &amp;AdminController&#123;&#125;, <span class=\"string\">\"get:ShowAPIVersion\"</span>),</span><br><span class=\"line\">    beego.NSRouter(<span class=\"string\">\"/changepassword\"</span>, &amp;UserController&#123;&#125;),</span><br><span class=\"line\">    beego.NSNamespace(<span class=\"string\">\"/shop\"</span>,</span><br><span class=\"line\">        beego.NSBefore(sentry),</span><br><span class=\"line\">        beego.NSGet(<span class=\"string\">\"/:id\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *context.Context)</span></span> &#123;</span><br><span class=\"line\">            ctx.Output.Body([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"notAllowed\"</span>))</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    beego.NSNamespace(<span class=\"string\">\"/cms\"</span>,</span><br><span class=\"line\">        beego.NSInclude(</span><br><span class=\"line\">            &amp;controllers.MainController&#123;&#125;,</span><br><span class=\"line\">            &amp;controllers.CMSController&#123;&#125;,</span><br><span class=\"line\">            &amp;controllers.BlockController&#123;&#125;,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//注册 namespace</span></span><br><span class=\"line\">beego.AddNamespace(ns)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Irisi\"><a href=\"#Irisi\" class=\"headerlink\" title=\"Irisi\"></a>Irisi</h4><p>简单路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.Get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    ctx.HTML(<span class=\"string\">\"&lt;h1&gt; Hello from /contact &lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分层路由：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users := app.Party(<span class=\"string\">\"/users\"</span>, myAuthMiddlewareHandler)</span><br><span class=\"line\"><span class=\"comment\">// http://localhost:8080/users/42/profile</span></span><br><span class=\"line\">users.Get(<span class=\"string\">\"/&#123;id:int&#125;/profile\"</span>, userProfileHandler)</span><br><span class=\"line\"><span class=\"comment\">// http://localhost:8080/users/inbox/1</span></span><br><span class=\"line\">users.Get(<span class=\"string\">\"/inbox/&#123;id:int&#125;\"</span>, userMessageHandler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用嵌套风格</span></span><br><span class=\"line\">app.PartyFunc(<span class=\"string\">\"/users\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(users iris.Party)</span></span> &#123;</span><br><span class=\"line\">    users.Use(myAuthMiddlewareHandler)</span><br><span class=\"line\">    <span class=\"comment\">// http://localhost:8080/users/42/profile</span></span><br><span class=\"line\">    users.Get(<span class=\"string\">\"/&#123;id:int&#125;/profile\"</span>, userProfileHandler)</span><br><span class=\"line\">    <span class=\"comment\">// http://localhost:8080/users/messages/1</span></span><br><span class=\"line\">    users.Get(<span class=\"string\">\"/inbox/&#123;id:int&#125;\"</span>, userMessageHandler)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-上下文对象\"><a href=\"#2-3-上下文对象\" class=\"headerlink\" title=\"2.3 上下文对象\"></a>2.3 上下文对象</h2><p>在进行路由匹配之后，可以获取到上下文对象，三套框架都对 Context 进行了封装。</p>\n<p>Gin 与 Iris 对 context 的封装均是为其增加了必要的新功能，同时可以返回原生的 <code>http.Request</code> 对象。但 Beego 的 context 模块是对原生的 <code>http.ResponseWriter</code> 和 <code>http.Request</code> 对象进行了彻底的封装，将其分为两个部分，分别为 Input 对象与 Output 对象，对应的将常用方法进行封装，并不能调出原生的对象。</p>\n<h2 id=\"2-4-数据操作\"><a href=\"#2-4-数据操作\" class=\"headerlink\" title=\"2.4 数据操作\"></a>2.4 数据操作</h2><h4 id=\"原生\"><a href=\"#原生\" class=\"headerlink\" title=\"原生\"></a>原生</h4><p>在原生开发中，Go 支持解析 JSON 格式的数据处理能力：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析 JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Unmarshal</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成 JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Marshal</span><span class=\"params\">(v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用 <code>simplejson</code> 可以简化 JSON 数据的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js, err := NewJson([]<span class=\"keyword\">byte</span>(<span class=\"string\">`&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"test\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"array\": [1, \"2\", 3],</span></span><br><span class=\"line\"><span class=\"string\">        \"int\": 10,</span></span><br><span class=\"line\"><span class=\"string\">        \"float\": 5.150,</span></span><br><span class=\"line\"><span class=\"string\">        \"bignum\": 9223372036854775807,</span></span><br><span class=\"line\"><span class=\"string\">        \"string\": \"simplejson\",</span></span><br><span class=\"line\"><span class=\"string\">        \"bool\": true</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">arr, _ := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"array\"</span>).Array()</span><br><span class=\"line\">i, _ := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"int\"</span>).Int()</span><br><span class=\"line\">ms := js.Get(<span class=\"string\">\"test\"</span>).Get(<span class=\"string\">\"string\"</span>).MustString()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gin-2\"><a href=\"#Gin-2\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 可以使用 <code>c.ShouldBind</code>方法，可以将参数自动绑定到 <code>struct</code>.该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 <code>content-type</code>类型，优先匹配<code>JSON</code>或者 <code>XML</code>,之后才是 <code>Form</code>。</p>\n<p>接收数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    route := gin.Default()</span><br><span class=\"line\">    route.POST(<span class=\"string\">\"/testing\"</span>, (c *gin.Context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person Person <span class=\"comment\">// 定义结构体步骤省略</span></span><br><span class=\"line\">        <span class=\"comment\">// 绑定到 person</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> c.ShouldBind(&amp;person) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            log.Println(person.Name)</span><br><span class=\"line\">            log.Println(person.Address)</span><br><span class=\"line\">            log.Println(person.Birthday)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.String(<span class=\"number\">200</span>, <span class=\"string\">\"Success\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    route.Run(<span class=\"string\">\":8085\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送数据：</p>\n<p>Gin 输出这 JSON、 XML、 YAML 三种格式非常方便，直接使用对用方法并赋值一个结构体给它就行了。</p>\n<p>同时还可以使用<code>gin.H</code>。<code>gin.H</code> 是一个很巧妙的设计，你可以像<code>javascript</code>定义<code>json</code>一样，直接一层层写键值对，只需要在每一层加上 <code>gin.H</code>即可：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    r := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gin.H 本质是 map[string]interface&#123;&#125;</span></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 application/json; charset=UTF-8 的 json 字符串</span></span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/moreJSON\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接使用结构体定义</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> msg <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">            Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"user\"`</span></span><br><span class=\"line\">            Message <span class=\"keyword\">string</span></span><br><span class=\"line\">            Number  <span class=\"keyword\">int</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.Name = <span class=\"string\">\"Lena\"</span></span><br><span class=\"line\">        msg.Message = <span class=\"string\">\"hey\"</span></span><br><span class=\"line\">        msg.Number = <span class=\"number\">123</span></span><br><span class=\"line\">        <span class=\"comment\">// 会输出  &#123;\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123&#125;</span></span><br><span class=\"line\">        c.JSON(http.StatusOK, msg)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someXML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 text/xml; charset=UTF-8 的 xml 字符串</span></span><br><span class=\"line\">        c.XML(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.GET(<span class=\"string\">\"/someYAML\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 会输出头格式为 text/yaml; charset=UTF-8 的 yaml 字符串</span></span><br><span class=\"line\">        c.YAML(http.StatusOK, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"hey\"</span>, <span class=\"string\">\"status\"</span>: http.StatusOK&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    r.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.yoytang.com/go-gin-doc.html\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<p>Gin 支持返回的数据格式有：HTML, String，JSON， XML， YAML</p>\n<h4 id=\"BeeGo-2\"><a href=\"#BeeGo-2\" class=\"headerlink\" title=\"BeeGo\"></a>BeeGo</h4><p>Beego 对与JSON 数据处理则比较复杂，如果接受数据则需要从 <code>context.RequestBody</code> 中取出数据，之后需要使用断言解析数据，实际上，这里的处理方式与原生的是一样的，并未进行功能优化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">_ = json.Unmarshal(ctx.Input.RequestBody, &amp;body) <span class=\"comment\">// 将 json 数据解析到 body 变量中</span></span><br><span class=\"line\">username := body[<span class=\"string\">\"name\"</span>].(<span class=\"keyword\">string</span>) <span class=\"comment\">// 使用断言取出单个数据</span></span><br></pre></td></tr></table></figure>\n\n<p>对于返回一个 json 数据，BeeGo 只是将我们创建的 json 结构对象存放于 <code>context.Data</code> 下的 <code>“json”</code> 字段中，然后调用 <code>context.ServeJSON()</code> 方法时，会去获取 <code>c.Data[&quot;json&quot;]</code> 下存放的结构然后将结果转换成 json 的数据格式并发送：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">    Age  <span class=\"keyword\">int</span>    <span class=\"string\">`json:\"age\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *TestController)</span> <span class=\"title\">TestData</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuser := User&#123;</span><br><span class=\"line\">\t\tName: <span class=\"string\">\"huahua\"</span>,</span><br><span class=\"line\">\t\tAge:  <span class=\"number\">18</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.Data[<span class=\"string\">\"json\"</span>] = user</span><br><span class=\"line\">\tc.ServeJSON()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>起始在处理 json 这一步，Beego 只是做了非常简单的替换工作，<code>context.ServeJSON()</code> 的方法调用后，取到我们设置的结构体后调用了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(output *BeegoOutput)</span> <span class=\"title\">JSON</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;, hasIndent <span class=\"keyword\">bool</span>, encoding <span class=\"keyword\">bool</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将结构体通过 <code>json.Marshal()</code> 转成了 json 格式，同时又为响应报文添加了相应响应数据格式信息，之后将数据送出。</p>\n<p>此外，BeeGo 支持返回的数据类型由有：JSON、XML、JSONP</p>\n<h4 id=\"Iris-1\"><a href=\"#Iris-1\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Irisi 对处理 JSON 数据的方法进行了封装，同时也拥有验证数据的能力。</p>\n<p>发送数据与前两者无差别，都是先定义结构体，然后底层使用 JSON 库的能力对 JSON 数据进行解析并赋值于创建的对象。</p>\n<p>接收数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyHandler</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c Company <span class=\"comment\">// 定义结构体省略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := ctx.ReadJSON(&amp;c); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        ctx.StatusCode(iris.StatusBadRequest)</span><br><span class=\"line\">        ctx.WriteString(err.Error())</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.Writef(<span class=\"string\">\"Received: %#+v\\n\"</span>, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对于返回数据的处理上，与 Gin 相似，采用了在 <code>iris.Context.JSON()</code> 方法可以将对象转化为 JSON 数据输出。</p>\n<p>返回数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.Get(<span class=\"string\">\"/encode\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx iris.Context)</span></span> &#123;</span><br><span class=\"line\">    peter := User&#123;</span><br><span class=\"line\">        Firstname: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">        Lastname:  <span class=\"string\">\"Doe\"</span>,</span><br><span class=\"line\">        City:      <span class=\"string\">\"Neither FBI knows!!!\"</span>,</span><br><span class=\"line\">        Age:       <span class=\"number\">25</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//手动设置内容类型: ctx.ContentType(\"application/javascript\")</span></span><br><span class=\"line\">    ctx.JSON(peter)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://studyiris.com/example/responseWriter/writeRest.html\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<p>此外，Iris 支持返回的数据格式有：binary, text, json, jsonp, xml, markdown</p>\n<h2 id=\"2-5-模板引擎\"><a href=\"#2-5-模板引擎\" class=\"headerlink\" title=\"2.5 模板引擎\"></a>2.5 模板引擎</h2><h4 id=\"原生-1\"><a href=\"#原生-1\" class=\"headerlink\" title=\"原生\"></a>原生</h4><p>Go web 能力中包含了模板引擎的支持，可以使用 <code>template</code> 包来进行模板处理，使用类似 <code>Parse</code>、<code>ParseFile</code>、<code>Execute</code> 等方法从文件或者字符串加载模板，然后执行类似下图展示的模板的 merge 操作：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvUEtnYnNWYW0xUXkzd0ZwLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    t := template.New(<span class=\"string\">\"some template\"</span>) <span class=\"comment\">// 创建一个模板</span></span><br><span class=\"line\">    t, _ = t.ParseFiles(<span class=\"string\">\"tmpl/welcome.html\"</span>)  <span class=\"comment\">// 解析模板文件</span></span><br><span class=\"line\">    user := GetUser() <span class=\"comment\">// 获取当前用户信息</span></span><br><span class=\"line\">    t.Execute(w, user)  <span class=\"comment\">// 执行模板的 merger 操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原生的模板引擎支持以下的能力：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 字段操作：`&#123;&#123;.&#125;&#125;`</span><br><span class=\"line\">- 数据遍历： `&#123;&#123;with …&#125;&#125;…&#123;&#123;end&#125;&#125;`  `&#123;&#123;range …&#125;&#125;&#123;&#123;end&#125;&#125;`</span><br><span class=\"line\">- 条件处理：`if ... else ...`</span><br><span class=\"line\">- 管道符 （基于模板函数）</span><br><span class=\"line\">- 模板函数</span><br><span class=\"line\">- 模板变量</span><br><span class=\"line\">- Must 操作：作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。</span><br><span class=\"line\"></span><br><span class=\"line\">- 嵌套模板</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://learnku.com/docs/build-web-application-with-golang/074-template-processing/3198\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Gin-3\"><a href=\"#Gin-3\" class=\"headerlink\" title=\"Gin\"></a>Gin</h4><p>Gin 可以通过配置 <code>LoadHTMLGlob()</code> 或者 <code>LoadHTMLFiles()</code> 启用模板渲染，这两个方法挂载与 <code>gin.Defalut()</code> 生成的 router 对象上，用于设置，模板目录 。匹配完成后可以调用 <code>Context.HTML</code> 进行渲染和数据注入。</p>\n<p>同时，与原生不同的是，Gin 可以使用 <code>gin.H()</code> 来向模板注入 json 格式的数据，而不需要创建额外的结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\trouter.LoadHTMLGlob(<span class=\"string\">\"templates/*\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")</span></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/index\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.HTML(http.StatusOK, <span class=\"string\">\"index.tmpl\"</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"title\"</span>: <span class=\"string\">\"Main website\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Gin 的模板引擎支持以下能力：</p>\n<ul>\n<li>使用自定义的 html 模板渲染</li>\n<li>自定义分隔符（模板标签）</li>\n<li>继承原生能力</li>\n</ul>\n<p>相比原生，Gin 定义模板的方式是采用创建全局模板对象（LoadHTMLGlob），然后在上下文对象中使用 <code>c.HTML</code> 去直接调用模板路径下的文件渲染模板。而原生则是在路由的上下文对象中创建 Template 对象，然后在上下文对象中渲染 Template 对象完成渲染工作。</p>\n<p><a href=\"https://gin-gonic.com/zh-cn/docs/examples/html-rendering/\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Beego\"><a href=\"#Beego\" class=\"headerlink\" title=\"Beego\"></a>Beego</h4><p>beego 的模板处理引擎采用的是 Go 内置的 <code>html/template</code> 包进行处理，而且 beego 的模板处理逻辑是采用了缓存编译方式，也就是所有的模板会在 beego 应用启动的时候全部编译然后缓存在 map 里面，Beego 的模板引擎支持以下能力：</p>\n<ul>\n<li>自定义模板目录</li>\n<li>自动渲染</li>\n<li>自定义模板标签</li>\n<li>模板数据：模板中的数据是通过在 Controller 中 <code>this.Data</code> 获取的</li>\n<li>自定义模板名称</li>\n<li>layout 设计、LayoutSection：实际上是模板的组合、嵌套</li>\n<li>renderform</li>\n</ul>\n<p><a href=\"https://beego.me/docs/mvc/view/view.md\" target=\"_blank\" rel=\"noopener\">引用来源</a></p>\n<h4 id=\"Iris-2\"><a href=\"#Iris-2\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris 自身并没有创建一种直接可用的模板引擎，而是交给用户可以选择任意一种模板引擎，且完全兼容 html/template。</p>\n<p>官方推荐使用 Hero 引擎，可以预编译<code>html</code>模板以获取代码，其拥有以下特性：</p>\n<ul>\n<li>高性能.</li>\n<li>非常易用.</li>\n<li>功能强大，支持模板继承和模板include.</li>\n<li>自动编译.</li>\n</ul>\n<p><a href=\"https://github.com/shiyanhui/hero/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">Hero 文档</a></p>\n<p>同时可以选用 quicktemplate 引擎，其拥有以下特性：</p>\n<ol>\n<li>非常快。 模板转换为Go代码然后编译</li>\n<li><code>Quicktemplate</code>语法非常接近<code>Go</code> - 在开始使用<code>quicktemplate</code>之前无需学习另一种模板语言</li>\n<li>在模板编译期间几乎所有错误都被捕获，因此生产受模板相关错误的影响较小</li>\n<li>使用方便。有关详细信息，请参阅快速入门和示例</li>\n<li>强大。任意<code>Go</code>代码可以嵌入到模板中并与模板混合。小心这个功能 - 不要从模板中查询数据库<code>and/or</code>外部资源，除非你错过<code>Go</code>中的<code>PHP</code>方 式<code>:)</code>这种功能主要用于任意数据转换</li>\n<li>易于使用的模板继承由<code>Go</code>接口提供支持。 请参阅此示例以获取详细信</li>\n<li>模板被编译为单个二进制文件，因此无需将模板文件复制到服务器</li>\n</ol>\n<p><a href=\"https://github.com/valyala/fasttemplate\" target=\"_blank\" rel=\"noopener\">quicktemplate 文档</a></p>\n<h2 id=\"2-6-MVC-架构\"><a href=\"#2-6-MVC-架构\" class=\"headerlink\" title=\"2.6 MVC 架构\"></a>2.6 MVC 架构</h2><h4 id=\"GIn\"><a href=\"#GIn\" class=\"headerlink\" title=\"GIn\"></a>GIn</h4><p>Gin 不支持 MVC 架构模式，需要开发者自行实现，具有一定的灵活性。</p>\n<p><a href=\"https://github.com/mydevc/go-gin-mvc\" target=\"_blank\" rel=\"noopener\">Gin MVC 的实现参考</a></p>\n<h4 id=\"Beego-1\"><a href=\"#Beego-1\" class=\"headerlink\" title=\"Beego\"></a>Beego</h4><p>Beego 是标准的 MVC 框架，对 MVC 有着良好的支持，同时提供了 Model 层的 ORM 引擎。</p>\n<h4 id=\"Iris-3\"><a href=\"#Iris-3\" class=\"headerlink\" title=\"Iris\"></a>Iris</h4><p>Iris对MVC(模型视图控制器)模式有一流的支持，Iris web框架支持请求数据、模型、持久数据和以最快的速度执行的绑定。其模式流程图如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvdWkyVVJXUHdqU0tNZ0RKLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p><a href=\"https://studyiris.com/doc/irisDoc/MoviesMVCApplication.html\" target=\"_blank\" rel=\"noopener\">Iris MVC 的实现参考</a></p>\n"},{"title":"Vue使用中的各种小技巧（转载）","date":"2019-10-28T14:24:45.000Z","_content":"### Watch immediate\n\n这个已经算是一个比较常见的技巧了，这里就简单说一下。当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在`created`的时候手动调用一次。\n\n```\n// bad\ncreated() {\n  this.fetchUserList();\n},\nwatch: {\n  searchText: 'fetchUserList',\n}\n复制代码\n```\n\n你可以添加`immediate`属性，这样初始化的时候也会触发，然后上面的代码就能简化为：\n\n```\n// good\nwatch: {\n  searchText: {\n    handler: 'fetchUserList',\n    immediate: true,\n  }\n}\n复制代码\n```\n\nps: watch 还有一个容易被大家忽略的属性`deep`。当设置为`true`时，它会进行深度监听。简而言之就是你有一个 `const obj={a:1,b:2}`，里面任意一个 key 的 value 发生变化的时候都会触发`watch`。应用场景：比如我有一个列表，它有一堆`query`筛选项，这时候你就能`deep watch`它，只有任何一个筛序项改变的时候，就自动请求新的数据。或者你可以`deep watch`一个 form 表单，当任何一个字段内容发生变化的时候，你就帮它做自动保存等等。\n\n### Attrs 和 Listeners\n\n这两个属性是 `vue 2.4` 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于`el-select`分装一个带有业务特性的组件，根据输入的 name 搜索用户，并将一些业务逻辑分装在其中。但`el-select`这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 props 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？\n\n其实我们的这个组件只是基于`el-select`做了一些业务的封装，比如添加了默认的`placeholder`，封装了远程 ajax 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。\n\n这时候我们就可以使用`v-bind=\"$attrs\"`：传递所有属性、`v-on=\"$listeners\"`传递所有方法。如下图所示：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS80LzI0LzE2YTRlODJiMjhmMmIyNGM?x-oss-process=image/format,png)\n\n这样，我们没有在`$props`中声明的方法和属性，会通过`$attrs`、`$listeners`直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！\n\n### .sync\n\n这个也是 `vue 2.3` 之后新加的一个语法糖。这也是平时在分装组件的时候很好用的一个语法糖，它的实现机制和`v-model`是一样的。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzEwLzE2YWEwNmJhZDM3OWVmZmY?x-oss-process=image/format,png)\n\n当你有需要在子组件修改父组件值的时候这个方法很好用。 线上 [例子](https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/Pagination/index.vue)\n\n### Computed 的 get 和 set\n\n`computed` 大家肯定都用过，它除了可以缓存计算属性外，它在处理传入数据和目标数据格式不一致的时候也是很有用的。set、get [文档](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter)\n\n上面说的可能还是是有点抽象，举一个简单的的例子：我们有一个 form 表单，from 里面有一个记录创建时间的字段`create_at`。我们知道前端的时间戳都是 13 位的，但很多后端默认时间戳是 10 位的，这就很蛋疼了。前端和后端的时间戳位数不一致。最常见的做法如下：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTEzODc3NjJjMjZkMg?x-oss-process=image/format,png)\n\n上面的代码主要做的是：在拿到数据的时候将后端 10 位时间戳转化为 13 位时间戳，之后再向服务端发送数据的时候再转化回 10 位时间戳传给后端。目前这种做法当然是可行的，但之后可能不仅只有创建接口，还有更新接口的时候，你还需要在`update`的接口里在做一遍同样数据转化的操作么？而且这只是一个最简单的例子，真实的 form 表单会复杂的多，需要处理的数据也更为的多。这时候代码就会变得很难维护。\n\n这时候就可以使用 computed 的 set 和 get 方法了。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzkvMTZhOWI2MjllOTgyNzExNQ?x-oss-process=image/format,png)\n\n通过上面的代码可以看到，我们把需要做前后端兼容的数据，放在了 computed 中，从 `getData`和`submit`中隔离了数据处理的部分。\n\n当然上面说的方案还不是最好的方案，你其实应该利用之前所说的`v-bind=\"$attrs\"`和`v-on=\"$listeners\"`对时间选择器组件进行二次封装。例如这样`<date-time v-model=\"postForm.create_at\" />` 外部无需做任何数据处理，直接传入一个 10 位的时间戳，内部进行转化。当日期发生变化的时候，自动通过`emit`触发`input`使`v-model`发生变化，把所有脏活累活都放在组件内部完成，保持外部业务代码的相对干净。具体 v\\-model 语法糖原理可以见官方 [文档](https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model)。\n\nset 和 get 处理可以做上面说的进行一些数据处理之外，你也可以把它当做一个 `watch`的升级版。它可以监听数据的变化，当发生变化时，做一些额外的操作。最经典的用法就是`v-model`上绑定一个 vuex 值的时候，input 发生变化时，通过 `commit`更新存在 vuex 里面的值。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTE2ZjA4ZDk1MWY0NQ?x-oss-process=image/format,png)\n\n具体的解释你也可以见官方 [文档](https://vuex.vuejs.org/zh/guide/forms.html)\n\n### Object.freeze\n\n这算是一个性能优化的小技巧吧。在我们遇到一些 `big data`的业务场景，它就很有用了。尤其是做管理后台的时候，经常会有一些超大数据量的 table，或者一个含有 n 多数据的图表，这种数据量很大的东西使用起来最明显的感受就是卡。但其实很多时候其实这些数据其实并不需要响应式变化，这时候你就可以使用 [Object.freeze](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) 方法了，它可以冻结一个对象(注意它不并是 vue 特有的 api)。\n\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 `Object.defineProperty` 把这些属性全部转为 `getter/setter`，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。 使用了 `Object.freeze` 之后，不仅可以减少 `observer` 的开销，还能减少不少内存开销。相关 [issue](https://github.com/vuejs/vue/issues/4384)。\n\n使用方式：`this.item = Object.freeze(Object.assign({}, this.item))`\n\n这里我提供了一个在线测速 demo，[点我](https://panjiachen.gitee.io/panjiachen.github.io/big-table/index.html)。\n\n通过测速可以发现正常情况下`1000 x 10` rerender 都稳定在 1000ms\\-2000ms 之间，而开启了`Object.freeze`的情况下，rerender 都稳住在 100ms\\-200ms 之间。有接近 10 倍的差距。所以能确定不需要变化检测的情况下，`big data` 还是要优化一下的。\n\n### Functional\n\n[函数式组件](https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6) 这个是文档里就写的内容，但在其实很少人会刻意的去使用。因为你不用它，代码也不会有任何问题，用了到可能会出现 bug。\n\n我们先看一个例子：[点我测试性能](https://vue-9-perf-secrets.netlify.com/bench/functional) 肉眼可见的性能差距。当然很多人会觉得我的项目中也没有这种变化量级，但我觉得这是一个程序员的自我修养问题吧。，比如能用`v-show`的地方就不要用`v-if`，善用`keep-alive`和`v-once`，`Object.freeze()`处理 [vue big data](https://github.com/vuejs/vue/issues/4384) 问题等。虽然都是一些小细节，但对性能和体验都是有不少的提升的。更多的性能优化技巧请查看该文章 [vue\\-9\\-perf\\-secrets](https://slides.com/akryum/vueconfus-2019#/)\n\n### 减少全局操作\n\n这其实并不只是针对 vue 项目的一个建议，我们平时写代码的时候一定要尽量避免一些全局的操作。如果必须要用到的时候，一定要自己检查，会不会产生一些全局的污染或者副作用。\n\n举几个简单例子：\n\n1.  我们现在虽然用 vue 写代码了，核心思想转变为用数据驱动 `view`，不用像`jQuery`时代那样，频繁的操作 DOM 节点。但还是免不了有些场景还是要操作 DOM 的。我们在组件内选择节点的时候一定要切记避免使用 `document.querySelector()`等一系列的全局选择器。你应该使用`this.$el`或者`this.refs.xxx.$el`的方式来选择 DOM。这样就能将你的操作局限在当前的组件内，能避免很多问题。\n\n2.  我们经常会不可避免的需要注册一些全局性的事件，比如监听页面窗口的变化`window.addEventListener('resize', this.__resizeHandler)`，但再声明了之后一定要在 `beforeDestroy`或者`destroyed`生命周期注销它。`window.removeEventListener('resize', this.__resizeHandler)`避免造成不必要的消耗。\n\n3.  避免过多的全局状态，不是所有的状态都需要存在 vuex 中的，应该根据业务进行合理的进行取舍。如果不可避免有很多的值需要存在 vuex 中，建议使用动态注册的方式。相关[文档](https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C)。只是部分业务需要的状态处理，建议使用 `Event Bus`或者使用 [简单的 store 模式](https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8)。\n\n4.  css 也应该尽量避免写太多的全局性的样式。除了一些全局公用的样式外，所以针对业务的或者组件的样式都应该使用命名空间的方式或者直接使用 vue\\-loader 提供的 `scoped`写法，避免一些全局冲突。[文档](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/style.html#css-modules)\n\n### Sass 和 Js 之间变量共享\n\n这个需求可能有些人没有遇到过，举个实际例子来说明一下。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlOTlmNmJjMjM0M2M?x-oss-process=image/format,png)\n\n如上面要实现一个动态的换肤，就需要将用户选择的 theme 主题色传递给 css。但同时初始化的时候 css 又需要将一个默认主题色传递给 js。所以下面我们就分两块来讲解。\n\n*   js 将变量传递给 sass 这部分是相对简单就可以实现的，实现方案也很多。最简单的方法就是通过 在模板里面写 style 标签来实现，就是俗话所说的内联标签。\n\n    ```\n    <div :style=\"{'background-color':color}\" ></div>\n    复制代码\n    ```\n\n    或者使用 `css var()`，在线 [demo](https://codepen.io/richardtallent/pen/yvpERW/)，还有用 less 的话`modifyVars`，等等方案都能实现 js 与 css 的变量传递。\n\n*   sass 将变量给 js\n\n还是那前面那个换肤来举例子，我们页面初始化的时候，总需要一个默认主题色吧，假设我们在 `var.scss`中声明了一个 `theme:blue`，我们在 js 中该怎么获取这个变量呢？我们可以通过 [css\\-modules](https://github.com/css-modules/icss#export) `:export`来实现。更具体的解释\\- [How to Share Variables Between Javascript and Sass](https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass)\n\n```\n// var.scss\n$theme: blue;\n\n:export {\n  theme: $theme;\n}\n复制代码\n```\n\n```\n// test.js\nimport variables from '@/styles/var.scss'\nconsole.log(variables.theme) // blue\n复制代码\n```\n\n当 js 和 css 共享一个变量的时候这个方案还是很实用的。vue\\-element\\-admin 中的侧边栏的宽度，颜色等等变量都是通过这种方案来实现共享的。\n\n其它换肤方案可以参考 [聊一聊前端换肤](https://juejin.im/post/5ca41617f265da3092006155)。\n\n### 自动注册全局组件\n\n我的业务场景大部分是中后台，虽然封装和使用了很多第三方组件，但还是免不了需要自己封装和使用很多业务组件。但每次用的时候还需要手动引入，真的是有些麻烦的。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDBkNWFjMDU2OTk?x-oss-process=image/format,png)\n\n我们其实可以基于 webpack 的`require.context`来实现自动加载组件并注册的全局的功能。相关原理在之前的文章中已经阐述过了。具体代码如下\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDU3NWRjMjQzZDk?x-oss-process=image/format,png)\n\n我们可以创建一个`GlobalComponents`文件夹，将你想要注册到全局的组件都放在这个文件夹里，在`index.js`里面放上如上代码。之后只要在入口文件`main.js`中引入即可。\n\n```\n//main.js\nimport './components/Table/index' // 自动注册全局业务组件\n复制代码\n```\n\n这样我们可以在模板中直接使用这些全局组建了。不需要再繁琐的手动引入了。\n\n```\n<template>\n  <div>\n    <user-select/>\n    <status-button/>\n  </div>\n</template>\n复制代码\n```\n\n当然你也不要为了省事，啥组件都往全局注册，这样会让你初始化页面的时候你的初始`init bundle`很大。你应该就注册那些你经常使用且体积不大的组件。那些体积大的组件，如编辑器或者图表组件还是按需加载比较合理。而且你最好声明这些全局组件的时候有一个统一的命名规范比如：`globel-user-select`这样的，指定一个团队规范，不然人家看到你这个全局组件会一脸懵逼，这个组件是哪来的。\n\n### Lint\n\n这又是一个老生常谈的问题了 vue 的一些最佳实践什么的话，这里不讨论了，我觉得看官方的 [风格指南](https://cn.vuejs.org/v2/style-guide/) 差不多就够了。比如避免`避免 v-if 和 v-for 用在一起`、`元素特性的顺序`这些等等规则，几十条规则，说真的写了这么久 vue，我也只能记住一些常规的。什么属性的顺序啊，不太可能记住的。这种东西还是交给程序来自动优化才是更合理的选择。强烈推荐配置编辑器自动化处理。具体配置见 [文档](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/eslint.html)。同时建议结合 `Git Hooks` 配合在每次提交代码时对代码进行 lint 校验，确保所有提交到远程仓库的代码都符合团队的规范。它主要使用到的工具是`husky`和`lint-staged`，详细文档见 [Git Hooks](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#git-hooks)\n\n### Hook\n\n这个是一个文档里没有写的 api，但我觉得是一个很有用的 api。比如我们平时使用一些第三方组件，或者注册一些全局事件的时候，都需要在`mounted`中声明，在`destroyed`中销毁。但由于这个是写在两个生命周期内的，很容易忘记，而且大部分在创建阶段声明的内容都会有副作用，如果你在组件摧毁阶段忘记移除的话，会造成内存的泄漏，而且都不太容易发现。如下代码：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDA4YTUzYmQ?x-oss-process=image/format,png)\n\nreact 在新版本中也加入了`useEffect`，将以前的多个 life\\-cycles 合并、重组，使逻辑更加清晰，这里就不展开了。那 vue 是不是也可以这样做？我去了看了一下官方的 `vue-hooks`的 [源码](https://github.com/yyx990803/vue-hooks/blob/master/index.js) 发现了一个新的 api：`$on('hook:xxx')`。有了它，我们就能将之前的代码用更简单和清楚地方式实现了。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDFmY2MyMzI?x-oss-process=image/format,png)\n\n和 react 的`useEffect`有异曲同工之妙。\n\n而且我们有了这个 api 之后，能干的事情还不止这个。有时候我们会用一些第三方组件，比如我们有一个编辑器组件（加载比较慢，会有白屏），所以我们在它渲染完成之前需要给它一个占位符，但可能这个组件并没有暴露给我们这个接口，当然我们需要修改这个组件，在它创建的时候手动 emit 一个事件出去，然后在组件上监听它，比如：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDVlYWJkOGE?x-oss-process=image/format,png)\n\n当然这也是可行的，但万一还要监听一个更新或者摧毁的生命周期呢？其实利用 `hook`可以很方便的实现这个效果。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMzBlZTUzMGE0NWI?x-oss-process=image/format,png)\n\n当然在 vue 3.0 版本中可能会有新的写法，就不如下面的讨论: [Dynamic Lifecycle Injection](https://github.com/vuejs/rfcs/pull/23)。有兴趣的可以自行去研究，这里就不展开了。当 3.0 正式发布之后再来讨论吧。","source":"_posts/2019/Vue使用中的各种小技巧.md","raw":"---\ntitle: Vue使用中的各种小技巧（转载）\ntags: [Vue]\ncategories:\n  - Front\n  - Vue\ndate: 2019-10-28 22:24:45\n---\n### Watch immediate\n\n这个已经算是一个比较常见的技巧了，这里就简单说一下。当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在`created`的时候手动调用一次。\n\n```\n// bad\ncreated() {\n  this.fetchUserList();\n},\nwatch: {\n  searchText: 'fetchUserList',\n}\n复制代码\n```\n\n你可以添加`immediate`属性，这样初始化的时候也会触发，然后上面的代码就能简化为：\n\n```\n// good\nwatch: {\n  searchText: {\n    handler: 'fetchUserList',\n    immediate: true,\n  }\n}\n复制代码\n```\n\nps: watch 还有一个容易被大家忽略的属性`deep`。当设置为`true`时，它会进行深度监听。简而言之就是你有一个 `const obj={a:1,b:2}`，里面任意一个 key 的 value 发生变化的时候都会触发`watch`。应用场景：比如我有一个列表，它有一堆`query`筛选项，这时候你就能`deep watch`它，只有任何一个筛序项改变的时候，就自动请求新的数据。或者你可以`deep watch`一个 form 表单，当任何一个字段内容发生变化的时候，你就帮它做自动保存等等。\n\n### Attrs 和 Listeners\n\n这两个属性是 `vue 2.4` 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于`el-select`分装一个带有业务特性的组件，根据输入的 name 搜索用户，并将一些业务逻辑分装在其中。但`el-select`这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 props 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？\n\n其实我们的这个组件只是基于`el-select`做了一些业务的封装，比如添加了默认的`placeholder`，封装了远程 ajax 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。\n\n这时候我们就可以使用`v-bind=\"$attrs\"`：传递所有属性、`v-on=\"$listeners\"`传递所有方法。如下图所示：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS80LzI0LzE2YTRlODJiMjhmMmIyNGM?x-oss-process=image/format,png)\n\n这样，我们没有在`$props`中声明的方法和属性，会通过`$attrs`、`$listeners`直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！\n\n### .sync\n\n这个也是 `vue 2.3` 之后新加的一个语法糖。这也是平时在分装组件的时候很好用的一个语法糖，它的实现机制和`v-model`是一样的。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzEwLzE2YWEwNmJhZDM3OWVmZmY?x-oss-process=image/format,png)\n\n当你有需要在子组件修改父组件值的时候这个方法很好用。 线上 [例子](https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/Pagination/index.vue)\n\n### Computed 的 get 和 set\n\n`computed` 大家肯定都用过，它除了可以缓存计算属性外，它在处理传入数据和目标数据格式不一致的时候也是很有用的。set、get [文档](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter)\n\n上面说的可能还是是有点抽象，举一个简单的的例子：我们有一个 form 表单，from 里面有一个记录创建时间的字段`create_at`。我们知道前端的时间戳都是 13 位的，但很多后端默认时间戳是 10 位的，这就很蛋疼了。前端和后端的时间戳位数不一致。最常见的做法如下：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTEzODc3NjJjMjZkMg?x-oss-process=image/format,png)\n\n上面的代码主要做的是：在拿到数据的时候将后端 10 位时间戳转化为 13 位时间戳，之后再向服务端发送数据的时候再转化回 10 位时间戳传给后端。目前这种做法当然是可行的，但之后可能不仅只有创建接口，还有更新接口的时候，你还需要在`update`的接口里在做一遍同样数据转化的操作么？而且这只是一个最简单的例子，真实的 form 表单会复杂的多，需要处理的数据也更为的多。这时候代码就会变得很难维护。\n\n这时候就可以使用 computed 的 set 和 get 方法了。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzkvMTZhOWI2MjllOTgyNzExNQ?x-oss-process=image/format,png)\n\n通过上面的代码可以看到，我们把需要做前后端兼容的数据，放在了 computed 中，从 `getData`和`submit`中隔离了数据处理的部分。\n\n当然上面说的方案还不是最好的方案，你其实应该利用之前所说的`v-bind=\"$attrs\"`和`v-on=\"$listeners\"`对时间选择器组件进行二次封装。例如这样`<date-time v-model=\"postForm.create_at\" />` 外部无需做任何数据处理，直接传入一个 10 位的时间戳，内部进行转化。当日期发生变化的时候，自动通过`emit`触发`input`使`v-model`发生变化，把所有脏活累活都放在组件内部完成，保持外部业务代码的相对干净。具体 v\\-model 语法糖原理可以见官方 [文档](https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model)。\n\nset 和 get 处理可以做上面说的进行一些数据处理之外，你也可以把它当做一个 `watch`的升级版。它可以监听数据的变化，当发生变化时，做一些额外的操作。最经典的用法就是`v-model`上绑定一个 vuex 值的时候，input 发生变化时，通过 `commit`更新存在 vuex 里面的值。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTE2ZjA4ZDk1MWY0NQ?x-oss-process=image/format,png)\n\n具体的解释你也可以见官方 [文档](https://vuex.vuejs.org/zh/guide/forms.html)\n\n### Object.freeze\n\n这算是一个性能优化的小技巧吧。在我们遇到一些 `big data`的业务场景，它就很有用了。尤其是做管理后台的时候，经常会有一些超大数据量的 table，或者一个含有 n 多数据的图表，这种数据量很大的东西使用起来最明显的感受就是卡。但其实很多时候其实这些数据其实并不需要响应式变化，这时候你就可以使用 [Object.freeze](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) 方法了，它可以冻结一个对象(注意它不并是 vue 特有的 api)。\n\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 `Object.defineProperty` 把这些属性全部转为 `getter/setter`，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。 使用了 `Object.freeze` 之后，不仅可以减少 `observer` 的开销，还能减少不少内存开销。相关 [issue](https://github.com/vuejs/vue/issues/4384)。\n\n使用方式：`this.item = Object.freeze(Object.assign({}, this.item))`\n\n这里我提供了一个在线测速 demo，[点我](https://panjiachen.gitee.io/panjiachen.github.io/big-table/index.html)。\n\n通过测速可以发现正常情况下`1000 x 10` rerender 都稳定在 1000ms\\-2000ms 之间，而开启了`Object.freeze`的情况下，rerender 都稳住在 100ms\\-200ms 之间。有接近 10 倍的差距。所以能确定不需要变化检测的情况下，`big data` 还是要优化一下的。\n\n### Functional\n\n[函数式组件](https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6) 这个是文档里就写的内容，但在其实很少人会刻意的去使用。因为你不用它，代码也不会有任何问题，用了到可能会出现 bug。\n\n我们先看一个例子：[点我测试性能](https://vue-9-perf-secrets.netlify.com/bench/functional) 肉眼可见的性能差距。当然很多人会觉得我的项目中也没有这种变化量级，但我觉得这是一个程序员的自我修养问题吧。，比如能用`v-show`的地方就不要用`v-if`，善用`keep-alive`和`v-once`，`Object.freeze()`处理 [vue big data](https://github.com/vuejs/vue/issues/4384) 问题等。虽然都是一些小细节，但对性能和体验都是有不少的提升的。更多的性能优化技巧请查看该文章 [vue\\-9\\-perf\\-secrets](https://slides.com/akryum/vueconfus-2019#/)\n\n### 减少全局操作\n\n这其实并不只是针对 vue 项目的一个建议，我们平时写代码的时候一定要尽量避免一些全局的操作。如果必须要用到的时候，一定要自己检查，会不会产生一些全局的污染或者副作用。\n\n举几个简单例子：\n\n1.  我们现在虽然用 vue 写代码了，核心思想转变为用数据驱动 `view`，不用像`jQuery`时代那样，频繁的操作 DOM 节点。但还是免不了有些场景还是要操作 DOM 的。我们在组件内选择节点的时候一定要切记避免使用 `document.querySelector()`等一系列的全局选择器。你应该使用`this.$el`或者`this.refs.xxx.$el`的方式来选择 DOM。这样就能将你的操作局限在当前的组件内，能避免很多问题。\n\n2.  我们经常会不可避免的需要注册一些全局性的事件，比如监听页面窗口的变化`window.addEventListener('resize', this.__resizeHandler)`，但再声明了之后一定要在 `beforeDestroy`或者`destroyed`生命周期注销它。`window.removeEventListener('resize', this.__resizeHandler)`避免造成不必要的消耗。\n\n3.  避免过多的全局状态，不是所有的状态都需要存在 vuex 中的，应该根据业务进行合理的进行取舍。如果不可避免有很多的值需要存在 vuex 中，建议使用动态注册的方式。相关[文档](https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C)。只是部分业务需要的状态处理，建议使用 `Event Bus`或者使用 [简单的 store 模式](https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8)。\n\n4.  css 也应该尽量避免写太多的全局性的样式。除了一些全局公用的样式外，所以针对业务的或者组件的样式都应该使用命名空间的方式或者直接使用 vue\\-loader 提供的 `scoped`写法，避免一些全局冲突。[文档](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/style.html#css-modules)\n\n### Sass 和 Js 之间变量共享\n\n这个需求可能有些人没有遇到过，举个实际例子来说明一下。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlOTlmNmJjMjM0M2M?x-oss-process=image/format,png)\n\n如上面要实现一个动态的换肤，就需要将用户选择的 theme 主题色传递给 css。但同时初始化的时候 css 又需要将一个默认主题色传递给 js。所以下面我们就分两块来讲解。\n\n*   js 将变量传递给 sass 这部分是相对简单就可以实现的，实现方案也很多。最简单的方法就是通过 在模板里面写 style 标签来实现，就是俗话所说的内联标签。\n\n    ```\n    <div :style=\"{'background-color':color}\" ></div>\n    复制代码\n    ```\n\n    或者使用 `css var()`，在线 [demo](https://codepen.io/richardtallent/pen/yvpERW/)，还有用 less 的话`modifyVars`，等等方案都能实现 js 与 css 的变量传递。\n\n*   sass 将变量给 js\n\n还是那前面那个换肤来举例子，我们页面初始化的时候，总需要一个默认主题色吧，假设我们在 `var.scss`中声明了一个 `theme:blue`，我们在 js 中该怎么获取这个变量呢？我们可以通过 [css\\-modules](https://github.com/css-modules/icss#export) `:export`来实现。更具体的解释\\- [How to Share Variables Between Javascript and Sass](https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass)\n\n```\n// var.scss\n$theme: blue;\n\n:export {\n  theme: $theme;\n}\n复制代码\n```\n\n```\n// test.js\nimport variables from '@/styles/var.scss'\nconsole.log(variables.theme) // blue\n复制代码\n```\n\n当 js 和 css 共享一个变量的时候这个方案还是很实用的。vue\\-element\\-admin 中的侧边栏的宽度，颜色等等变量都是通过这种方案来实现共享的。\n\n其它换肤方案可以参考 [聊一聊前端换肤](https://juejin.im/post/5ca41617f265da3092006155)。\n\n### 自动注册全局组件\n\n我的业务场景大部分是中后台，虽然封装和使用了很多第三方组件，但还是免不了需要自己封装和使用很多业务组件。但每次用的时候还需要手动引入，真的是有些麻烦的。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDBkNWFjMDU2OTk?x-oss-process=image/format,png)\n\n我们其实可以基于 webpack 的`require.context`来实现自动加载组件并注册的全局的功能。相关原理在之前的文章中已经阐述过了。具体代码如下\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDU3NWRjMjQzZDk?x-oss-process=image/format,png)\n\n我们可以创建一个`GlobalComponents`文件夹，将你想要注册到全局的组件都放在这个文件夹里，在`index.js`里面放上如上代码。之后只要在入口文件`main.js`中引入即可。\n\n```\n//main.js\nimport './components/Table/index' // 自动注册全局业务组件\n复制代码\n```\n\n这样我们可以在模板中直接使用这些全局组建了。不需要再繁琐的手动引入了。\n\n```\n<template>\n  <div>\n    <user-select/>\n    <status-button/>\n  </div>\n</template>\n复制代码\n```\n\n当然你也不要为了省事，啥组件都往全局注册，这样会让你初始化页面的时候你的初始`init bundle`很大。你应该就注册那些你经常使用且体积不大的组件。那些体积大的组件，如编辑器或者图表组件还是按需加载比较合理。而且你最好声明这些全局组件的时候有一个统一的命名规范比如：`globel-user-select`这样的，指定一个团队规范，不然人家看到你这个全局组件会一脸懵逼，这个组件是哪来的。\n\n### Lint\n\n这又是一个老生常谈的问题了 vue 的一些最佳实践什么的话，这里不讨论了，我觉得看官方的 [风格指南](https://cn.vuejs.org/v2/style-guide/) 差不多就够了。比如避免`避免 v-if 和 v-for 用在一起`、`元素特性的顺序`这些等等规则，几十条规则，说真的写了这么久 vue，我也只能记住一些常规的。什么属性的顺序啊，不太可能记住的。这种东西还是交给程序来自动优化才是更合理的选择。强烈推荐配置编辑器自动化处理。具体配置见 [文档](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/eslint.html)。同时建议结合 `Git Hooks` 配合在每次提交代码时对代码进行 lint 校验，确保所有提交到远程仓库的代码都符合团队的规范。它主要使用到的工具是`husky`和`lint-staged`，详细文档见 [Git Hooks](https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#git-hooks)\n\n### Hook\n\n这个是一个文档里没有写的 api，但我觉得是一个很有用的 api。比如我们平时使用一些第三方组件，或者注册一些全局事件的时候，都需要在`mounted`中声明，在`destroyed`中销毁。但由于这个是写在两个生命周期内的，很容易忘记，而且大部分在创建阶段声明的内容都会有副作用，如果你在组件摧毁阶段忘记移除的话，会造成内存的泄漏，而且都不太容易发现。如下代码：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDA4YTUzYmQ?x-oss-process=image/format,png)\n\nreact 在新版本中也加入了`useEffect`，将以前的多个 life\\-cycles 合并、重组，使逻辑更加清晰，这里就不展开了。那 vue 是不是也可以这样做？我去了看了一下官方的 `vue-hooks`的 [源码](https://github.com/yyx990803/vue-hooks/blob/master/index.js) 发现了一个新的 api：`$on('hook:xxx')`。有了它，我们就能将之前的代码用更简单和清楚地方式实现了。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDFmY2MyMzI?x-oss-process=image/format,png)\n\n和 react 的`useEffect`有异曲同工之妙。\n\n而且我们有了这个 api 之后，能干的事情还不止这个。有时候我们会用一些第三方组件，比如我们有一个编辑器组件（加载比较慢，会有白屏），所以我们在它渲染完成之前需要给它一个占位符，但可能这个组件并没有暴露给我们这个接口，当然我们需要修改这个组件，在它创建的时候手动 emit 一个事件出去，然后在组件上监听它，比如：\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDVlYWJkOGE?x-oss-process=image/format,png)\n\n当然这也是可行的，但万一还要监听一个更新或者摧毁的生命周期呢？其实利用 `hook`可以很方便的实现这个效果。\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMzBlZTUzMGE0NWI?x-oss-process=image/format,png)\n\n当然在 vue 3.0 版本中可能会有新的写法，就不如下面的讨论: [Dynamic Lifecycle Injection](https://github.com/vuejs/rfcs/pull/23)。有兴趣的可以自行去研究，这里就不展开了。当 3.0 正式发布之后再来讨论吧。","slug":"Vue使用中的各种小技巧","published":1,"updated":"2019-11-09T14:25:20.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrjf005f3w4ucque8p08","content":"<h3 id=\"Watch-immediate\"><a href=\"#Watch-immediate\" class=\"headerlink\" title=\"Watch immediate\"></a>Watch immediate</h3><p>这个已经算是一个比较常见的技巧了，这里就简单说一下。当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在<code>created</code>的时候手动调用一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">  this.fetchUserList();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  searchText: &apos;fetchUserList&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>你可以添加<code>immediate</code>属性，这样初始化的时候也会触发，然后上面的代码就能简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// good</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  searchText: &#123;</span><br><span class=\"line\">    handler: &apos;fetchUserList&apos;,</span><br><span class=\"line\">    immediate: true,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>ps: watch 还有一个容易被大家忽略的属性<code>deep</code>。当设置为<code>true</code>时，它会进行深度监听。简而言之就是你有一个 <code>const obj={a:1,b:2}</code>，里面任意一个 key 的 value 发生变化的时候都会触发<code>watch</code>。应用场景：比如我有一个列表，它有一堆<code>query</code>筛选项，这时候你就能<code>deep watch</code>它，只有任何一个筛序项改变的时候，就自动请求新的数据。或者你可以<code>deep watch</code>一个 form 表单，当任何一个字段内容发生变化的时候，你就帮它做自动保存等等。</p>\n<h3 id=\"Attrs-和-Listeners\"><a href=\"#Attrs-和-Listeners\" class=\"headerlink\" title=\"Attrs 和 Listeners\"></a>Attrs 和 Listeners</h3><p>这两个属性是 <code>vue 2.4</code> 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于<code>el-select</code>分装一个带有业务特性的组件，根据输入的 name 搜索用户，并将一些业务逻辑分装在其中。但<code>el-select</code>这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 props 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？</p>\n<p>其实我们的这个组件只是基于<code>el-select</code>做了一些业务的封装，比如添加了默认的<code>placeholder</code>，封装了远程 ajax 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。</p>\n<p>这时候我们就可以使用<code>v-bind=&quot;$attrs&quot;</code>：传递所有属性、<code>v-on=&quot;$listeners&quot;</code>传递所有方法。如下图所示：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS80LzI0LzE2YTRlODJiMjhmMmIyNGM?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>这样，我们没有在<code>$props</code>中声明的方法和属性，会通过<code>$attrs</code>、<code>$listeners</code>直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！</p>\n<h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\".sync\"></a>.sync</h3><p>这个也是 <code>vue 2.3</code> 之后新加的一个语法糖。这也是平时在分装组件的时候很好用的一个语法糖，它的实现机制和<code>v-model</code>是一样的。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzEwLzE2YWEwNmJhZDM3OWVmZmY?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当你有需要在子组件修改父组件值的时候这个方法很好用。 线上 <a href=\"https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/Pagination/index.vue\" target=\"_blank\" rel=\"noopener\">例子</a></p>\n<h3 id=\"Computed-的-get-和-set\"><a href=\"#Computed-的-get-和-set\" class=\"headerlink\" title=\"Computed 的 get 和 set\"></a>Computed 的 get 和 set</h3><p><code>computed</code> 大家肯定都用过，它除了可以缓存计算属性外，它在处理传入数据和目标数据格式不一致的时候也是很有用的。set、get <a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>上面说的可能还是是有点抽象，举一个简单的的例子：我们有一个 form 表单，from 里面有一个记录创建时间的字段<code>create_at</code>。我们知道前端的时间戳都是 13 位的，但很多后端默认时间戳是 10 位的，这就很蛋疼了。前端和后端的时间戳位数不一致。最常见的做法如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTEzODc3NjJjMjZkMg?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>上面的代码主要做的是：在拿到数据的时候将后端 10 位时间戳转化为 13 位时间戳，之后再向服务端发送数据的时候再转化回 10 位时间戳传给后端。目前这种做法当然是可行的，但之后可能不仅只有创建接口，还有更新接口的时候，你还需要在<code>update</code>的接口里在做一遍同样数据转化的操作么？而且这只是一个最简单的例子，真实的 form 表单会复杂的多，需要处理的数据也更为的多。这时候代码就会变得很难维护。</p>\n<p>这时候就可以使用 computed 的 set 和 get 方法了。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzkvMTZhOWI2MjllOTgyNzExNQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>通过上面的代码可以看到，我们把需要做前后端兼容的数据，放在了 computed 中，从 <code>getData</code>和<code>submit</code>中隔离了数据处理的部分。</p>\n<p>当然上面说的方案还不是最好的方案，你其实应该利用之前所说的<code>v-bind=&quot;$attrs&quot;</code>和<code>v-on=&quot;$listeners&quot;</code>对时间选择器组件进行二次封装。例如这样<code>&lt;date-time v-model=&quot;postForm.create_at&quot; /&gt;</code> 外部无需做任何数据处理，直接传入一个 10 位的时间戳，内部进行转化。当日期发生变化的时候，自动通过<code>emit</code>触发<code>input</code>使<code>v-model</code>发生变化，把所有脏活累活都放在组件内部完成，保持外部业务代码的相对干净。具体 v-model 语法糖原理可以见官方 <a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p>set 和 get 处理可以做上面说的进行一些数据处理之外，你也可以把它当做一个 <code>watch</code>的升级版。它可以监听数据的变化，当发生变化时，做一些额外的操作。最经典的用法就是<code>v-model</code>上绑定一个 vuex 值的时候，input 发生变化时，通过 <code>commit</code>更新存在 vuex 里面的值。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTE2ZjA4ZDk1MWY0NQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>具体的解释你也可以见官方 <a href=\"https://vuex.vuejs.org/zh/guide/forms.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h3 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h3><p>这算是一个性能优化的小技巧吧。在我们遇到一些 <code>big data</code>的业务场景，它就很有用了。尤其是做管理后台的时候，经常会有一些超大数据量的 table，或者一个含有 n 多数据的图表，这种数据量很大的东西使用起来最明显的感受就是卡。但其实很多时候其实这些数据其实并不需要响应式变化，这时候你就可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze</a> 方法了，它可以冻结一个对象(注意它不并是 vue 特有的 api)。</p>\n<p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 <code>getter/setter</code>，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。 使用了 <code>Object.freeze</code> 之后，不仅可以减少 <code>observer</code> 的开销，还能减少不少内存开销。相关 <a href=\"https://github.com/vuejs/vue/issues/4384\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>使用方式：<code>this.item = Object.freeze(Object.assign({}, this.item))</code></p>\n<p>这里我提供了一个在线测速 demo，<a href=\"https://panjiachen.gitee.io/panjiachen.github.io/big-table/index.html\" target=\"_blank\" rel=\"noopener\">点我</a>。</p>\n<p>通过测速可以发现正常情况下<code>1000 x 10</code> rerender 都稳定在 1000ms-2000ms 之间，而开启了<code>Object.freeze</code>的情况下，rerender 都稳住在 100ms-200ms 之间。有接近 10 倍的差距。所以能确定不需要变化检测的情况下，<code>big data</code> 还是要优化一下的。</p>\n<h3 id=\"Functional\"><a href=\"#Functional\" class=\"headerlink\" title=\"Functional\"></a>Functional</h3><p><a href=\"https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">函数式组件</a> 这个是文档里就写的内容，但在其实很少人会刻意的去使用。因为你不用它，代码也不会有任何问题，用了到可能会出现 bug。</p>\n<p>我们先看一个例子：<a href=\"https://vue-9-perf-secrets.netlify.com/bench/functional\" target=\"_blank\" rel=\"noopener\">点我测试性能</a> 肉眼可见的性能差距。当然很多人会觉得我的项目中也没有这种变化量级，但我觉得这是一个程序员的自我修养问题吧。，比如能用<code>v-show</code>的地方就不要用<code>v-if</code>，善用<code>keep-alive</code>和<code>v-once</code>，<code>Object.freeze()</code>处理 <a href=\"https://github.com/vuejs/vue/issues/4384\" target=\"_blank\" rel=\"noopener\">vue big data</a> 问题等。虽然都是一些小细节，但对性能和体验都是有不少的提升的。更多的性能优化技巧请查看该文章 <a href=\"https://slides.com/akryum/vueconfus-2019#/\" target=\"_blank\" rel=\"noopener\">vue-9-perf-secrets</a></p>\n<h3 id=\"减少全局操作\"><a href=\"#减少全局操作\" class=\"headerlink\" title=\"减少全局操作\"></a>减少全局操作</h3><p>这其实并不只是针对 vue 项目的一个建议，我们平时写代码的时候一定要尽量避免一些全局的操作。如果必须要用到的时候，一定要自己检查，会不会产生一些全局的污染或者副作用。</p>\n<p>举几个简单例子：</p>\n<ol>\n<li><p>我们现在虽然用 vue 写代码了，核心思想转变为用数据驱动 <code>view</code>，不用像<code>jQuery</code>时代那样，频繁的操作 DOM 节点。但还是免不了有些场景还是要操作 DOM 的。我们在组件内选择节点的时候一定要切记避免使用 <code>document.querySelector()</code>等一系列的全局选择器。你应该使用<code>this.$el</code>或者<code>this.refs.xxx.$el</code>的方式来选择 DOM。这样就能将你的操作局限在当前的组件内，能避免很多问题。</p>\n</li>\n<li><p>我们经常会不可避免的需要注册一些全局性的事件，比如监听页面窗口的变化<code>window.addEventListener(&#39;resize&#39;, this.__resizeHandler)</code>，但再声明了之后一定要在 <code>beforeDestroy</code>或者<code>destroyed</code>生命周期注销它。<code>window.removeEventListener(&#39;resize&#39;, this.__resizeHandler)</code>避免造成不必要的消耗。</p>\n</li>\n<li><p>避免过多的全局状态，不是所有的状态都需要存在 vuex 中的，应该根据业务进行合理的进行取舍。如果不可避免有很多的值需要存在 vuex 中，建议使用动态注册的方式。相关<a href=\"https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">文档</a>。只是部分业务需要的状态处理，建议使用 <code>Event Bus</code>或者使用 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">简单的 store 模式</a>。</p>\n</li>\n<li><p>css 也应该尽量避免写太多的全局性的样式。除了一些全局公用的样式外，所以针对业务的或者组件的样式都应该使用命名空间的方式或者直接使用 vue-loader 提供的 <code>scoped</code>写法，避免一些全局冲突。<a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/style.html#css-modules\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</li>\n</ol>\n<h3 id=\"Sass-和-Js-之间变量共享\"><a href=\"#Sass-和-Js-之间变量共享\" class=\"headerlink\" title=\"Sass 和 Js 之间变量共享\"></a>Sass 和 Js 之间变量共享</h3><p>这个需求可能有些人没有遇到过，举个实际例子来说明一下。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlOTlmNmJjMjM0M2M?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>如上面要实现一个动态的换肤，就需要将用户选择的 theme 主题色传递给 css。但同时初始化的时候 css 又需要将一个默认主题色传递给 js。所以下面我们就分两块来讲解。</p>\n<ul>\n<li><p>js 将变量传递给 sass 这部分是相对简单就可以实现的，实现方案也很多。最简单的方法就是通过 在模板里面写 style 标签来实现，就是俗话所说的内联标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :style=&quot;&#123;&apos;background-color&apos;:color&#125;&quot; &gt;&lt;/div&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <code>css var()</code>，在线 <a href=\"https://codepen.io/richardtallent/pen/yvpERW/\" target=\"_blank\" rel=\"noopener\">demo</a>，还有用 less 的话<code>modifyVars</code>，等等方案都能实现 js 与 css 的变量传递。</p>\n</li>\n<li><p>sass 将变量给 js</p>\n</li>\n</ul>\n<p>还是那前面那个换肤来举例子，我们页面初始化的时候，总需要一个默认主题色吧，假设我们在 <code>var.scss</code>中声明了一个 <code>theme:blue</code>，我们在 js 中该怎么获取这个变量呢？我们可以通过 <a href=\"https://github.com/css-modules/icss#export\" target=\"_blank\" rel=\"noopener\">css-modules</a> <code>:export</code>来实现。更具体的解释- <a href=\"https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass\" target=\"_blank\" rel=\"noopener\">How to Share Variables Between Javascript and Sass</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// var.scss</span><br><span class=\"line\">$theme: blue;</span><br><span class=\"line\"></span><br><span class=\"line\">:export &#123;</span><br><span class=\"line\">  theme: $theme;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.js</span><br><span class=\"line\">import variables from &apos;@/styles/var.scss&apos;</span><br><span class=\"line\">console.log(variables.theme) // blue</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当 js 和 css 共享一个变量的时候这个方案还是很实用的。vue-element-admin 中的侧边栏的宽度，颜色等等变量都是通过这种方案来实现共享的。</p>\n<p>其它换肤方案可以参考 <a href=\"https://juejin.im/post/5ca41617f265da3092006155\" target=\"_blank\" rel=\"noopener\">聊一聊前端换肤</a>。</p>\n<h3 id=\"自动注册全局组件\"><a href=\"#自动注册全局组件\" class=\"headerlink\" title=\"自动注册全局组件\"></a>自动注册全局组件</h3><p>我的业务场景大部分是中后台，虽然封装和使用了很多第三方组件，但还是免不了需要自己封装和使用很多业务组件。但每次用的时候还需要手动引入，真的是有些麻烦的。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDBkNWFjMDU2OTk?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>我们其实可以基于 webpack 的<code>require.context</code>来实现自动加载组件并注册的全局的功能。相关原理在之前的文章中已经阐述过了。具体代码如下</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDU3NWRjMjQzZDk?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>我们可以创建一个<code>GlobalComponents</code>文件夹，将你想要注册到全局的组件都放在这个文件夹里，在<code>index.js</code>里面放上如上代码。之后只要在入口文件<code>main.js</code>中引入即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import &apos;./components/Table/index&apos; // 自动注册全局业务组件</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这样我们可以在模板中直接使用这些全局组建了。不需要再繁琐的手动引入了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;user-select/&gt;</span><br><span class=\"line\">    &lt;status-button/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当然你也不要为了省事，啥组件都往全局注册，这样会让你初始化页面的时候你的初始<code>init bundle</code>很大。你应该就注册那些你经常使用且体积不大的组件。那些体积大的组件，如编辑器或者图表组件还是按需加载比较合理。而且你最好声明这些全局组件的时候有一个统一的命名规范比如：<code>globel-user-select</code>这样的，指定一个团队规范，不然人家看到你这个全局组件会一脸懵逼，这个组件是哪来的。</p>\n<h3 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h3><p>这又是一个老生常谈的问题了 vue 的一些最佳实践什么的话，这里不讨论了，我觉得看官方的 <a href=\"https://cn.vuejs.org/v2/style-guide/\" target=\"_blank\" rel=\"noopener\">风格指南</a> 差不多就够了。比如避免<code>避免 v-if 和 v-for 用在一起</code>、<code>元素特性的顺序</code>这些等等规则，几十条规则，说真的写了这么久 vue，我也只能记住一些常规的。什么属性的顺序啊，不太可能记住的。这种东西还是交给程序来自动优化才是更合理的选择。强烈推荐配置编辑器自动化处理。具体配置见 <a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/eslint.html\" target=\"_blank\" rel=\"noopener\">文档</a>。同时建议结合 <code>Git Hooks</code> 配合在每次提交代码时对代码进行 lint 校验，确保所有提交到远程仓库的代码都符合团队的规范。它主要使用到的工具是<code>husky</code>和<code>lint-staged</code>，详细文档见 <a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#git-hooks\" target=\"_blank\" rel=\"noopener\">Git Hooks</a></p>\n<h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>这个是一个文档里没有写的 api，但我觉得是一个很有用的 api。比如我们平时使用一些第三方组件，或者注册一些全局事件的时候，都需要在<code>mounted</code>中声明，在<code>destroyed</code>中销毁。但由于这个是写在两个生命周期内的，很容易忘记，而且大部分在创建阶段声明的内容都会有副作用，如果你在组件摧毁阶段忘记移除的话，会造成内存的泄漏，而且都不太容易发现。如下代码：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDA4YTUzYmQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>react 在新版本中也加入了<code>useEffect</code>，将以前的多个 life-cycles 合并、重组，使逻辑更加清晰，这里就不展开了。那 vue 是不是也可以这样做？我去了看了一下官方的 <code>vue-hooks</code>的 <a href=\"https://github.com/yyx990803/vue-hooks/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">源码</a> 发现了一个新的 api：<code>$on(&#39;hook:xxx&#39;)</code>。有了它，我们就能将之前的代码用更简单和清楚地方式实现了。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDFmY2MyMzI?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>和 react 的<code>useEffect</code>有异曲同工之妙。</p>\n<p>而且我们有了这个 api 之后，能干的事情还不止这个。有时候我们会用一些第三方组件，比如我们有一个编辑器组件（加载比较慢，会有白屏），所以我们在它渲染完成之前需要给它一个占位符，但可能这个组件并没有暴露给我们这个接口，当然我们需要修改这个组件，在它创建的时候手动 emit 一个事件出去，然后在组件上监听它，比如：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDVlYWJkOGE?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当然这也是可行的，但万一还要监听一个更新或者摧毁的生命周期呢？其实利用 <code>hook</code>可以很方便的实现这个效果。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMzBlZTUzMGE0NWI?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当然在 vue 3.0 版本中可能会有新的写法，就不如下面的讨论: <a href=\"https://github.com/vuejs/rfcs/pull/23\" target=\"_blank\" rel=\"noopener\">Dynamic Lifecycle Injection</a>。有兴趣的可以自行去研究，这里就不展开了。当 3.0 正式发布之后再来讨论吧。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h3 id=\"Watch-immediate\"><a href=\"#Watch-immediate\" class=\"headerlink\" title=\"Watch immediate\"></a>Watch immediate</h3><p>这个已经算是一个比较常见的技巧了，这里就简单说一下。当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在<code>created</code>的时候手动调用一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">  this.fetchUserList();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  searchText: &apos;fetchUserList&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>你可以添加<code>immediate</code>属性，这样初始化的时候也会触发，然后上面的代码就能简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// good</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  searchText: &#123;</span><br><span class=\"line\">    handler: &apos;fetchUserList&apos;,</span><br><span class=\"line\">    immediate: true,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>ps: watch 还有一个容易被大家忽略的属性<code>deep</code>。当设置为<code>true</code>时，它会进行深度监听。简而言之就是你有一个 <code>const obj={a:1,b:2}</code>，里面任意一个 key 的 value 发生变化的时候都会触发<code>watch</code>。应用场景：比如我有一个列表，它有一堆<code>query</code>筛选项，这时候你就能<code>deep watch</code>它，只有任何一个筛序项改变的时候，就自动请求新的数据。或者你可以<code>deep watch</code>一个 form 表单，当任何一个字段内容发生变化的时候，你就帮它做自动保存等等。</p>\n<h3 id=\"Attrs-和-Listeners\"><a href=\"#Attrs-和-Listeners\" class=\"headerlink\" title=\"Attrs 和 Listeners\"></a>Attrs 和 Listeners</h3><p>这两个属性是 <code>vue 2.4</code> 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于<code>el-select</code>分装一个带有业务特性的组件，根据输入的 name 搜索用户，并将一些业务逻辑分装在其中。但<code>el-select</code>这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 props 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？</p>\n<p>其实我们的这个组件只是基于<code>el-select</code>做了一些业务的封装，比如添加了默认的<code>placeholder</code>，封装了远程 ajax 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。</p>\n<p>这时候我们就可以使用<code>v-bind=&quot;$attrs&quot;</code>：传递所有属性、<code>v-on=&quot;$listeners&quot;</code>传递所有方法。如下图所示：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS80LzI0LzE2YTRlODJiMjhmMmIyNGM?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>这样，我们没有在<code>$props</code>中声明的方法和属性，会通过<code>$attrs</code>、<code>$listeners</code>直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！</p>\n<h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\".sync\"></a>.sync</h3><p>这个也是 <code>vue 2.3</code> 之后新加的一个语法糖。这也是平时在分装组件的时候很好用的一个语法糖，它的实现机制和<code>v-model</code>是一样的。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzEwLzE2YWEwNmJhZDM3OWVmZmY?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当你有需要在子组件修改父组件值的时候这个方法很好用。 线上 <a href=\"https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/Pagination/index.vue\" target=\"_blank\" rel=\"noopener\">例子</a></p>\n<h3 id=\"Computed-的-get-和-set\"><a href=\"#Computed-的-get-和-set\" class=\"headerlink\" title=\"Computed 的 get 和 set\"></a>Computed 的 get 和 set</h3><p><code>computed</code> 大家肯定都用过，它除了可以缓存计算属性外，它在处理传入数据和目标数据格式不一致的时候也是很有用的。set、get <a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>上面说的可能还是是有点抽象，举一个简单的的例子：我们有一个 form 表单，from 里面有一个记录创建时间的字段<code>create_at</code>。我们知道前端的时间戳都是 13 位的，但很多后端默认时间戳是 10 位的，这就很蛋疼了。前端和后端的时间戳位数不一致。最常见的做法如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTEzODc3NjJjMjZkMg?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>上面的代码主要做的是：在拿到数据的时候将后端 10 位时间戳转化为 13 位时间戳，之后再向服务端发送数据的时候再转化回 10 位时间戳传给后端。目前这种做法当然是可行的，但之后可能不仅只有创建接口，还有更新接口的时候，你还需要在<code>update</code>的接口里在做一遍同样数据转化的操作么？而且这只是一个最简单的例子，真实的 form 表单会复杂的多，需要处理的数据也更为的多。这时候代码就会变得很难维护。</p>\n<p>这时候就可以使用 computed 的 set 和 get 方法了。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzkvMTZhOWI2MjllOTgyNzExNQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>通过上面的代码可以看到，我们把需要做前后端兼容的数据，放在了 computed 中，从 <code>getData</code>和<code>submit</code>中隔离了数据处理的部分。</p>\n<p>当然上面说的方案还不是最好的方案，你其实应该利用之前所说的<code>v-bind=&quot;$attrs&quot;</code>和<code>v-on=&quot;$listeners&quot;</code>对时间选择器组件进行二次封装。例如这样<code>&lt;date-time v-model=&quot;postForm.create_at&quot; /&gt;</code> 外部无需做任何数据处理，直接传入一个 10 位的时间戳，内部进行转化。当日期发生变化的时候，自动通过<code>emit</code>触发<code>input</code>使<code>v-model</code>发生变化，把所有脏活累活都放在组件内部完成，保持外部业务代码的相对干净。具体 v-model 语法糖原理可以见官方 <a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p>set 和 get 处理可以做上面说的进行一些数据处理之外，你也可以把它当做一个 <code>watch</code>的升级版。它可以监听数据的变化，当发生变化时，做一些额外的操作。最经典的用法就是<code>v-model</code>上绑定一个 vuex 值的时候，input 发生变化时，通过 <code>commit</code>更新存在 vuex 里面的值。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTE2ZjA4ZDk1MWY0NQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>具体的解释你也可以见官方 <a href=\"https://vuex.vuejs.org/zh/guide/forms.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h3 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h3><p>这算是一个性能优化的小技巧吧。在我们遇到一些 <code>big data</code>的业务场景，它就很有用了。尤其是做管理后台的时候，经常会有一些超大数据量的 table，或者一个含有 n 多数据的图表，这种数据量很大的东西使用起来最明显的感受就是卡。但其实很多时候其实这些数据其实并不需要响应式变化，这时候你就可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze</a> 方法了，它可以冻结一个对象(注意它不并是 vue 特有的 api)。</p>\n<p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 <code>getter/setter</code>，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。 使用了 <code>Object.freeze</code> 之后，不仅可以减少 <code>observer</code> 的开销，还能减少不少内存开销。相关 <a href=\"https://github.com/vuejs/vue/issues/4384\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>使用方式：<code>this.item = Object.freeze(Object.assign({}, this.item))</code></p>\n<p>这里我提供了一个在线测速 demo，<a href=\"https://panjiachen.gitee.io/panjiachen.github.io/big-table/index.html\" target=\"_blank\" rel=\"noopener\">点我</a>。</p>\n<p>通过测速可以发现正常情况下<code>1000 x 10</code> rerender 都稳定在 1000ms-2000ms 之间，而开启了<code>Object.freeze</code>的情况下，rerender 都稳住在 100ms-200ms 之间。有接近 10 倍的差距。所以能确定不需要变化检测的情况下，<code>big data</code> 还是要优化一下的。</p>\n<h3 id=\"Functional\"><a href=\"#Functional\" class=\"headerlink\" title=\"Functional\"></a>Functional</h3><p><a href=\"https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">函数式组件</a> 这个是文档里就写的内容，但在其实很少人会刻意的去使用。因为你不用它，代码也不会有任何问题，用了到可能会出现 bug。</p>\n<p>我们先看一个例子：<a href=\"https://vue-9-perf-secrets.netlify.com/bench/functional\" target=\"_blank\" rel=\"noopener\">点我测试性能</a> 肉眼可见的性能差距。当然很多人会觉得我的项目中也没有这种变化量级，但我觉得这是一个程序员的自我修养问题吧。，比如能用<code>v-show</code>的地方就不要用<code>v-if</code>，善用<code>keep-alive</code>和<code>v-once</code>，<code>Object.freeze()</code>处理 <a href=\"https://github.com/vuejs/vue/issues/4384\" target=\"_blank\" rel=\"noopener\">vue big data</a> 问题等。虽然都是一些小细节，但对性能和体验都是有不少的提升的。更多的性能优化技巧请查看该文章 <a href=\"https://slides.com/akryum/vueconfus-2019#/\" target=\"_blank\" rel=\"noopener\">vue-9-perf-secrets</a></p>\n<h3 id=\"减少全局操作\"><a href=\"#减少全局操作\" class=\"headerlink\" title=\"减少全局操作\"></a>减少全局操作</h3><p>这其实并不只是针对 vue 项目的一个建议，我们平时写代码的时候一定要尽量避免一些全局的操作。如果必须要用到的时候，一定要自己检查，会不会产生一些全局的污染或者副作用。</p>\n<p>举几个简单例子：</p>\n<ol>\n<li><p>我们现在虽然用 vue 写代码了，核心思想转变为用数据驱动 <code>view</code>，不用像<code>jQuery</code>时代那样，频繁的操作 DOM 节点。但还是免不了有些场景还是要操作 DOM 的。我们在组件内选择节点的时候一定要切记避免使用 <code>document.querySelector()</code>等一系列的全局选择器。你应该使用<code>this.$el</code>或者<code>this.refs.xxx.$el</code>的方式来选择 DOM。这样就能将你的操作局限在当前的组件内，能避免很多问题。</p>\n</li>\n<li><p>我们经常会不可避免的需要注册一些全局性的事件，比如监听页面窗口的变化<code>window.addEventListener(&#39;resize&#39;, this.__resizeHandler)</code>，但再声明了之后一定要在 <code>beforeDestroy</code>或者<code>destroyed</code>生命周期注销它。<code>window.removeEventListener(&#39;resize&#39;, this.__resizeHandler)</code>避免造成不必要的消耗。</p>\n</li>\n<li><p>避免过多的全局状态，不是所有的状态都需要存在 vuex 中的，应该根据业务进行合理的进行取舍。如果不可避免有很多的值需要存在 vuex 中，建议使用动态注册的方式。相关<a href=\"https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">文档</a>。只是部分业务需要的状态处理，建议使用 <code>Event Bus</code>或者使用 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">简单的 store 模式</a>。</p>\n</li>\n<li><p>css 也应该尽量避免写太多的全局性的样式。除了一些全局公用的样式外，所以针对业务的或者组件的样式都应该使用命名空间的方式或者直接使用 vue-loader 提供的 <code>scoped</code>写法，避免一些全局冲突。<a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/style.html#css-modules\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</li>\n</ol>\n<h3 id=\"Sass-和-Js-之间变量共享\"><a href=\"#Sass-和-Js-之间变量共享\" class=\"headerlink\" title=\"Sass 和 Js 之间变量共享\"></a>Sass 和 Js 之间变量共享</h3><p>这个需求可能有些人没有遇到过，举个实际例子来说明一下。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlOTlmNmJjMjM0M2M?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>如上面要实现一个动态的换肤，就需要将用户选择的 theme 主题色传递给 css。但同时初始化的时候 css 又需要将一个默认主题色传递给 js。所以下面我们就分两块来讲解。</p>\n<ul>\n<li><p>js 将变量传递给 sass 这部分是相对简单就可以实现的，实现方案也很多。最简单的方法就是通过 在模板里面写 style 标签来实现，就是俗话所说的内联标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div :style=&quot;&#123;&apos;background-color&apos;:color&#125;&quot; &gt;&lt;/div&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <code>css var()</code>，在线 <a href=\"https://codepen.io/richardtallent/pen/yvpERW/\" target=\"_blank\" rel=\"noopener\">demo</a>，还有用 less 的话<code>modifyVars</code>，等等方案都能实现 js 与 css 的变量传递。</p>\n</li>\n<li><p>sass 将变量给 js</p>\n</li>\n</ul>\n<p>还是那前面那个换肤来举例子，我们页面初始化的时候，总需要一个默认主题色吧，假设我们在 <code>var.scss</code>中声明了一个 <code>theme:blue</code>，我们在 js 中该怎么获取这个变量呢？我们可以通过 <a href=\"https://github.com/css-modules/icss#export\" target=\"_blank\" rel=\"noopener\">css-modules</a> <code>:export</code>来实现。更具体的解释- <a href=\"https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass\" target=\"_blank\" rel=\"noopener\">How to Share Variables Between Javascript and Sass</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// var.scss</span><br><span class=\"line\">$theme: blue;</span><br><span class=\"line\"></span><br><span class=\"line\">:export &#123;</span><br><span class=\"line\">  theme: $theme;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.js</span><br><span class=\"line\">import variables from &apos;@/styles/var.scss&apos;</span><br><span class=\"line\">console.log(variables.theme) // blue</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当 js 和 css 共享一个变量的时候这个方案还是很实用的。vue-element-admin 中的侧边栏的宽度，颜色等等变量都是通过这种方案来实现共享的。</p>\n<p>其它换肤方案可以参考 <a href=\"https://juejin.im/post/5ca41617f265da3092006155\" target=\"_blank\" rel=\"noopener\">聊一聊前端换肤</a>。</p>\n<h3 id=\"自动注册全局组件\"><a href=\"#自动注册全局组件\" class=\"headerlink\" title=\"自动注册全局组件\"></a>自动注册全局组件</h3><p>我的业务场景大部分是中后台，虽然封装和使用了很多第三方组件，但还是免不了需要自己封装和使用很多业务组件。但每次用的时候还需要手动引入，真的是有些麻烦的。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDBkNWFjMDU2OTk?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>我们其实可以基于 webpack 的<code>require.context</code>来实现自动加载组件并注册的全局的功能。相关原理在之前的文章中已经阐述过了。具体代码如下</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDU3NWRjMjQzZDk?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>我们可以创建一个<code>GlobalComponents</code>文件夹，将你想要注册到全局的组件都放在这个文件夹里，在<code>index.js</code>里面放上如上代码。之后只要在入口文件<code>main.js</code>中引入即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import &apos;./components/Table/index&apos; // 自动注册全局业务组件</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这样我们可以在模板中直接使用这些全局组建了。不需要再繁琐的手动引入了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;user-select/&gt;</span><br><span class=\"line\">    &lt;status-button/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当然你也不要为了省事，啥组件都往全局注册，这样会让你初始化页面的时候你的初始<code>init bundle</code>很大。你应该就注册那些你经常使用且体积不大的组件。那些体积大的组件，如编辑器或者图表组件还是按需加载比较合理。而且你最好声明这些全局组件的时候有一个统一的命名规范比如：<code>globel-user-select</code>这样的，指定一个团队规范，不然人家看到你这个全局组件会一脸懵逼，这个组件是哪来的。</p>\n<h3 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h3><p>这又是一个老生常谈的问题了 vue 的一些最佳实践什么的话，这里不讨论了，我觉得看官方的 <a href=\"https://cn.vuejs.org/v2/style-guide/\" target=\"_blank\" rel=\"noopener\">风格指南</a> 差不多就够了。比如避免<code>避免 v-if 和 v-for 用在一起</code>、<code>元素特性的顺序</code>这些等等规则，几十条规则，说真的写了这么久 vue，我也只能记住一些常规的。什么属性的顺序啊，不太可能记住的。这种东西还是交给程序来自动优化才是更合理的选择。强烈推荐配置编辑器自动化处理。具体配置见 <a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/eslint.html\" target=\"_blank\" rel=\"noopener\">文档</a>。同时建议结合 <code>Git Hooks</code> 配合在每次提交代码时对代码进行 lint 校验，确保所有提交到远程仓库的代码都符合团队的规范。它主要使用到的工具是<code>husky</code>和<code>lint-staged</code>，详细文档见 <a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#git-hooks\" target=\"_blank\" rel=\"noopener\">Git Hooks</a></p>\n<h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>这个是一个文档里没有写的 api，但我觉得是一个很有用的 api。比如我们平时使用一些第三方组件，或者注册一些全局事件的时候，都需要在<code>mounted</code>中声明，在<code>destroyed</code>中销毁。但由于这个是写在两个生命周期内的，很容易忘记，而且大部分在创建阶段声明的内容都会有副作用，如果你在组件摧毁阶段忘记移除的话，会造成内存的泄漏，而且都不太容易发现。如下代码：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDA4YTUzYmQ?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>react 在新版本中也加入了<code>useEffect</code>，将以前的多个 life-cycles 合并、重组，使逻辑更加清晰，这里就不展开了。那 vue 是不是也可以这样做？我去了看了一下官方的 <code>vue-hooks</code>的 <a href=\"https://github.com/yyx990803/vue-hooks/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">源码</a> 发现了一个新的 api：<code>$on(&#39;hook:xxx&#39;)</code>。有了它，我们就能将之前的代码用更简单和清楚地方式实现了。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDFmY2MyMzI?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>和 react 的<code>useEffect</code>有异曲同工之妙。</p>\n<p>而且我们有了这个 api 之后，能干的事情还不止这个。有时候我们会用一些第三方组件，比如我们有一个编辑器组件（加载比较慢，会有白屏），所以我们在它渲染完成之前需要给它一个占位符，但可能这个组件并没有暴露给我们这个接口，当然我们需要修改这个组件，在它创建的时候手动 emit 一个事件出去，然后在组件上监听它，比如：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDVlYWJkOGE?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当然这也是可行的，但万一还要监听一个更新或者摧毁的生命周期呢？其实利用 <code>hook</code>可以很方便的实现这个效果。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMzBlZTUzMGE0NWI?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>当然在 vue 3.0 版本中可能会有新的写法，就不如下面的讨论: <a href=\"https://github.com/vuejs/rfcs/pull/23\" target=\"_blank\" rel=\"noopener\">Dynamic Lifecycle Injection</a>。有兴趣的可以自行去研究，这里就不展开了。当 3.0 正式发布之后再来讨论吧。</p>\n"},{"title":"Vue中的MVVM实现原理简析","date":"2019-05-30T14:11:45.000Z","_content":"# 1. MVVM\n\nangular - 脏值检测\n\nvue - 数据劫持+发布订阅模式（不兼容低版本：因为其依赖于Object.defineProperty）\n\n总体流程图：\n\n![](http://markdown.img.esunr.xyz/vue中MVVM实现流程.png)\n\n# 2. Object.defineProperty()\n\n## 1.1 概念\n\n`Object.defineProperty()` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。定义的这个属性具有使用 `Object.defineProperty()` 为其附上的特性。\n\n语法：\n\n```\nObject.defineProperty(obj, prop, descriptor)\n```\n\n`obj`：要在其上定义属性的对象。\n\n`prop`：要定义或修改的属性的名称。\n\n`descriptor`：将被定义或修改的属性描述符。\n\n示例：\n\n```javascript\nvar obj = { age: 18 }\nObject.defineProperty(obj, 'name', {\n  value: 'esunr'\n});\n```\n\n```\n> obj\n< { age: 18, name: \"esunr\" }\n```\n\n但是当我们使用 `delete obj.school;` 是无法删除属性的，为了实现删除 `obj` 的 `school` 属性，我们需要去使用属性修饰符：\n\n```diff\n  let obj = {};\n  Object.defineProperty(obj, 'school', {\n+   configurable: true,\n    value: 'esunr'\n  });\n  delete obj.school;\n  console.log(obj);\n```\n\n但是不是使用 `Object.defineProperty()` 方法定义的对象属性，可以不受限制任意读写，如：\n\n```\n> obj.age = 19;\n< 19\n> obj\n< { age: 19, name: \"esunr\" }\n```\n\n## 1.2 属性修饰符\n\n在上面的代码中，`value`、`configurable` 都属于属性修饰符，使用 `Object.defineProperty` 时，我们要对每一个值都独立配置这些属性修饰符。\n\n**数据描述符和存取描述符均具有**以下可选键值：\n\n`configurable`\n\n当且仅当该属性的 configurable 为 true 时，该属性`描述符`才能够被改变，同时该属性也能从对应的对象上被删除。**默认为 false**。\n\n`enumerable`\n\n当且仅当该属性的`enumerable`为`true`时，该属性才能够出现在对象的枚举属性中。**默认为 false**。（默认不可使用 `for..in` 循环）\n\n**数据描述符同时具有以下可选键值**：\n\n`value`\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。**默认为 `undefined`**。\n\n`writable`\n\n当且仅当该属性的`writable`为`true`时，`value`才能被赋值运算符改变。**默认为 false**。\n\n**存取描述符同时具有以下可选键值**：\n\n## 1.3 get()与set()\n\n`get`\n\n一个给属性提供 getter 的方法，如果没有 getter 则为 `undefined`。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入`this`对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。\n\n**默认为 `undefined`**。\n\n> 存在 `get()` 时，不能存在 `value` 属性\n\n示例：\n\n```javascript\nlet obj = {};\nObject.defineProperty(obj, 'name', {\n  configurable: true,\n  get(){\n    // 获取obj.name的值时会调用get方法\n    return 'esunr'\n  }\n});\n```\n\n```\n> obj.name\n< \"esunr\"\n```\n\n`set`\n\n一个给属性提供 setter 的方法，如果没有 setter 则为 `undefined`。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。\n\n**默认为 [`undefined`]**。\n\n示例：\n\n```javascript\nlet obj = {};\nObject.defineProperty(obj, 'name', {\n  configurable: true,\n  set(val){\n    console.log(val)\n  }\n});\n```\n\n```\n> obj.name = \"xiaoming\"\n< \"xiaoming\"\n```\n\n# 3. 数据劫持\n\n在使用vue时，我们通常将这样定义一个vm实例：\n\n```javascript\nlet vm = new Vue({\n  el: 'app',\n  data: { a: 2 }\n})  \n```\n\n实际上，Vue在其内部代码中进行了一些操作：\n\n1. 将所有vm实例的配置项都转入到变量 `$options` 中\n2. 将配置项 `data` 中的数据进行劫持，存放到vm实例上的 `_data` 变量中\n\n那么进行数据劫持的这一步就是为了将用户由 `data` 传入的数据使用 `Object.defineProperty()` 方法为其每一项数据挂载一个 `get()` 和 `set()` 方法，同时如果 `data` 传入的某一项数据也是一个对象，那么也要在这个对象上面挂载 `get()` 和 `set()` 方法。\n\n![20190529151814.png](http://img.cdn.esunr.xyz/markdown/20190529151814.png)\n\n我们来实现Mvvm对象：\n\n```javascript\nfunction Mvvm(option = {}) {\n  this.$options = option; // 将所有属性挂载了$options上\n  var data = this._data = this.$options.data;\n  observe(data);\n}\n// vm.$options\n\n\n// 观察对象给对象增加 ObjectDefineProperty\nfunction Observe(data) { // 这里写我们的主要逻辑\n  for (let key in data) { // 把data属性通过object.defineProperty的方式定义属性\n    let val = data[key];\n    observe(val); // 如果val是一个对象，就使用递归再为其添加一个 get()、set()方法\n    Object.defineProperty(data, key, {\n      enumerable: true, // 可枚举\n      get() {\n        return val;\n      },\n      set(newVal) {\n        if (newVal === val) {\n          // 如果设置的值和以前一样，就不执行set操作\n          return;\n        } else {\n          val = newVal; // 如果以后再获取值的时候，将刚才设置的值再丢回去\n          observe(newVal); // 如果将数据进行重新赋值后，重新赋值的对象也要添加get()和set()\n        }\n      }\n    })\n  }\n}\n\nfunction observe(data) {\n  if(typeof data !== 'object') return;\n  return new Observe(data);\n}\n```\n\n实例化一个vm对象：\n\n```javascript\nlet vm = new Vue({\n  el: 'app',\n  data: { a: {a: 1} }\n})  \n```\n\n可以看出其数据上都挂载了一个 `get()` 方法和 `set()` 方法：\n\n![20190529155054.png](http://img.cdn.esunr.xyz/markdown/20190529155054.png)\n\n# 4. 数据代理\n\n在Vue中，我们通过 `data` 添加的数据不仅挂载到了vm实例的 `_data` 变量中，同时还挂载到了vm实例本身上，并且在我们正常的使用过程中，更多是去调用vm实例本身来获取数据，而并非 `_data` ，这时候我们就需要通过数据代理，将 `_data` 中的数据代理到vm实例上。\n\n我们新增原有的核心代码：\n\n```javascript\nfunction Mvvm(option = {}) {\n  this.$options = option;\n  var data = this._data = this.$options.data;\n  observe(data);\n  // 使用this代理_data\n  for(let key in data){\n    Object.defineProperty(this,key, {\n      enumerable: true,\n      get(){\n        return this._data[key];\n      },\n      set(newVal){\n        this._data[key] = newVal;\n      }\n    })\n  }\n}\n```\n\n实现了Vue的两个特点：\n\n1. 不能新增不存在的属性，因为新增的属性没有get和set\n\n2. 深度相应，每次赋予一个新对象时会给这个新对象增加数据劫持\n\n\n# 5. 模板编译\n\n在Vue中，我们在文档节点中使用 {% raw %} `{{}}` {% endraw %} 来将vm中的数据渲染到文档中，这就需要有一个模板编译方法来处理文档节点中的文本，来解析并且读取数据\n\n新增一个Compile对象来执行编译，其包含两个参数，一个el为MVVM模式下的文档范围，vm为MVVM实例：\n\n```javascript\nfunction Compile(el, vm) {\n  // el 表示替换的范围\n  vm.$el = document.querySelector(el);\n  let fragment = document.createDocumentFragment();\n  while (child = vm.$el.firstChild) {\n    // 将#app中的内容存放到fragment中，存放入内存等待处理\n    fragment.appendChild(child);\n  }\n\n  // 替换处理fragment中的文本内容（模拟Vue的模板引擎）\n  replace(fragment)\n\n  function replace(fragment) {\n    // Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。\n    // 遍历每个fragment中存放的节点\n    Array.from(fragment.childNodes).forEach(function (node) {\n      let text = node.textContent;\n      let reg = /\\{\\{(.*)\\}\\}/;\n      // 如果当前的节点类型是3（文本节点），就对其进行匹配处理\n      if (node.nodeType === 3 && reg.test(text)) {\n        console.log(RegExp.$1);\n        let arr = RegExp.$1.split(\".\");\n        let val = vm;\n        arr.forEach(function (k) {\n          val = val[k];\n        });\n        node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n      }\n      // 如果当前节点不是根节点，就利用递归去深度遍历其内部节点（注意：普通Element节点的根节点都为文本节点）\n      if (node.childNodes) {\n        replace(node);\n      }\n    })\n  }\n\n  // 将内存中的dom节点重新加载到页面中（不需要渲染）\n  vm.$el.appendChild(fragment);\n}\n```\n\n在核心代码中启用：\n\n```javascript\nfunction Mvvm(options = {}) {\n  ... ...\n  new Compile(options.el, this);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n# 6. 数据更新\n\n在Vue中，当vm实例上挂载的数据发生更新时，视图也会随之刷新，他们之间存在着发布订阅关系。\n\n## 6.1 发布订阅模式\n\n我们再模拟Vue数据更新机制的时候，需要设计一个发布者的构造函数（Dep）和订阅者的构造函数（Watcher）。\n\n发布者内部存放着一个订阅者队列 `subArr`，同时其原型上挂载了一个 `addSub()` 方法用来向订阅者队列中添加订阅者，还有一个 `carry()` 方法，执行该方法后，会遍历订阅者队列，执行每个订阅者身上挂载的 `update()` 方法。\n\n每个订阅者内部都传入了一个 `fn` ，是一个方法函数。同时其原型上挂载了一个 `update()` 方法，在其方法内部执行了实例化订阅者时传入的方法函数 `fn`。\n\n当发布者发布事件时，只需要调用挂载在其身上的 `carry()` 方法，就可以将所有订阅者的 `update()` 方法执行。\n\n![20190530111309.png](http://img.cdn.esunr.xyz/markdown/20190530111309.png)\n\n发布订阅模式的构造如下：\n\n```javascript\n// 1. 构造发布者\nfunction Dep() {\n  this.subArr = [];\n}\nDep.prototype.addSub = function (sub) {\n  this.subArr.push(sub);\n}\nDep.prototype.carry = function () {\n  this.subArr.forEach(sub => {\n    sub.update();\n  });\n}\n\n// 2. 构造订阅者\nfunction Watcher(fn) {\n  this.fn = fn;\n}\nWatcher.prototype.update = function () {\n  this.fn();\n}\n```\n\n## 6.2 模拟Vue中的发布订阅模式\n\n在Vue中创建一个发布订阅机制我们需要考虑以下几个问题：\n\n- 在哪里创建订阅者 （实例化一个Watcher对象）\n- 在哪里创建发布者 （实例化一个Dep对象）\n- 在哪里添加订阅 （执行发布者的 `addSub()` 方法）\n- 在哪里发布事件 （执行发布者的 `carry()` 方法）\n\n> 每一个渲染出的文本节点对应一个订阅者，一旦发生了数据更新，所有的订阅者的update方法都会被执行，也就是说所有需要解析的文本节点都会被渲染。\n\n\nVue数据更新机制的订阅者是 `Compile` 编译器，当数据发生了变更时，编译器需要对模板重新编译渲染。在编译器中，执行了模板替换的方法语句是 `node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);` ，那么我们再创建订阅者时，传入其内部的方法就是这条语句：\n\n```diff\n  function Compile(el, vm) {\n    ... ...\n\n    // 替换处理fragment中的文本内容（模拟Vue的模板引擎）\n    replace(fragment)\n\n    function replace(fragment) {\n      Array.from(fragment.childNodes).forEach(function (node) {\n        ... ...\n        if (node.nodeType === 3 && reg.test(text)) {\n          ... ...\n+         new Watcher(function () {\n+           node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n+         })\n          // 替换的逻辑\n          node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n        }\n        if (node.childNodes) {\n          ... ...\n        }\n      })\n    }\n\n    // 将内存中的dom节点重新加载到页面中（不需要渲染）\n    vm.$el.appendChild(fragment);\n  }\n```\n\n这样就达成了一个目的：在页面加载完成后实例化 `Compile` 时，在执行模板编译的过程中，为每个文本节点对象都渲染出一个订阅者实例，去观察其对应的数据是否变动，如果数据变动，就触发当前文本节点的重新渲染。\n\n我们先不讨论实例化的订阅者何时被调用挂载于其身上的 `update()` 方法，先假设一旦数据发生了变化，传入订阅者实例的方法就会被执行，即 `node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val)` 被执行。但我们会发现，内部参数 `val` 仍是一个旧值（因为Compile只执行一次，在其内部的变量val肯定是不会动态变更的）。我们在重新渲染文本节点时，需要去将旧文本替换成新文本。\n\n那么问题就是如何获取更新后的新值？\n\n我们需要改动代码，在实例化订阅者对象的时候传入三个值，`vm` 为Mvvm实例，`RegExp.$1` 是当前文本节点中匹配的原始待编译字符（也就是 {% raw %} `{{}}` {% endraw %}\n 包裹的内容），第三个参数时传入的执行函数：\n\n```diff\n- new Watcher(function () {\n-   node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n- })\n\n+ new Watcher(vm, RegExp.$1, function (newVal) {\n+   node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, newVal);\n+ })\n```\n\n那么传入的这些参数在构造对象 `Watcher` 中如何使用？\n\n首先我们要接受传入的参数\n\n```diff\n  function Watcher(vm, exp, fn) {\n+   this.fn = fn;\n+   this.vm = vm;\n+   this.exp = exp;\n  }\n```\n\n这时候就可以考虑如何将订阅者添加到发布者的 `subArr` 中了。\n\n首先我们要清楚实例化发布者的位置应该是在 `Observe` 中，因为其负责了构建每一个数据。所以我们可以去尝试通过访问数据对象上的 `get()` 方法，来将订阅者添加到其数据上的发布者。\n\n```diff\n  function Watcher(vm, exp, fn) {\n    this.fn = fn;\n    this.vm = vm;\n    this.exp = exp;\n+   Dep.target = this;\n+   let val = vm;\n+   let arr = exp.split('.');\n+   arr.forEach(function (k) {\n+     val = val[k];\n+   })\n+   Dep.target = null;\n  }\n```\n\n其中 `Dep.target` 是为了存放当前的订阅者对象，在数据的 `get()` 方法中将订阅者添加到发布者的 `subArr` 中。 `forEach` 是为了深度遍历，因为如果当前的数据值是一个对象，那么需要去深度查找这个值中对象的 `get()` 和 `set()` 方法。\n\n同样，当数据被重新赋值时，会调用其 `set()` 方法，所以最终我们在 `Observe` 中为数据添加 `get()` 和 `set()` 方法的代码中要加上如下额外步骤：\n\n```diff\n  function Observe(data) {\n+   let dep = new Dep();\n    for (let key in data) {\n      let val = data[key];\n      observe(val);\n      Object.defineProperty(data, key, {\n        enumerable: true,\n        get() {\n+         Dep.target && dep.addSub(Dep.target);\n          return val;\n        },\n        set(newVal) {\n          if (newVal === val) {\n            return;\n          } else {\n            val = newVal;\n            observe(newVal);\n+           dep.carry();\n          }\n        }\n      })\n    }\n  }\n```\n\n但是正如最初我们提到的，执行订阅者的 `update()` 方法去执行传入订阅者内部的函数时，需要获取新值 `newVal`，那么我们需要去更改一下 `update()` 方法，由于其执行前已经对数据进行了重新赋值，所以只要查找该订阅者对应的值就可以获取 `newVal` 了。\n\n```javascript\nWatcher.prototype.update = function () {\n  let val = this.vm;\n  let arr = this.exp.split('.');\n  arr.forEach(function (k) {\n    val = val[k];\n  })\n  this.fn(val);\n}\n```\n\n# 7. 数据的双向绑定\n\n为了实现数据的双向绑定，要点在编译模板时，去审查每个Document节点元素身上有没有挂载 `v-model` 属性，如果有，就获取其 `value`，为其添加一个订阅，来当数据更新时连带更新输入框的内容，同时添加一个监听方法，当在其内部输入时，触发绑定数据的 `set()` 方法来变更数据的值：\n\n```javascript\nfunction Compile(el, vm) {\n  ... ...\n  function replace(fragment) {\n    Array.from(fragment.childNodes).forEach(function (node) {\n      ... ...\n      if (node.nodeType === 1) {\n        let nodeAttrs = node.attributes;\n        Array.from(nodeAttrs).forEach(function (attr) {\n          let name = attr.name;\n          let exp = attr.value;\n          // 默认以 \"v-\" 开头的为 \"v-model\"\n          if (name.indexOf('v-') === 0) {\n            node.value = vm[exp];\n          }\n          new Watcher(vm, exp, function (newVal) {\n            node.value = newVal;\n          })\n          node.addEventListener('input', function (e) {\n            let newVal = e.target.value;\n            vm[exp] = newVal;\n          })\n        })\n      }\n      ... ...\n    })\n  }\n}\n```\n\n# 8. 计算属性\n\n在Vue中，计算属性可以被缓存到vm实例上：\n\n```javascript\nfunction initComputed() { // 具有缓存功能\n  let vm = this;\n  let computed = this.$options.computed;\n  // Object.keys()方法可以将一个对象的key存放在一个数组数组中\n  Object.keys(computed).forEach(function (key) {\n    Object.defineProperty(vm, key, {\n      get: computed[key]\n    })\n  })\n}\n```","source":"_posts/2019/Vue中的MVVM实现原理简析.md","raw":"---\ntitle: Vue中的MVVM实现原理简析\ntags: [Vue, 源码解析, 面试题]\ncategories:\n  - Front\n  - Vue\ndate: 2019-05-30 22:11:45\n---\n# 1. MVVM\n\nangular - 脏值检测\n\nvue - 数据劫持+发布订阅模式（不兼容低版本：因为其依赖于Object.defineProperty）\n\n总体流程图：\n\n![](http://markdown.img.esunr.xyz/vue中MVVM实现流程.png)\n\n# 2. Object.defineProperty()\n\n## 1.1 概念\n\n`Object.defineProperty()` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。定义的这个属性具有使用 `Object.defineProperty()` 为其附上的特性。\n\n语法：\n\n```\nObject.defineProperty(obj, prop, descriptor)\n```\n\n`obj`：要在其上定义属性的对象。\n\n`prop`：要定义或修改的属性的名称。\n\n`descriptor`：将被定义或修改的属性描述符。\n\n示例：\n\n```javascript\nvar obj = { age: 18 }\nObject.defineProperty(obj, 'name', {\n  value: 'esunr'\n});\n```\n\n```\n> obj\n< { age: 18, name: \"esunr\" }\n```\n\n但是当我们使用 `delete obj.school;` 是无法删除属性的，为了实现删除 `obj` 的 `school` 属性，我们需要去使用属性修饰符：\n\n```diff\n  let obj = {};\n  Object.defineProperty(obj, 'school', {\n+   configurable: true,\n    value: 'esunr'\n  });\n  delete obj.school;\n  console.log(obj);\n```\n\n但是不是使用 `Object.defineProperty()` 方法定义的对象属性，可以不受限制任意读写，如：\n\n```\n> obj.age = 19;\n< 19\n> obj\n< { age: 19, name: \"esunr\" }\n```\n\n## 1.2 属性修饰符\n\n在上面的代码中，`value`、`configurable` 都属于属性修饰符，使用 `Object.defineProperty` 时，我们要对每一个值都独立配置这些属性修饰符。\n\n**数据描述符和存取描述符均具有**以下可选键值：\n\n`configurable`\n\n当且仅当该属性的 configurable 为 true 时，该属性`描述符`才能够被改变，同时该属性也能从对应的对象上被删除。**默认为 false**。\n\n`enumerable`\n\n当且仅当该属性的`enumerable`为`true`时，该属性才能够出现在对象的枚举属性中。**默认为 false**。（默认不可使用 `for..in` 循环）\n\n**数据描述符同时具有以下可选键值**：\n\n`value`\n\n该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。**默认为 `undefined`**。\n\n`writable`\n\n当且仅当该属性的`writable`为`true`时，`value`才能被赋值运算符改变。**默认为 false**。\n\n**存取描述符同时具有以下可选键值**：\n\n## 1.3 get()与set()\n\n`get`\n\n一个给属性提供 getter 的方法，如果没有 getter 则为 `undefined`。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入`this`对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。\n\n**默认为 `undefined`**。\n\n> 存在 `get()` 时，不能存在 `value` 属性\n\n示例：\n\n```javascript\nlet obj = {};\nObject.defineProperty(obj, 'name', {\n  configurable: true,\n  get(){\n    // 获取obj.name的值时会调用get方法\n    return 'esunr'\n  }\n});\n```\n\n```\n> obj.name\n< \"esunr\"\n```\n\n`set`\n\n一个给属性提供 setter 的方法，如果没有 setter 则为 `undefined`。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。\n\n**默认为 [`undefined`]**。\n\n示例：\n\n```javascript\nlet obj = {};\nObject.defineProperty(obj, 'name', {\n  configurable: true,\n  set(val){\n    console.log(val)\n  }\n});\n```\n\n```\n> obj.name = \"xiaoming\"\n< \"xiaoming\"\n```\n\n# 3. 数据劫持\n\n在使用vue时，我们通常将这样定义一个vm实例：\n\n```javascript\nlet vm = new Vue({\n  el: 'app',\n  data: { a: 2 }\n})  \n```\n\n实际上，Vue在其内部代码中进行了一些操作：\n\n1. 将所有vm实例的配置项都转入到变量 `$options` 中\n2. 将配置项 `data` 中的数据进行劫持，存放到vm实例上的 `_data` 变量中\n\n那么进行数据劫持的这一步就是为了将用户由 `data` 传入的数据使用 `Object.defineProperty()` 方法为其每一项数据挂载一个 `get()` 和 `set()` 方法，同时如果 `data` 传入的某一项数据也是一个对象，那么也要在这个对象上面挂载 `get()` 和 `set()` 方法。\n\n![20190529151814.png](http://img.cdn.esunr.xyz/markdown/20190529151814.png)\n\n我们来实现Mvvm对象：\n\n```javascript\nfunction Mvvm(option = {}) {\n  this.$options = option; // 将所有属性挂载了$options上\n  var data = this._data = this.$options.data;\n  observe(data);\n}\n// vm.$options\n\n\n// 观察对象给对象增加 ObjectDefineProperty\nfunction Observe(data) { // 这里写我们的主要逻辑\n  for (let key in data) { // 把data属性通过object.defineProperty的方式定义属性\n    let val = data[key];\n    observe(val); // 如果val是一个对象，就使用递归再为其添加一个 get()、set()方法\n    Object.defineProperty(data, key, {\n      enumerable: true, // 可枚举\n      get() {\n        return val;\n      },\n      set(newVal) {\n        if (newVal === val) {\n          // 如果设置的值和以前一样，就不执行set操作\n          return;\n        } else {\n          val = newVal; // 如果以后再获取值的时候，将刚才设置的值再丢回去\n          observe(newVal); // 如果将数据进行重新赋值后，重新赋值的对象也要添加get()和set()\n        }\n      }\n    })\n  }\n}\n\nfunction observe(data) {\n  if(typeof data !== 'object') return;\n  return new Observe(data);\n}\n```\n\n实例化一个vm对象：\n\n```javascript\nlet vm = new Vue({\n  el: 'app',\n  data: { a: {a: 1} }\n})  \n```\n\n可以看出其数据上都挂载了一个 `get()` 方法和 `set()` 方法：\n\n![20190529155054.png](http://img.cdn.esunr.xyz/markdown/20190529155054.png)\n\n# 4. 数据代理\n\n在Vue中，我们通过 `data` 添加的数据不仅挂载到了vm实例的 `_data` 变量中，同时还挂载到了vm实例本身上，并且在我们正常的使用过程中，更多是去调用vm实例本身来获取数据，而并非 `_data` ，这时候我们就需要通过数据代理，将 `_data` 中的数据代理到vm实例上。\n\n我们新增原有的核心代码：\n\n```javascript\nfunction Mvvm(option = {}) {\n  this.$options = option;\n  var data = this._data = this.$options.data;\n  observe(data);\n  // 使用this代理_data\n  for(let key in data){\n    Object.defineProperty(this,key, {\n      enumerable: true,\n      get(){\n        return this._data[key];\n      },\n      set(newVal){\n        this._data[key] = newVal;\n      }\n    })\n  }\n}\n```\n\n实现了Vue的两个特点：\n\n1. 不能新增不存在的属性，因为新增的属性没有get和set\n\n2. 深度相应，每次赋予一个新对象时会给这个新对象增加数据劫持\n\n\n# 5. 模板编译\n\n在Vue中，我们在文档节点中使用 {% raw %} `{{}}` {% endraw %} 来将vm中的数据渲染到文档中，这就需要有一个模板编译方法来处理文档节点中的文本，来解析并且读取数据\n\n新增一个Compile对象来执行编译，其包含两个参数，一个el为MVVM模式下的文档范围，vm为MVVM实例：\n\n```javascript\nfunction Compile(el, vm) {\n  // el 表示替换的范围\n  vm.$el = document.querySelector(el);\n  let fragment = document.createDocumentFragment();\n  while (child = vm.$el.firstChild) {\n    // 将#app中的内容存放到fragment中，存放入内存等待处理\n    fragment.appendChild(child);\n  }\n\n  // 替换处理fragment中的文本内容（模拟Vue的模板引擎）\n  replace(fragment)\n\n  function replace(fragment) {\n    // Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。\n    // 遍历每个fragment中存放的节点\n    Array.from(fragment.childNodes).forEach(function (node) {\n      let text = node.textContent;\n      let reg = /\\{\\{(.*)\\}\\}/;\n      // 如果当前的节点类型是3（文本节点），就对其进行匹配处理\n      if (node.nodeType === 3 && reg.test(text)) {\n        console.log(RegExp.$1);\n        let arr = RegExp.$1.split(\".\");\n        let val = vm;\n        arr.forEach(function (k) {\n          val = val[k];\n        });\n        node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n      }\n      // 如果当前节点不是根节点，就利用递归去深度遍历其内部节点（注意：普通Element节点的根节点都为文本节点）\n      if (node.childNodes) {\n        replace(node);\n      }\n    })\n  }\n\n  // 将内存中的dom节点重新加载到页面中（不需要渲染）\n  vm.$el.appendChild(fragment);\n}\n```\n\n在核心代码中启用：\n\n```javascript\nfunction Mvvm(options = {}) {\n  ... ...\n  new Compile(options.el, this);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n# 6. 数据更新\n\n在Vue中，当vm实例上挂载的数据发生更新时，视图也会随之刷新，他们之间存在着发布订阅关系。\n\n## 6.1 发布订阅模式\n\n我们再模拟Vue数据更新机制的时候，需要设计一个发布者的构造函数（Dep）和订阅者的构造函数（Watcher）。\n\n发布者内部存放着一个订阅者队列 `subArr`，同时其原型上挂载了一个 `addSub()` 方法用来向订阅者队列中添加订阅者，还有一个 `carry()` 方法，执行该方法后，会遍历订阅者队列，执行每个订阅者身上挂载的 `update()` 方法。\n\n每个订阅者内部都传入了一个 `fn` ，是一个方法函数。同时其原型上挂载了一个 `update()` 方法，在其方法内部执行了实例化订阅者时传入的方法函数 `fn`。\n\n当发布者发布事件时，只需要调用挂载在其身上的 `carry()` 方法，就可以将所有订阅者的 `update()` 方法执行。\n\n![20190530111309.png](http://img.cdn.esunr.xyz/markdown/20190530111309.png)\n\n发布订阅模式的构造如下：\n\n```javascript\n// 1. 构造发布者\nfunction Dep() {\n  this.subArr = [];\n}\nDep.prototype.addSub = function (sub) {\n  this.subArr.push(sub);\n}\nDep.prototype.carry = function () {\n  this.subArr.forEach(sub => {\n    sub.update();\n  });\n}\n\n// 2. 构造订阅者\nfunction Watcher(fn) {\n  this.fn = fn;\n}\nWatcher.prototype.update = function () {\n  this.fn();\n}\n```\n\n## 6.2 模拟Vue中的发布订阅模式\n\n在Vue中创建一个发布订阅机制我们需要考虑以下几个问题：\n\n- 在哪里创建订阅者 （实例化一个Watcher对象）\n- 在哪里创建发布者 （实例化一个Dep对象）\n- 在哪里添加订阅 （执行发布者的 `addSub()` 方法）\n- 在哪里发布事件 （执行发布者的 `carry()` 方法）\n\n> 每一个渲染出的文本节点对应一个订阅者，一旦发生了数据更新，所有的订阅者的update方法都会被执行，也就是说所有需要解析的文本节点都会被渲染。\n\n\nVue数据更新机制的订阅者是 `Compile` 编译器，当数据发生了变更时，编译器需要对模板重新编译渲染。在编译器中，执行了模板替换的方法语句是 `node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);` ，那么我们再创建订阅者时，传入其内部的方法就是这条语句：\n\n```diff\n  function Compile(el, vm) {\n    ... ...\n\n    // 替换处理fragment中的文本内容（模拟Vue的模板引擎）\n    replace(fragment)\n\n    function replace(fragment) {\n      Array.from(fragment.childNodes).forEach(function (node) {\n        ... ...\n        if (node.nodeType === 3 && reg.test(text)) {\n          ... ...\n+         new Watcher(function () {\n+           node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n+         })\n          // 替换的逻辑\n          node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n        }\n        if (node.childNodes) {\n          ... ...\n        }\n      })\n    }\n\n    // 将内存中的dom节点重新加载到页面中（不需要渲染）\n    vm.$el.appendChild(fragment);\n  }\n```\n\n这样就达成了一个目的：在页面加载完成后实例化 `Compile` 时，在执行模板编译的过程中，为每个文本节点对象都渲染出一个订阅者实例，去观察其对应的数据是否变动，如果数据变动，就触发当前文本节点的重新渲染。\n\n我们先不讨论实例化的订阅者何时被调用挂载于其身上的 `update()` 方法，先假设一旦数据发生了变化，传入订阅者实例的方法就会被执行，即 `node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val)` 被执行。但我们会发现，内部参数 `val` 仍是一个旧值（因为Compile只执行一次，在其内部的变量val肯定是不会动态变更的）。我们在重新渲染文本节点时，需要去将旧文本替换成新文本。\n\n那么问题就是如何获取更新后的新值？\n\n我们需要改动代码，在实例化订阅者对象的时候传入三个值，`vm` 为Mvvm实例，`RegExp.$1` 是当前文本节点中匹配的原始待编译字符（也就是 {% raw %} `{{}}` {% endraw %}\n 包裹的内容），第三个参数时传入的执行函数：\n\n```diff\n- new Watcher(function () {\n-   node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);\n- })\n\n+ new Watcher(vm, RegExp.$1, function (newVal) {\n+   node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, newVal);\n+ })\n```\n\n那么传入的这些参数在构造对象 `Watcher` 中如何使用？\n\n首先我们要接受传入的参数\n\n```diff\n  function Watcher(vm, exp, fn) {\n+   this.fn = fn;\n+   this.vm = vm;\n+   this.exp = exp;\n  }\n```\n\n这时候就可以考虑如何将订阅者添加到发布者的 `subArr` 中了。\n\n首先我们要清楚实例化发布者的位置应该是在 `Observe` 中，因为其负责了构建每一个数据。所以我们可以去尝试通过访问数据对象上的 `get()` 方法，来将订阅者添加到其数据上的发布者。\n\n```diff\n  function Watcher(vm, exp, fn) {\n    this.fn = fn;\n    this.vm = vm;\n    this.exp = exp;\n+   Dep.target = this;\n+   let val = vm;\n+   let arr = exp.split('.');\n+   arr.forEach(function (k) {\n+     val = val[k];\n+   })\n+   Dep.target = null;\n  }\n```\n\n其中 `Dep.target` 是为了存放当前的订阅者对象，在数据的 `get()` 方法中将订阅者添加到发布者的 `subArr` 中。 `forEach` 是为了深度遍历，因为如果当前的数据值是一个对象，那么需要去深度查找这个值中对象的 `get()` 和 `set()` 方法。\n\n同样，当数据被重新赋值时，会调用其 `set()` 方法，所以最终我们在 `Observe` 中为数据添加 `get()` 和 `set()` 方法的代码中要加上如下额外步骤：\n\n```diff\n  function Observe(data) {\n+   let dep = new Dep();\n    for (let key in data) {\n      let val = data[key];\n      observe(val);\n      Object.defineProperty(data, key, {\n        enumerable: true,\n        get() {\n+         Dep.target && dep.addSub(Dep.target);\n          return val;\n        },\n        set(newVal) {\n          if (newVal === val) {\n            return;\n          } else {\n            val = newVal;\n            observe(newVal);\n+           dep.carry();\n          }\n        }\n      })\n    }\n  }\n```\n\n但是正如最初我们提到的，执行订阅者的 `update()` 方法去执行传入订阅者内部的函数时，需要获取新值 `newVal`，那么我们需要去更改一下 `update()` 方法，由于其执行前已经对数据进行了重新赋值，所以只要查找该订阅者对应的值就可以获取 `newVal` 了。\n\n```javascript\nWatcher.prototype.update = function () {\n  let val = this.vm;\n  let arr = this.exp.split('.');\n  arr.forEach(function (k) {\n    val = val[k];\n  })\n  this.fn(val);\n}\n```\n\n# 7. 数据的双向绑定\n\n为了实现数据的双向绑定，要点在编译模板时，去审查每个Document节点元素身上有没有挂载 `v-model` 属性，如果有，就获取其 `value`，为其添加一个订阅，来当数据更新时连带更新输入框的内容，同时添加一个监听方法，当在其内部输入时，触发绑定数据的 `set()` 方法来变更数据的值：\n\n```javascript\nfunction Compile(el, vm) {\n  ... ...\n  function replace(fragment) {\n    Array.from(fragment.childNodes).forEach(function (node) {\n      ... ...\n      if (node.nodeType === 1) {\n        let nodeAttrs = node.attributes;\n        Array.from(nodeAttrs).forEach(function (attr) {\n          let name = attr.name;\n          let exp = attr.value;\n          // 默认以 \"v-\" 开头的为 \"v-model\"\n          if (name.indexOf('v-') === 0) {\n            node.value = vm[exp];\n          }\n          new Watcher(vm, exp, function (newVal) {\n            node.value = newVal;\n          })\n          node.addEventListener('input', function (e) {\n            let newVal = e.target.value;\n            vm[exp] = newVal;\n          })\n        })\n      }\n      ... ...\n    })\n  }\n}\n```\n\n# 8. 计算属性\n\n在Vue中，计算属性可以被缓存到vm实例上：\n\n```javascript\nfunction initComputed() { // 具有缓存功能\n  let vm = this;\n  let computed = this.$options.computed;\n  // Object.keys()方法可以将一个对象的key存放在一个数组数组中\n  Object.keys(computed).forEach(function (key) {\n    Object.defineProperty(vm, key, {\n      get: computed[key]\n    })\n  })\n}\n```","slug":"Vue中的MVVM实现原理简析","published":1,"updated":"2019-11-09T14:54:15.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2roxrjg005h3w4uce1oao2b","content":"<h1 id=\"1-MVVM\"><a href=\"#1-MVVM\" class=\"headerlink\" title=\"1. MVVM\"></a>1. MVVM</h1><p>angular - 脏值检测</p>\n<p>vue - 数据劫持+发布订阅模式（不兼容低版本：因为其依赖于Object.defineProperty）</p>\n<p>总体流程图：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/vue%E4%B8%ADMVVM%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<h1 id=\"2-Object-defineProperty\"><a href=\"#2-Object-defineProperty\" class=\"headerlink\" title=\"2. Object.defineProperty()\"></a>2. Object.defineProperty()</h1><h2 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h2><p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。定义的这个属性具有使用 <code>Object.defineProperty()</code> 为其附上的特性。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p><code>obj</code>：要在其上定义属性的对象。</p>\n<p><code>prop</code>：要定义或修改的属性的名称。</p>\n<p><code>descriptor</code>：将被定义或修改的属性描述符。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">'esunr'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj</span><br><span class=\"line\">&lt; &#123; age: 18, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是当我们使用 <code>delete obj.school;</code> 是无法删除属性的，为了实现删除 <code>obj</code> 的 <code>school</code> 属性，我们需要去使用属性修饰符：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  let obj = &#123;&#125;;</span><br><span class=\"line\">  Object.defineProperty(obj, 'school', &#123;</span><br><span class=\"line\"><span class=\"addition\">+   configurable: true,</span></span><br><span class=\"line\">    value: 'esunr'</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  delete obj.school;</span><br><span class=\"line\">  console.log(obj);</span><br></pre></td></tr></table></figure>\n\n<p>但是不是使用 <code>Object.defineProperty()</code> 方法定义的对象属性，可以不受限制任意读写，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.age = 19;</span><br><span class=\"line\">&lt; 19</span><br><span class=\"line\">&gt; obj</span><br><span class=\"line\">&lt; &#123; age: 19, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-属性修饰符\"><a href=\"#1-2-属性修饰符\" class=\"headerlink\" title=\"1.2 属性修饰符\"></a>1.2 属性修饰符</h2><p>在上面的代码中，<code>value</code>、<code>configurable</code> 都属于属性修饰符，使用 <code>Object.defineProperty</code> 时，我们要对每一个值都独立配置这些属性修饰符。</p>\n<p><strong>数据描述符和存取描述符均具有</strong>以下可选键值：</p>\n<p><code>configurable</code></p>\n<p>当且仅当该属性的 configurable 为 true 时，该属性<code>描述符</code>才能够被改变，同时该属性也能从对应的对象上被删除。<strong>默认为 false</strong>。</p>\n<p><code>enumerable</code></p>\n<p>当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。<strong>默认为 false</strong>。（默认不可使用 <code>for..in</code> 循环）</p>\n<p><strong>数据描述符同时具有以下可选键值</strong>：</p>\n<p><code>value</code></p>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 <code>undefined</code></strong>。</p>\n<p><code>writable</code></p>\n<p>当且仅当该属性的<code>writable</code>为<code>true</code>时，<code>value</code>才能被赋值运算符改变。<strong>默认为 false</strong>。</p>\n<p><strong>存取描述符同时具有以下可选键值</strong>：</p>\n<h2 id=\"1-3-get-与set\"><a href=\"#1-3-get-与set\" class=\"headerlink\" title=\"1.3 get()与set()\"></a>1.3 get()与set()</h2><p><code>get</code></p>\n<p>一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入<code>this</code>对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。</p>\n<p><strong>默认为 <code>undefined</code></strong>。</p>\n<blockquote>\n<p>存在 <code>get()</code> 时，不能存在 <code>value</code> 属性</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取obj.name的值时会调用get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'esunr'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.name</span><br><span class=\"line\">&lt; &quot;esunr&quot;</span><br></pre></td></tr></table></figure>\n\n<p><code>set</code></p>\n<p>一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p>\n<p><strong>默认为 [<code>undefined</code>]</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(val)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.name = &quot;xiaoming&quot;</span><br><span class=\"line\">&lt; &quot;xiaoming&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-数据劫持\"><a href=\"#3-数据劫持\" class=\"headerlink\" title=\"3. 数据劫持\"></a>3. 数据劫持</h1><p>在使用vue时，我们通常将这样定义一个vm实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>实际上，Vue在其内部代码中进行了一些操作：</p>\n<ol>\n<li>将所有vm实例的配置项都转入到变量 <code>$options</code> 中</li>\n<li>将配置项 <code>data</code> 中的数据进行劫持，存放到vm实例上的 <code>_data</code> 变量中</li>\n</ol>\n<p>那么进行数据劫持的这一步就是为了将用户由 <code>data</code> 传入的数据使用 <code>Object.defineProperty()</code> 方法为其每一项数据挂载一个 <code>get()</code> 和 <code>set()</code> 方法，同时如果 <code>data</code> 传入的某一项数据也是一个对象，那么也要在这个对象上面挂载 <code>get()</code> 和 <code>set()</code> 方法。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190529151814.png\" alt=\"20190529151814.png\"></p>\n<p>我们来实现Mvvm对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">option = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = option; <span class=\"comment\">// 将所有属性挂载了$options上</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  observe(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// vm.$options</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察对象给对象增加 ObjectDefineProperty</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observe</span>(<span class=\"params\">data</span>) </span>&#123; <span class=\"comment\">// 这里写我们的主要逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123; <span class=\"comment\">// 把data属性通过object.defineProperty的方式定义属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = data[key];</span><br><span class=\"line\">    observe(val); <span class=\"comment\">// 如果val是一个对象，就使用递归再为其添加一个 get()、set()方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">      <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果设置的值和以前一样，就不执行set操作</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          val = newVal; <span class=\"comment\">// 如果以后再获取值的时候，将刚才设置的值再丢回去</span></span><br><span class=\"line\">          observe(newVal); <span class=\"comment\">// 如果将数据进行重新赋值后，重新赋值的对象也要添加get()和set()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observe(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例化一个vm对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125; &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以看出其数据上都挂载了一个 <code>get()</code> 方法和 <code>set()</code> 方法：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190529155054.png\" alt=\"20190529155054.png\"></p>\n<h1 id=\"4-数据代理\"><a href=\"#4-数据代理\" class=\"headerlink\" title=\"4. 数据代理\"></a>4. 数据代理</h1><p>在Vue中，我们通过 <code>data</code> 添加的数据不仅挂载到了vm实例的 <code>_data</code> 变量中，同时还挂载到了vm实例本身上，并且在我们正常的使用过程中，更多是去调用vm实例本身来获取数据，而并非 <code>_data</code> ，这时候我们就需要通过数据代理，将 <code>_data</code> 中的数据代理到vm实例上。</p>\n<p>我们新增原有的核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">option = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = option;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  observe(data);</span><br><span class=\"line\">  <span class=\"comment\">// 使用this代理_data</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._data[key];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(newVal)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._data[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现了Vue的两个特点：</p>\n<ol>\n<li><p>不能新增不存在的属性，因为新增的属性没有get和set</p>\n</li>\n<li><p>深度相应，每次赋予一个新对象时会给这个新对象增加数据劫持</p>\n</li>\n</ol>\n<h1 id=\"5-模板编译\"><a href=\"#5-模板编译\" class=\"headerlink\" title=\"5. 模板编译\"></a>5. 模板编译</h1><p>在Vue中，我们在文档节点中使用  `{{}}`  来将vm中的数据渲染到文档中，这就需要有一个模板编译方法来处理文档节点中的文本，来解析并且读取数据</p>\n<p>新增一个Compile对象来执行编译，其包含两个参数，一个el为MVVM模式下的文档范围，vm为MVVM实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// el 表示替换的范围</span></span><br><span class=\"line\">  vm.$el = <span class=\"built_in\">document</span>.querySelector(el);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (child = vm.$el.firstChild) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将#app中的内容存放到fragment中，存放入内存等待处理</span></span><br><span class=\"line\">    fragment.appendChild(child);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span></span><br><span class=\"line\">  replace(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span>(<span class=\"params\">fragment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个fragment中存放的节点</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(fragment.childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> text = node.textContent;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前的节点类型是3（文本节点），就对其进行匹配处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.nodeType === <span class=\"number\">3</span> &amp;&amp; reg.test(text)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = vm;</span><br><span class=\"line\">        arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">          val = val[k];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        node.textContent = text.replace(<span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>, val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不是根节点，就利用递归去深度遍历其内部节点（注意：普通Element节点的根节点都为文本节点）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.childNodes) &#123;</span><br><span class=\"line\">        replace(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将内存中的dom节点重新加载到页面中（不需要渲染）</span></span><br><span class=\"line\">  vm.$el.appendChild(fragment);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在核心代码中启用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Compile(options.el, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"6-数据更新\"><a href=\"#6-数据更新\" class=\"headerlink\" title=\"6. 数据更新\"></a>6. 数据更新</h1><p>在Vue中，当vm实例上挂载的数据发生更新时，视图也会随之刷新，他们之间存在着发布订阅关系。</p>\n<h2 id=\"6-1-发布订阅模式\"><a href=\"#6-1-发布订阅模式\" class=\"headerlink\" title=\"6.1 发布订阅模式\"></a>6.1 发布订阅模式</h2><p>我们再模拟Vue数据更新机制的时候，需要设计一个发布者的构造函数（Dep）和订阅者的构造函数（Watcher）。</p>\n<p>发布者内部存放着一个订阅者队列 <code>subArr</code>，同时其原型上挂载了一个 <code>addSub()</code> 方法用来向订阅者队列中添加订阅者，还有一个 <code>carry()</code> 方法，执行该方法后，会遍历订阅者队列，执行每个订阅者身上挂载的 <code>update()</code> 方法。</p>\n<p>每个订阅者内部都传入了一个 <code>fn</code> ，是一个方法函数。同时其原型上挂载了一个 <code>update()</code> 方法，在其方法内部执行了实例化订阅者时传入的方法函数 <code>fn</code>。</p>\n<p>当发布者发布事件时，只需要调用挂载在其身上的 <code>carry()</code> 方法，就可以将所有订阅者的 <code>update()</code> 方法执行。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190530111309.png\" alt=\"20190530111309.png\"></p>\n<p>发布订阅模式的构造如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 构造发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype.addSub = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr.push(sub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype.carry = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">    sub.update();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 构造订阅者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-模拟Vue中的发布订阅模式\"><a href=\"#6-2-模拟Vue中的发布订阅模式\" class=\"headerlink\" title=\"6.2 模拟Vue中的发布订阅模式\"></a>6.2 模拟Vue中的发布订阅模式</h2><p>在Vue中创建一个发布订阅机制我们需要考虑以下几个问题：</p>\n<ul>\n<li>在哪里创建订阅者 （实例化一个Watcher对象）</li>\n<li>在哪里创建发布者 （实例化一个Dep对象）</li>\n<li>在哪里添加订阅 （执行发布者的 <code>addSub()</code> 方法）</li>\n<li>在哪里发布事件 （执行发布者的 <code>carry()</code> 方法）</li>\n</ul>\n<blockquote>\n<p>每一个渲染出的文本节点对应一个订阅者，一旦发生了数据更新，所有的订阅者的update方法都会被执行，也就是说所有需要解析的文本节点都会被渲染。</p>\n</blockquote>\n<p>Vue数据更新机制的订阅者是 <code>Compile</code> 编译器，当数据发生了变更时，编译器需要对模板重新编译渲染。在编译器中，执行了模板替换的方法语句是 <code>node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);</code> ，那么我们再创建订阅者时，传入其内部的方法就是这条语句：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Compile(el, vm) &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">    // 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span><br><span class=\"line\">    replace(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">    function replace(fragment) &#123;</span><br><span class=\"line\">      Array.from(fragment.childNodes).forEach(function (node) &#123;</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        if (node.nodeType <span class=\"comment\">=== 3 &amp;&amp; reg.test(text)) &#123;</span></span><br><span class=\"line\">          ... ...</span><br><span class=\"line\"><span class=\"addition\">+         new Watcher(function () &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span></span><br><span class=\"line\"><span class=\"addition\">+         &#125;)</span></span><br><span class=\"line\">          // 替换的逻辑</span><br><span class=\"line\">          node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (node.childNodes) &#123;</span><br><span class=\"line\">          ... ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将内存中的dom节点重新加载到页面中（不需要渲染）</span><br><span class=\"line\">    vm.$el.appendChild(fragment);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就达成了一个目的：在页面加载完成后实例化 <code>Compile</code> 时，在执行模板编译的过程中，为每个文本节点对象都渲染出一个订阅者实例，去观察其对应的数据是否变动，如果数据变动，就触发当前文本节点的重新渲染。</p>\n<p>我们先不讨论实例化的订阅者何时被调用挂载于其身上的 <code>update()</code> 方法，先假设一旦数据发生了变化，传入订阅者实例的方法就会被执行，即 <code>node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val)</code> 被执行。但我们会发现，内部参数 <code>val</code> 仍是一个旧值（因为Compile只执行一次，在其内部的变量val肯定是不会动态变更的）。我们在重新渲染文本节点时，需要去将旧文本替换成新文本。</p>\n<p>那么问题就是如何获取更新后的新值？</p>\n<p>我们需要改动代码，在实例化订阅者对象的时候传入三个值，<code>vm</code> 为Mvvm实例，<code>RegExp.$1</code> 是当前文本节点中匹配的原始待编译字符（也就是  `{{}}` <br> 包裹的内容），第三个参数时传入的执行函数：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- new Watcher(function () &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ new Watcher(vm, RegExp.$1, function (newVal) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, newVal);</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>那么传入的这些参数在构造对象 <code>Watcher</code> 中如何使用？</p>\n<p>首先我们要接受传入的参数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Watcher(vm, exp, fn) &#123;</span><br><span class=\"line\"><span class=\"addition\">+   this.fn = fn;</span></span><br><span class=\"line\"><span class=\"addition\">+   this.vm = vm;</span></span><br><span class=\"line\"><span class=\"addition\">+   this.exp = exp;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候就可以考虑如何将订阅者添加到发布者的 <code>subArr</code> 中了。</p>\n<p>首先我们要清楚实例化发布者的位置应该是在 <code>Observe</code> 中，因为其负责了构建每一个数据。所以我们可以去尝试通过访问数据对象上的 <code>get()</code> 方法，来将订阅者添加到其数据上的发布者。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Watcher(vm, exp, fn) &#123;</span><br><span class=\"line\">    this.fn = fn;</span><br><span class=\"line\">    this.vm = vm;</span><br><span class=\"line\">    this.exp = exp;</span><br><span class=\"line\"><span class=\"addition\">+   Dep.target = this;</span></span><br><span class=\"line\"><span class=\"addition\">+   let val = vm;</span></span><br><span class=\"line\"><span class=\"addition\">+   let arr = exp.split('.');</span></span><br><span class=\"line\"><span class=\"addition\">+   arr.forEach(function (k) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     val = val[k];</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   Dep.target = null;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>Dep.target</code> 是为了存放当前的订阅者对象，在数据的 <code>get()</code> 方法中将订阅者添加到发布者的 <code>subArr</code> 中。 <code>forEach</code> 是为了深度遍历，因为如果当前的数据值是一个对象，那么需要去深度查找这个值中对象的 <code>get()</code> 和 <code>set()</code> 方法。</p>\n<p>同样，当数据被重新赋值时，会调用其 <code>set()</code> 方法，所以最终我们在 <code>Observe</code> 中为数据添加 <code>get()</code> 和 <code>set()</code> 方法的代码中要加上如下额外步骤：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Observe(data) &#123;</span><br><span class=\"line\"><span class=\"addition\">+   let dep = new Dep();</span></span><br><span class=\"line\">    for (let key in data) &#123;</span><br><span class=\"line\">      let val = data[key];</span><br><span class=\"line\">      observe(val);</span><br><span class=\"line\">      Object.defineProperty(data, key, &#123;</span><br><span class=\"line\">        enumerable: true,</span><br><span class=\"line\">        get() &#123;</span><br><span class=\"line\"><span class=\"addition\">+         Dep.target &amp;&amp; dep.addSub(Dep.target);</span></span><br><span class=\"line\">          return val;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set(newVal) &#123;</span><br><span class=\"line\">          if (newVal <span class=\"comment\">=== val) &#123;</span></span><br><span class=\"line\">            return;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            val = newVal;</span><br><span class=\"line\">            observe(newVal);</span><br><span class=\"line\"><span class=\"addition\">+           dep.carry();</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是正如最初我们提到的，执行订阅者的 <code>update()</code> 方法去执行传入订阅者内部的函数时，需要获取新值 <code>newVal</code>，那么我们需要去更改一下 <code>update()</code> 方法，由于其执行前已经对数据进行了重新赋值，所以只要查找该订阅者对应的值就可以获取 <code>newVal</code> 了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = <span class=\"keyword\">this</span>.exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">    val = val[k];</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-数据的双向绑定\"><a href=\"#7-数据的双向绑定\" class=\"headerlink\" title=\"7. 数据的双向绑定\"></a>7. 数据的双向绑定</h1><p>为了实现数据的双向绑定，要点在编译模板时，去审查每个Document节点元素身上有没有挂载 <code>v-model</code> 属性，如果有，就获取其 <code>value</code>，为其添加一个订阅，来当数据更新时连带更新输入框的内容，同时添加一个监听方法，当在其内部输入时，触发绑定数据的 <code>set()</code> 方法来变更数据的值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span>(<span class=\"params\">fragment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(fragment.childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.nodeType === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nodeAttrs = node.attributes;</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.from(nodeAttrs).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> name = attr.name;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> exp = attr.value;</span><br><span class=\"line\">          <span class=\"comment\">// 默认以 \"v-\" 开头的为 \"v-model\"</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">'v-'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            node.value = vm[exp];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">new</span> Watcher(vm, exp, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            node.value = newVal;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newVal = e.target.value;</span><br><span class=\"line\">            vm[exp] = newVal;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h1><p>在Vue中，计算属性可以被缓存到vm实例上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 具有缓存功能</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> computed = <span class=\"keyword\">this</span>.$options.computed;</span><br><span class=\"line\">  <span class=\"comment\">// Object.keys()方法可以将一个对象的key存放在一个数组数组中</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(computed).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>: computed[key]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#03A9F4","paginator":"#03A9F4","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"搜索相关的文章","hits_empty":"对不起，没有找到相关文章: ${query}","hits_stats":"${hits} 搜索耗时 ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"搜索关键字","hits_empty":"找不到对应的文章: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://img.cdn.esunr.xyz/github_avatar.jpeg","top_img":"http://img.cdn.esunr.xyz/aeb2048ff782b9dc4d1bbf2870b38581..jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":true,"shortname":"esunr-blog","count":true},"since":2017,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":false,"url":"https://github.com/EsunR","text":"Github"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"EsunR-Blog","subtitle":"不忘初心， 一生浪漫","description":"永存谦卑，永持敬畏","author":"EsunR","language":"zh","timezone":"Asia/Shanghai","url":"https://esunr.github.io","root":"/","permalink":":year/:month/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":year/:title","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:EsunR/esunr.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":["EsunR","Blog","博客"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"1-MVVM\"><a href=\"#1-MVVM\" class=\"headerlink\" title=\"1. MVVM\"></a>1. MVVM</h1><p>angular - 脏值检测</p>\n<p>vue - 数据劫持+发布订阅模式（不兼容低版本：因为其依赖于Object.defineProperty）</p>\n<p>总体流程图：</p>\n<p><img src=\"http://markdown.img.esunr.xyz/vue%E4%B8%ADMVVM%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<h1 id=\"2-Object-defineProperty\"><a href=\"#2-Object-defineProperty\" class=\"headerlink\" title=\"2. Object.defineProperty()\"></a>2. Object.defineProperty()</h1><h2 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h2><p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。定义的这个属性具有使用 <code>Object.defineProperty()</code> 为其附上的特性。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p><code>obj</code>：要在其上定义属性的对象。</p>\n<p><code>prop</code>：要定义或修改的属性的名称。</p>\n<p><code>descriptor</code>：将被定义或修改的属性描述符。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">'esunr'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj</span><br><span class=\"line\">&lt; &#123; age: 18, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是当我们使用 <code>delete obj.school;</code> 是无法删除属性的，为了实现删除 <code>obj</code> 的 <code>school</code> 属性，我们需要去使用属性修饰符：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  let obj = &#123;&#125;;</span><br><span class=\"line\">  Object.defineProperty(obj, 'school', &#123;</span><br><span class=\"line\"><span class=\"addition\">+   configurable: true,</span></span><br><span class=\"line\">    value: 'esunr'</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  delete obj.school;</span><br><span class=\"line\">  console.log(obj);</span><br></pre></td></tr></table></figure>\n\n<p>但是不是使用 <code>Object.defineProperty()</code> 方法定义的对象属性，可以不受限制任意读写，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.age = 19;</span><br><span class=\"line\">&lt; 19</span><br><span class=\"line\">&gt; obj</span><br><span class=\"line\">&lt; &#123; age: 19, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-属性修饰符\"><a href=\"#1-2-属性修饰符\" class=\"headerlink\" title=\"1.2 属性修饰符\"></a>1.2 属性修饰符</h2><p>在上面的代码中，<code>value</code>、<code>configurable</code> 都属于属性修饰符，使用 <code>Object.defineProperty</code> 时，我们要对每一个值都独立配置这些属性修饰符。</p>\n<p><strong>数据描述符和存取描述符均具有</strong>以下可选键值：</p>\n<p><code>configurable</code></p>\n<p>当且仅当该属性的 configurable 为 true 时，该属性<code>描述符</code>才能够被改变，同时该属性也能从对应的对象上被删除。<strong>默认为 false</strong>。</p>\n<p><code>enumerable</code></p>\n<p>当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。<strong>默认为 false</strong>。（默认不可使用 <code>for..in</code> 循环）</p>\n<p><strong>数据描述符同时具有以下可选键值</strong>：</p>\n<p><code>value</code></p>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 <code>undefined</code></strong>。</p>\n<p><code>writable</code></p>\n<p>当且仅当该属性的<code>writable</code>为<code>true</code>时，<code>value</code>才能被赋值运算符改变。<strong>默认为 false</strong>。</p>\n<p><strong>存取描述符同时具有以下可选键值</strong>：</p>\n<h2 id=\"1-3-get-与set\"><a href=\"#1-3-get-与set\" class=\"headerlink\" title=\"1.3 get()与set()\"></a>1.3 get()与set()</h2><p><code>get</code></p>\n<p>一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入<code>this</code>对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。</p>\n<p><strong>默认为 <code>undefined</code></strong>。</p>\n<blockquote>\n<p>存在 <code>get()</code> 时，不能存在 <code>value</code> 属性</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取obj.name的值时会调用get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'esunr'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.name</span><br><span class=\"line\">&lt; &quot;esunr&quot;</span><br></pre></td></tr></table></figure>\n\n<p><code>set</code></p>\n<p>一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p>\n<p><strong>默认为 [<code>undefined</code>]</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(val)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; obj.name = &quot;xiaoming&quot;</span><br><span class=\"line\">&lt; &quot;xiaoming&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-数据劫持\"><a href=\"#3-数据劫持\" class=\"headerlink\" title=\"3. 数据劫持\"></a>3. 数据劫持</h1><p>在使用vue时，我们通常将这样定义一个vm实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>实际上，Vue在其内部代码中进行了一些操作：</p>\n<ol>\n<li>将所有vm实例的配置项都转入到变量 <code>$options</code> 中</li>\n<li>将配置项 <code>data</code> 中的数据进行劫持，存放到vm实例上的 <code>_data</code> 变量中</li>\n</ol>\n<p>那么进行数据劫持的这一步就是为了将用户由 <code>data</code> 传入的数据使用 <code>Object.defineProperty()</code> 方法为其每一项数据挂载一个 <code>get()</code> 和 <code>set()</code> 方法，同时如果 <code>data</code> 传入的某一项数据也是一个对象，那么也要在这个对象上面挂载 <code>get()</code> 和 <code>set()</code> 方法。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190529151814.png\" alt=\"20190529151814.png\"></p>\n<p>我们来实现Mvvm对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">option = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = option; <span class=\"comment\">// 将所有属性挂载了$options上</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  observe(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// vm.$options</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察对象给对象增加 ObjectDefineProperty</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observe</span>(<span class=\"params\">data</span>) </span>&#123; <span class=\"comment\">// 这里写我们的主要逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123; <span class=\"comment\">// 把data属性通过object.defineProperty的方式定义属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = data[key];</span><br><span class=\"line\">    observe(val); <span class=\"comment\">// 如果val是一个对象，就使用递归再为其添加一个 get()、set()方法</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">      <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果设置的值和以前一样，就不执行set操作</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          val = newVal; <span class=\"comment\">// 如果以后再获取值的时候，将刚才设置的值再丢回去</span></span><br><span class=\"line\">          observe(newVal); <span class=\"comment\">// 如果将数据进行重新赋值后，重新赋值的对象也要添加get()和set()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observe(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例化一个vm对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125; &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以看出其数据上都挂载了一个 <code>get()</code> 方法和 <code>set()</code> 方法：</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190529155054.png\" alt=\"20190529155054.png\"></p>\n<h1 id=\"4-数据代理\"><a href=\"#4-数据代理\" class=\"headerlink\" title=\"4. 数据代理\"></a>4. 数据代理</h1><p>在Vue中，我们通过 <code>data</code> 添加的数据不仅挂载到了vm实例的 <code>_data</code> 变量中，同时还挂载到了vm实例本身上，并且在我们正常的使用过程中，更多是去调用vm实例本身来获取数据，而并非 <code>_data</code> ，这时候我们就需要通过数据代理，将 <code>_data</code> 中的数据代理到vm实例上。</p>\n<p>我们新增原有的核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">option = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$options = option;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data;</span><br><span class=\"line\">  observe(data);</span><br><span class=\"line\">  <span class=\"comment\">// 使用this代理_data</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,key, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._data[key];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(newVal)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._data[key] = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现了Vue的两个特点：</p>\n<ol>\n<li><p>不能新增不存在的属性，因为新增的属性没有get和set</p>\n</li>\n<li><p>深度相应，每次赋予一个新对象时会给这个新对象增加数据劫持</p>\n</li>\n</ol>\n<h1 id=\"5-模板编译\"><a href=\"#5-模板编译\" class=\"headerlink\" title=\"5. 模板编译\"></a>5. 模板编译</h1><p>在Vue中，我们在文档节点中使用  `{{}}`  来将vm中的数据渲染到文档中，这就需要有一个模板编译方法来处理文档节点中的文本，来解析并且读取数据</p>\n<p>新增一个Compile对象来执行编译，其包含两个参数，一个el为MVVM模式下的文档范围，vm为MVVM实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// el 表示替换的范围</span></span><br><span class=\"line\">  vm.$el = <span class=\"built_in\">document</span>.querySelector(el);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (child = vm.$el.firstChild) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将#app中的内容存放到fragment中，存放入内存等待处理</span></span><br><span class=\"line\">    fragment.appendChild(child);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span></span><br><span class=\"line\">  replace(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span>(<span class=\"params\">fragment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个fragment中存放的节点</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(fragment.childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> text = node.textContent;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前的节点类型是3（文本节点），就对其进行匹配处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.nodeType === <span class=\"number\">3</span> &amp;&amp; reg.test(text)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = vm;</span><br><span class=\"line\">        arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">          val = val[k];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        node.textContent = text.replace(<span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>, val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前节点不是根节点，就利用递归去深度遍历其内部节点（注意：普通Element节点的根节点都为文本节点）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.childNodes) &#123;</span><br><span class=\"line\">        replace(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将内存中的dom节点重新加载到页面中（不需要渲染）</span></span><br><span class=\"line\">  vm.$el.appendChild(fragment);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在核心代码中启用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mvvm</span>(<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Compile(options.el, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"6-数据更新\"><a href=\"#6-数据更新\" class=\"headerlink\" title=\"6. 数据更新\"></a>6. 数据更新</h1><p>在Vue中，当vm实例上挂载的数据发生更新时，视图也会随之刷新，他们之间存在着发布订阅关系。</p>\n<h2 id=\"6-1-发布订阅模式\"><a href=\"#6-1-发布订阅模式\" class=\"headerlink\" title=\"6.1 发布订阅模式\"></a>6.1 发布订阅模式</h2><p>我们再模拟Vue数据更新机制的时候，需要设计一个发布者的构造函数（Dep）和订阅者的构造函数（Watcher）。</p>\n<p>发布者内部存放着一个订阅者队列 <code>subArr</code>，同时其原型上挂载了一个 <code>addSub()</code> 方法用来向订阅者队列中添加订阅者，还有一个 <code>carry()</code> 方法，执行该方法后，会遍历订阅者队列，执行每个订阅者身上挂载的 <code>update()</code> 方法。</p>\n<p>每个订阅者内部都传入了一个 <code>fn</code> ，是一个方法函数。同时其原型上挂载了一个 <code>update()</code> 方法，在其方法内部执行了实例化订阅者时传入的方法函数 <code>fn</code>。</p>\n<p>当发布者发布事件时，只需要调用挂载在其身上的 <code>carry()</code> 方法，就可以将所有订阅者的 <code>update()</code> 方法执行。</p>\n<p><img src=\"http://img.cdn.esunr.xyz/markdown/20190530111309.png\" alt=\"20190530111309.png\"></p>\n<p>发布订阅模式的构造如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 构造发布者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype.addSub = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr.push(sub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.prototype.carry = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subArr.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">    sub.update();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 构造订阅者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-模拟Vue中的发布订阅模式\"><a href=\"#6-2-模拟Vue中的发布订阅模式\" class=\"headerlink\" title=\"6.2 模拟Vue中的发布订阅模式\"></a>6.2 模拟Vue中的发布订阅模式</h2><p>在Vue中创建一个发布订阅机制我们需要考虑以下几个问题：</p>\n<ul>\n<li>在哪里创建订阅者 （实例化一个Watcher对象）</li>\n<li>在哪里创建发布者 （实例化一个Dep对象）</li>\n<li>在哪里添加订阅 （执行发布者的 <code>addSub()</code> 方法）</li>\n<li>在哪里发布事件 （执行发布者的 <code>carry()</code> 方法）</li>\n</ul>\n<blockquote>\n<p>每一个渲染出的文本节点对应一个订阅者，一旦发生了数据更新，所有的订阅者的update方法都会被执行，也就是说所有需要解析的文本节点都会被渲染。</p>\n</blockquote>\n<p>Vue数据更新机制的订阅者是 <code>Compile</code> 编译器，当数据发生了变更时，编译器需要对模板重新编译渲染。在编译器中，执行了模板替换的方法语句是 <code>node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val);</code> ，那么我们再创建订阅者时，传入其内部的方法就是这条语句：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Compile(el, vm) &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">    // 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span><br><span class=\"line\">    replace(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">    function replace(fragment) &#123;</span><br><span class=\"line\">      Array.from(fragment.childNodes).forEach(function (node) &#123;</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        if (node.nodeType <span class=\"comment\">=== 3 &amp;&amp; reg.test(text)) &#123;</span></span><br><span class=\"line\">          ... ...</span><br><span class=\"line\"><span class=\"addition\">+         new Watcher(function () &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+           node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span></span><br><span class=\"line\"><span class=\"addition\">+         &#125;)</span></span><br><span class=\"line\">          // 替换的逻辑</span><br><span class=\"line\">          node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (node.childNodes) &#123;</span><br><span class=\"line\">          ... ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将内存中的dom节点重新加载到页面中（不需要渲染）</span><br><span class=\"line\">    vm.$el.appendChild(fragment);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就达成了一个目的：在页面加载完成后实例化 <code>Compile</code> 时，在执行模板编译的过程中，为每个文本节点对象都渲染出一个订阅者实例，去观察其对应的数据是否变动，如果数据变动，就触发当前文本节点的重新渲染。</p>\n<p>我们先不讨论实例化的订阅者何时被调用挂载于其身上的 <code>update()</code> 方法，先假设一旦数据发生了变化，传入订阅者实例的方法就会被执行，即 <code>node.textContent = text.replace(/\\{\\{(.*)\\}\\}/, val)</code> 被执行。但我们会发现，内部参数 <code>val</code> 仍是一个旧值（因为Compile只执行一次，在其内部的变量val肯定是不会动态变更的）。我们在重新渲染文本节点时，需要去将旧文本替换成新文本。</p>\n<p>那么问题就是如何获取更新后的新值？</p>\n<p>我们需要改动代码，在实例化订阅者对象的时候传入三个值，<code>vm</code> 为Mvvm实例，<code>RegExp.$1</code> 是当前文本节点中匹配的原始待编译字符（也就是  `{{}}` <br> 包裹的内容），第三个参数时传入的执行函数：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- new Watcher(function () &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-   node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, val);</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ new Watcher(vm, RegExp.$1, function (newVal) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   node.textContent = text.replace(/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/, newVal);</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>那么传入的这些参数在构造对象 <code>Watcher</code> 中如何使用？</p>\n<p>首先我们要接受传入的参数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Watcher(vm, exp, fn) &#123;</span><br><span class=\"line\"><span class=\"addition\">+   this.fn = fn;</span></span><br><span class=\"line\"><span class=\"addition\">+   this.vm = vm;</span></span><br><span class=\"line\"><span class=\"addition\">+   this.exp = exp;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候就可以考虑如何将订阅者添加到发布者的 <code>subArr</code> 中了。</p>\n<p>首先我们要清楚实例化发布者的位置应该是在 <code>Observe</code> 中，因为其负责了构建每一个数据。所以我们可以去尝试通过访问数据对象上的 <code>get()</code> 方法，来将订阅者添加到其数据上的发布者。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Watcher(vm, exp, fn) &#123;</span><br><span class=\"line\">    this.fn = fn;</span><br><span class=\"line\">    this.vm = vm;</span><br><span class=\"line\">    this.exp = exp;</span><br><span class=\"line\"><span class=\"addition\">+   Dep.target = this;</span></span><br><span class=\"line\"><span class=\"addition\">+   let val = vm;</span></span><br><span class=\"line\"><span class=\"addition\">+   let arr = exp.split('.');</span></span><br><span class=\"line\"><span class=\"addition\">+   arr.forEach(function (k) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     val = val[k];</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;)</span></span><br><span class=\"line\"><span class=\"addition\">+   Dep.target = null;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>Dep.target</code> 是为了存放当前的订阅者对象，在数据的 <code>get()</code> 方法中将订阅者添加到发布者的 <code>subArr</code> 中。 <code>forEach</code> 是为了深度遍历，因为如果当前的数据值是一个对象，那么需要去深度查找这个值中对象的 <code>get()</code> 和 <code>set()</code> 方法。</p>\n<p>同样，当数据被重新赋值时，会调用其 <code>set()</code> 方法，所以最终我们在 <code>Observe</code> 中为数据添加 <code>get()</code> 和 <code>set()</code> 方法的代码中要加上如下额外步骤：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  function Observe(data) &#123;</span><br><span class=\"line\"><span class=\"addition\">+   let dep = new Dep();</span></span><br><span class=\"line\">    for (let key in data) &#123;</span><br><span class=\"line\">      let val = data[key];</span><br><span class=\"line\">      observe(val);</span><br><span class=\"line\">      Object.defineProperty(data, key, &#123;</span><br><span class=\"line\">        enumerable: true,</span><br><span class=\"line\">        get() &#123;</span><br><span class=\"line\"><span class=\"addition\">+         Dep.target &amp;&amp; dep.addSub(Dep.target);</span></span><br><span class=\"line\">          return val;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set(newVal) &#123;</span><br><span class=\"line\">          if (newVal <span class=\"comment\">=== val) &#123;</span></span><br><span class=\"line\">            return;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            val = newVal;</span><br><span class=\"line\">            observe(newVal);</span><br><span class=\"line\"><span class=\"addition\">+           dep.carry();</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是正如最初我们提到的，执行订阅者的 <code>update()</code> 方法去执行传入订阅者内部的函数时，需要获取新值 <code>newVal</code>，那么我们需要去更改一下 <code>update()</code> 方法，由于其执行前已经对数据进行了重新赋值，所以只要查找该订阅者对应的值就可以获取 <code>newVal</code> 了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = <span class=\"keyword\">this</span>.exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">    val = val[k];</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fn(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-数据的双向绑定\"><a href=\"#7-数据的双向绑定\" class=\"headerlink\" title=\"7. 数据的双向绑定\"></a>7. 数据的双向绑定</h1><p>为了实现数据的双向绑定，要点在编译模板时，去审查每个Document节点元素身上有没有挂载 <code>v-model</code> 属性，如果有，就获取其 <code>value</code>，为其添加一个订阅，来当数据更新时连带更新输入框的内容，同时添加一个监听方法，当在其内部输入时，触发绑定数据的 <code>set()</code> 方法来变更数据的值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">el, vm</span>) </span>&#123;</span><br><span class=\"line\">  ... ...</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span>(<span class=\"params\">fragment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.from(fragment.childNodes).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.nodeType === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nodeAttrs = node.attributes;</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.from(nodeAttrs).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> name = attr.name;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> exp = attr.value;</span><br><span class=\"line\">          <span class=\"comment\">// 默认以 \"v-\" 开头的为 \"v-model\"</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">'v-'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            node.value = vm[exp];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">new</span> Watcher(vm, exp, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            node.value = newVal;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newVal = e.target.value;</span><br><span class=\"line\">            vm[exp] = newVal;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ... ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h1><p>在Vue中，计算属性可以被缓存到vm实例上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initComputed</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 具有缓存功能</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> computed = <span class=\"keyword\">this</span>.$options.computed;</span><br><span class=\"line\">  <span class=\"comment\">// Object.keys()方法可以将一个对象的key存放在一个数组数组中</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(computed).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>: computed[key]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2roxrdl00023w4udji60myh","category_id":"ck2roxrdq00043w4u79lw2ymk","_id":"ck2roxrdz000e3w4u7zik04w6"},{"post_id":"ck2roxrdp00033w4u1jd00t59","category_id":"ck2roxrdw00093w4u942ecnge","_id":"ck2roxre3000k3w4u2bpr2kfx"},{"post_id":"ck2roxrej00193w4ucao81yb1","category_id":"ck2roxrdq00043w4u79lw2ymk","_id":"ck2roxrem001g3w4u7xhz04v5"},{"post_id":"ck2roxre0000h3w4u786v4jwh","category_id":"ck2roxrei00173w4u1x1y898b","_id":"ck2roxrem001i3w4ugcdo0mto"},{"post_id":"ck2roxrds00063w4u0ct82zs2","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxren001n3w4uergz3lzx"},{"post_id":"ck2roxrds00063w4u0ct82zs2","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxreo001q3w4u4flbh59b"},{"post_id":"ck2roxre2000j3w4ubdub29ri","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrep001s3w4uausi7osp"},{"post_id":"ck2roxre2000j3w4ubdub29ri","category_id":"ck2roxren001j3w4ufwl230ms","_id":"ck2roxrep001u3w4u8s706gt8"},{"post_id":"ck2roxre5000n3w4udidy7dra","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrep001w3w4uejykbns3"},{"post_id":"ck2roxre5000n3w4udidy7dra","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxreq001z3w4ubjx8c5mg"},{"post_id":"ck2roxrdu00073w4ufuft0a3c","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxreq00223w4ug4ja9lwa"},{"post_id":"ck2roxrdu00073w4ufuft0a3c","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrer00243w4u894u6rgz"},{"post_id":"ck2roxre8000o3w4ugk6n80kn","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxres00273w4u22mvdthh"},{"post_id":"ck2roxre8000o3w4ugk6n80kn","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxret00293w4u7thobmct"},{"post_id":"ck2roxrdv00083w4ugv70e1nb","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxreu002e3w4u64sz3zus"},{"post_id":"ck2roxrdv00083w4ugv70e1nb","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrev002h3w4ucv3ba4z9"},{"post_id":"ck2roxreb000u3w4u8zno6ybm","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrew002k3w4u1fi2eqsi"},{"post_id":"ck2roxreb000u3w4u8zno6ybm","category_id":"ck2roxret002b3w4u87kx21pk","_id":"ck2roxrew002l3w4u7cakhmne"},{"post_id":"ck2roxred000y3w4u8g0f8i10","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrex002o3w4u5q8kdkkj"},{"post_id":"ck2roxred000y3w4u8g0f8i10","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxrex002q3w4ufp96akb4"},{"post_id":"ck2roxrdx000c3w4uh4xla36o","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrey002t3w4u47z35ay5"},{"post_id":"ck2roxrdx000c3w4uh4xla36o","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrey002w3w4uhp901qka"},{"post_id":"ck2roxree00103w4u4rcpc2vz","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrez002z3w4ucfa062k6"},{"post_id":"ck2roxree00103w4u4rcpc2vz","category_id":"ck2roxrew002n3w4ubreya2jo","_id":"ck2roxrf000313w4uffl97hn3"},{"post_id":"ck2roxref00133w4ucnch0o8b","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrf000343w4u0eo51eb3"},{"post_id":"ck2roxref00133w4ucnch0o8b","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxrf100363w4ud1vn4t3q"},{"post_id":"ck2roxrdy000d3w4uhdykbx84","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrf100383w4ue9wbfa61"},{"post_id":"ck2roxrdy000d3w4uhdykbx84","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxrf2003a3w4u0a394yw0"},{"post_id":"ck2roxreh00163w4ugozsamq4","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrf2003d3w4u5vpd9a1n"},{"post_id":"ck2roxreh00163w4ugozsamq4","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxrf2003e3w4u3x22bv9i"},{"post_id":"ck2roxrek001c3w4uh6pfe2se","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrf3003f3w4u3ca71mv0"},{"post_id":"ck2roxrek001c3w4uh6pfe2se","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxrf3003g3w4ub0i2h56w"},{"post_id":"ck2roxre9000s3w4u9xst2a03","category_id":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrf3003h3w4u6hpuchob"},{"post_id":"ck2roxre9000s3w4u9xst2a03","category_id":"ck2roxrf2003c3w4ualf66rku","_id":"ck2roxrf3003i3w4uel8kdgxa"},{"post_id":"ck2roxrfa003m3w4uda4m38xc","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrff003t3w4uatagdutr"},{"post_id":"ck2roxrfa003m3w4uda4m38xc","category_id":"ck2roxren001j3w4ufwl230ms","_id":"ck2roxrfh003x3w4u3y6y55u9"},{"post_id":"ck2roxrfd003p3w4ub0yw2ie6","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfj00413w4ucz0b0c89"},{"post_id":"ck2roxrfd003p3w4ub0yw2ie6","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrfk00453w4u4pffewv5"},{"post_id":"ck2roxrf8003k3w4u1ngidmcc","category_id":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrfm00493w4u3ffp5lf5"},{"post_id":"ck2roxrf8003k3w4u1ngidmcc","category_id":"ck2roxrfc003o3w4ugzqa14d6","_id":"ck2roxrfo004c3w4ugynr485w"},{"post_id":"ck2roxrfe003s3w4u1pnwc19s","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfp004f3w4u5qy5f5zs"},{"post_id":"ck2roxrfe003s3w4u1pnwc19s","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrfp004h3w4uh8efadfg"},{"post_id":"ck2roxrfg003w3w4u5czb1iq7","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfq004k3w4u528c9tim"},{"post_id":"ck2roxrfg003w3w4u5czb1iq7","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrfr004m3w4uee9pdinm"},{"post_id":"ck2roxrfi00403w4uhkfc8txh","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfr004p3w4ubthr1lu2"},{"post_id":"ck2roxrfi00403w4uhkfc8txh","category_id":"ck2roxreo001r3w4ubiq53ep2","_id":"ck2roxrfs004r3w4ua1cq0yrq"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfs004t3w4u5s5n591d"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxrfs004w3w4u9vd0dlio"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfs004y3w4u3jvpb5ff"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","category_id":"ck2roxrff003u3w4ubygj8fnx","_id":"ck2roxrft00503w4uabu60nkl"},{"post_id":"ck2roxrfb003n3w4uhowr53zd","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrft00523w4uh4zc44zc"},{"post_id":"ck2roxrfb003n3w4uhowr53zd","category_id":"ck2roxrfj00423w4u6ozyh2jo","_id":"ck2roxrft00553w4uaw9l9ezm"},{"post_id":"ck2roxrfj00443w4uebbx91xt","category_id":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrft00563w4u0ul65502"},{"post_id":"ck2roxrfj00443w4uebbx91xt","category_id":"ck2roxrfo004b3w4u0khv4h1u","_id":"ck2roxrfu00573w4u3tdxeo5y"},{"post_id":"ck2roxrfl00483w4ueanodvja","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfu00593w4ufsdp1ztv"},{"post_id":"ck2roxrfl00483w4ueanodvja","category_id":"ck2roxrel001e3w4u7rk6395p","_id":"ck2roxrfu005b3w4ufyy3cbh0"},{"post_id":"ck2roxrfl00483w4ueanodvja","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrfu005c3w4u70lg2jia"},{"post_id":"ck2roxrfl00483w4ueanodvja","category_id":"ck2roxrff003u3w4ubygj8fnx","_id":"ck2roxrfu005d3w4ue9h1cujg"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","category_id":"ck2roxreq00233w4u0i1n2kgv","_id":"ck2roxrjh005j3w4u8hz0d4qt"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","category_id":"ck2roxrfc003o3w4ugzqa14d6","_id":"ck2roxrjh005l3w4u62wp7w3o"},{"post_id":"ck2roxrjf005f3w4ucque8p08","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrji005m3w4u1k6hcem4"},{"post_id":"ck2roxrjf005f3w4ucque8p08","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxrji005n3w4u0ai1djge"},{"post_id":"ck2roxrjg005h3w4uce1oao2b","category_id":"ck2roxrdz000f3w4u34vx2ty3","_id":"ck2roxrji005p3w4uea0b3wgg"},{"post_id":"ck2roxrjg005h3w4uce1oao2b","category_id":"ck2roxrep001x3w4u28h0e8cx","_id":"ck2roxrji005q3w4uhmwgfmiw"}],"PostTag":[{"post_id":"ck2roxrdl00023w4udji60myh","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxrdx000b3w4ue3vd7rop"},{"post_id":"ck2roxrdp00033w4u1jd00t59","tag_id":"ck2roxrdw000a3w4u4a714cas","_id":"ck2roxre2000i3w4uc1xf9ko1"},{"post_id":"ck2roxre5000n3w4udidy7dra","tag_id":"ck2roxrdz000g3w4uds3s9kuu","_id":"ck2roxre9000r3w4uhujob6qe"},{"post_id":"ck2roxre5000n3w4udidy7dra","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxreb000t3w4u0paualpt"},{"post_id":"ck2roxrds00063w4u0ct82zs2","tag_id":"ck2roxrdz000g3w4uds3s9kuu","_id":"ck2roxrec000w3w4u984ddobg"},{"post_id":"ck2roxrds00063w4u0ct82zs2","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxree000z3w4u2wbc69lg"},{"post_id":"ck2roxrdu00073w4ufuft0a3c","tag_id":"ck2roxre9000q3w4u8y6u07v2","_id":"ck2roxref00123w4ufbxy7mbz"},{"post_id":"ck2roxred000y3w4u8g0f8i10","tag_id":"ck2roxrdz000g3w4uds3s9kuu","_id":"ck2roxreh00153w4ucuygetkm"},{"post_id":"ck2roxred000y3w4u8g0f8i10","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxrei00183w4ucobmb1jc"},{"post_id":"ck2roxrdv00083w4ugv70e1nb","tag_id":"ck2roxrec000x3w4u6v7l3hxs","_id":"ck2roxrek001b3w4ue80z063a"},{"post_id":"ck2roxrej00193w4ucao81yb1","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxrel001d3w4u0f0m2iet"},{"post_id":"ck2roxrdx000c3w4uh4xla36o","tag_id":"ck2roxrec000x3w4u6v7l3hxs","_id":"ck2roxrem001h3w4u1cox78i6"},{"post_id":"ck2roxrdx000c3w4uh4xla36o","tag_id":"ck2roxrej001a3w4u3mumdj7d","_id":"ck2roxren001k3w4u41v9962w"},{"post_id":"ck2roxrdy000d3w4uhdykbx84","tag_id":"ck2roxrem001f3w4uggez266j","_id":"ck2roxren001m3w4ubj2lauu1"},{"post_id":"ck2roxre0000h3w4u786v4jwh","tag_id":"ck2roxren001l3w4u8583ex66","_id":"ck2roxrep001v3w4u243v8cfq"},{"post_id":"ck2roxre0000h3w4u786v4jwh","tag_id":"ck2roxreo001p3w4u2hwkg08g","_id":"ck2roxreq001y3w4ucrpk6lv4"},{"post_id":"ck2roxre2000j3w4ubdub29ri","tag_id":"ck2roxrep001t3w4u29962pej","_id":"ck2roxreq00213w4u50z3dci8"},{"post_id":"ck2roxre8000o3w4ugk6n80kn","tag_id":"ck2roxreq00203w4u2mh9c499","_id":"ck2roxres00263w4uat4vhmgr"},{"post_id":"ck2roxre9000s3w4u9xst2a03","tag_id":"ck2roxrer00253w4uafhga39l","_id":"ck2roxreu002d3w4uf8qwccky"},{"post_id":"ck2roxre9000s3w4u9xst2a03","tag_id":"ck2roxret002a3w4u571u4lqu","_id":"ck2roxrev002g3w4uaeqn0a70"},{"post_id":"ck2roxreb000u3w4u8zno6ybm","tag_id":"ck2roxret002c3w4u38sj4msj","_id":"ck2roxrex002p3w4uc5gaby2x"},{"post_id":"ck2roxreb000u3w4u8zno6ybm","tag_id":"ck2roxrev002i3w4u2l0z74ju","_id":"ck2roxrex002r3w4u855k3o6o"},{"post_id":"ck2roxree00103w4u4rcpc2vz","tag_id":"ck2roxrew002m3w4ubiqi89jg","_id":"ck2roxrey002v3w4u7wib0dez"},{"post_id":"ck2roxref00133w4ucnch0o8b","tag_id":"ck2roxrem001f3w4uggez266j","_id":"ck2roxrez00303w4u9uemcrpu"},{"post_id":"ck2roxreh00163w4ugozsamq4","tag_id":"ck2roxrem001f3w4uggez266j","_id":"ck2roxrf000353w4u8a325abr"},{"post_id":"ck2roxrek001c3w4uh6pfe2se","tag_id":"ck2roxrdz000g3w4uds3s9kuu","_id":"ck2roxrf200393w4u2pw056y1"},{"post_id":"ck2roxrek001c3w4uh6pfe2se","tag_id":"ck2roxrf000323w4ucjezgjya","_id":"ck2roxrf2003b3w4uack3ho8i"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","tag_id":"ck2roxreo001p3w4u2hwkg08g","_id":"ck2roxrfe003r3w4uedki1gry"},{"post_id":"ck2roxrf7003j3w4uabno0xgj","tag_id":"ck2roxrf9003l3w4uedjd7va0","_id":"ck2roxrfg003v3w4uev123fb9"},{"post_id":"ck2roxrfd003p3w4ub0yw2ie6","tag_id":"ck2roxrec000x3w4u6v7l3hxs","_id":"ck2roxrfi003z3w4uesm5d8am"},{"post_id":"ck2roxrfe003s3w4u1pnwc19s","tag_id":"ck2roxrec000x3w4u6v7l3hxs","_id":"ck2roxrfj00433w4u63prbmvo"},{"post_id":"ck2roxrfe003s3w4u1pnwc19s","tag_id":"ck2roxrej001a3w4u3mumdj7d","_id":"ck2roxrfl00473w4u3ez7b428"},{"post_id":"ck2roxrf8003k3w4u1ngidmcc","tag_id":"ck2roxrfd003q3w4u571b2dso","_id":"ck2roxrfn004a3w4uaz3icdmz"},{"post_id":"ck2roxrf8003k3w4u1ngidmcc","tag_id":"ck2roxret002a3w4u571u4lqu","_id":"ck2roxrfp004e3w4ues392ojb"},{"post_id":"ck2roxrf8003k3w4u1ngidmcc","tag_id":"ck2roxreo001p3w4u2hwkg08g","_id":"ck2roxrfp004g3w4u6nvw6gth"},{"post_id":"ck2roxrfa003m3w4uda4m38xc","tag_id":"ck2roxreo001p3w4u2hwkg08g","_id":"ck2roxrfp004i3w4ub5qz6535"},{"post_id":"ck2roxrfa003m3w4uda4m38xc","tag_id":"ck2roxrfh003y3w4uc7skbfek","_id":"ck2roxrfq004l3w4uagbzhjkv"},{"post_id":"ck2roxrfb003n3w4uhowr53zd","tag_id":"ck2roxrfk00463w4ufo1pgqip","_id":"ck2roxrfr004n3w4uaw3oh5ms"},{"post_id":"ck2roxrfg003w3w4u5czb1iq7","tag_id":"ck2roxre9000q3w4u8y6u07v2","_id":"ck2roxrfr004q3w4u5suo3fs3"},{"post_id":"ck2roxrfg003w3w4u5czb1iq7","tag_id":"ck2roxrfp004d3w4u2av6fi4x","_id":"ck2roxrfs004s3w4u0f73ddew"},{"post_id":"ck2roxrfi00403w4uhkfc8txh","tag_id":"ck2roxre9000q3w4u8y6u07v2","_id":"ck2roxrfs004v3w4u313f8tsx"},{"post_id":"ck2roxrfi00403w4uhkfc8txh","tag_id":"ck2roxrfp004d3w4u2av6fi4x","_id":"ck2roxrfs004x3w4ue6qw0nc3"},{"post_id":"ck2roxrfj00443w4uebbx91xt","tag_id":"ck2roxrfr004o3w4ucxqc05wj","_id":"ck2roxrft00513w4ueebgbqsu"},{"post_id":"ck2roxrfj00443w4uebbx91xt","tag_id":"ck2roxrfs004u3w4u4m0d4kao","_id":"ck2roxrft00533w4u090aczt8"},{"post_id":"ck2roxrfl00483w4ueanodvja","tag_id":"ck2roxrfs004z3w4ubkvp0p21","_id":"ck2roxrfu00583w4uau4zhma9"},{"post_id":"ck2roxrfl00483w4ueanodvja","tag_id":"ck2roxrfp004d3w4u2av6fi4x","_id":"ck2roxrfu005a3w4ua6wr3kgi"},{"post_id":"ck2roxrjf005f3w4ucque8p08","tag_id":"ck2roxrem001f3w4uggez266j","_id":"ck2roxrjh005i3w4u8ufdcewo"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","tag_id":"ck2roxrjg005g3w4ua3q0aqk0","_id":"ck2roxrjj005t3w4uhm0s0sgy"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","tag_id":"ck2roxrjh005k3w4u81xy0hk1","_id":"ck2roxrjj005u3w4uehwd53eb"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","tag_id":"ck2roxrji005o3w4ugbde0875","_id":"ck2roxrjj005v3w4ub5cv9ein"},{"post_id":"ck2roxrje005e3w4ufp5hczuk","tag_id":"ck2roxrji005r3w4udgl24eof","_id":"ck2roxrjj005w3w4uhth624ph"},{"post_id":"ck2roxrjg005h3w4uce1oao2b","tag_id":"ck2roxrem001f3w4uggez266j","_id":"ck2roxrjj005x3w4u3ldshwgx"},{"post_id":"ck2roxrjg005h3w4uce1oao2b","tag_id":"ck2roxrjj005s3w4u19eccpoo","_id":"ck2roxrjj005y3w4uez8rhc56"},{"post_id":"ck2roxrjg005h3w4uce1oao2b","tag_id":"ck2roxrds00053w4u7m636rhq","_id":"ck2roxrjj005z3w4udfaiahba"}],"Tag":[{"name":"面试题","_id":"ck2roxrds00053w4u7m636rhq"},{"name":"Chrome","_id":"ck2roxrdw000a3w4u4a714cas"},{"name":"JS","_id":"ck2roxrdz000g3w4uds3s9kuu"},{"name":"React","_id":"ck2roxre9000q3w4u8y6u07v2"},{"name":"React基础教程","_id":"ck2roxrec000x3w4u6v7l3hxs"},{"name":"Redux","_id":"ck2roxrej001a3w4u3mumdj7d"},{"name":"Vue","_id":"ck2roxrem001f3w4uggez266j"},{"name":"SVN","_id":"ck2roxren001l3w4u8583ex66"},{"name":"快速使用","_id":"ck2roxreo001p3w4u2hwkg08g"},{"name":"Webpack","_id":"ck2roxrep001t3w4u29962pej"},{"name":"ElementUI","_id":"ck2roxreq00203w4u2mh9c499"},{"name":"Python","_id":"ck2roxrer00253w4uafhga39l"},{"name":"ORM","_id":"ck2roxret002a3w4u571u4lqu"},{"name":"CSS","_id":"ck2roxret002c3w4u38sj4msj"},{"name":"BFC","_id":"ck2roxrev002i3w4u2l0z74ju"},{"name":"ES6","_id":"ck2roxrew002m3w4ubiqi89jg"},{"name":"设计模式","_id":"ck2roxrf000323w4ucjezgjya"},{"name":"HTML5","_id":"ck2roxrf9003l3w4uedjd7va0"},{"name":"BeeGo","_id":"ck2roxrfd003q3w4u571b2dso"},{"name":"Gulp","_id":"ck2roxrfh003y3w4uc7skbfek"},{"name":"Mongodb","_id":"ck2roxrfk00463w4ufo1pgqip"},{"name":"项目实战","_id":"ck2roxrfp004d3w4u2av6fi4x"},{"name":"Node","_id":"ck2roxrfr004o3w4ucxqc05wj"},{"name":"支付宝","_id":"ck2roxrfs004u3w4u4m0d4kao"},{"name":"Canvas","_id":"ck2roxrfs004z3w4ubkvp0p21"},{"name":"Gin","_id":"ck2roxrjg005g3w4ua3q0aqk0"},{"name":"Beego","_id":"ck2roxrjh005k3w4u81xy0hk1"},{"name":"Iris","_id":"ck2roxrji005o3w4ugbde0875"},{"name":"研究报告","_id":"ck2roxrji005r3w4udgl24eof"},{"name":"源码解析","_id":"ck2roxrjj005s3w4u19eccpoo"}]}}